{"Id":"ca61207b-612c-4cfd-a2a1-17428766098a","Topic":"Tester.java","Question":"","Solution":"package Q9_02_Social_Network;\n\nimport java.util.HashMap;\nimport java.util.LinkedList;\n\npublic class Tester {\n\n\tpublic static void printPeople(LinkedList<Person> path) {\n\t\tif (path == null) {\n\t\t\tSystem.out.println(\"No path\");\n\t\t} else {\n\t\t\tfor (Person p : path) {\n\t\t\t\tSystem.out.println(p.getID());\n\t\t\t}\n\t\t}\t\t\n\t}\n\t\n\tpublic static boolean isEqual(LinkedList<Person> path1, LinkedList<Person> path2, boolean reverse) {\n\t\tif (path1 == null || path2 == null) {\n\t\t\treturn path1 == null && path2 == null;\n\t\t}\n\t\tif (path1.size() != path2.size()) {\n\t\t\treturn false;\n\t\t}\n\t\t\n\t\tfor (int i = 0; i < path1.size(); i++) {\n\t\t\tint other = reverse ? path2.size() - i - 1 : i;\n\t\t\tif (path1.get(i) != path2.get(other)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\t\n\tpublic static boolean isEquivalent(LinkedList<Person> path1, LinkedList<Person> path2) {\n\t\tboolean f1 = isEqual(path1, path2, false);\n\t\tboolean f2 = isEqual(path1, path2, true);\n\t\treturn f1 || f2;\n\t}\t\n\t\n\tpublic static void main(String[] args) {\n\t\tint nPeople = 11;\n\t\tHashMap<Integer, Person> people = new HashMap<Integer, Person>();\n\t\tfor (int i = 0; i < nPeople; i++) {\n\t\t\tPerson p = new Person(i);\n\t\t\tpeople.put(i, p);\n\t\t}\n\t\t\n\t\tint[][] edges = {{1, 4}, {1, 2}, {1, 3}, {3, 2}, {4, 6}, {3, 7}, {6, 9}, {9, 10}, {5, 10}, {2, 5}, {3, 7}};\n\t\t//int[][] edges = {{1, 4}, {1, 2}, {4, 6}, {6, 9}, {9, 10}, {5, 10}, {2, 5}};\n\t\t//int[][] edges = {{1, 2}, {1, 4}, {2, 3}, {3, 4}, {4, 6}, {5, 6}, {4, 5}}; \n\t\tfor (int[] edge : edges) {\n\t\t\tPerson source = people.get(edge[0]);\n\t\t\tsource.addFriend(edge[1]);\n\t\t\t\n\t\t\tPerson destination = people.get(edge[1]);\n\t\t\tdestination.addFriend(edge[0]);\n\t\t}\n\t\t\n\t\t/*int i = 1;\n\t\tint j = 10;\n\t\tLinkedList<Person> path1 = findPathBFS(people, i, j);\n\t\tLinkedList<Person> path2 = findPathBiBFS(people, i, j);\n\t\tSystem.out.println(\"Path 1\");\n\t\tprintPeople(path1);\n\t\tSystem.out.println(\"Path 2\");\n\t\tprintPeople(path2);*/\n\t\t\n\t\t\n\t\tfor (int i = 0; i < nPeople; i++) {\n\t\t\tfor (int j = 0; j < nPeople; j++) {\n\t\t\t\tLinkedList<Person> path1 = QuestionA.findPathBFS(people, i, j);\n\t\t\t\tLinkedList<Person> path2 = QuestionB.findPathBiBFS(people, i, j);\n\t\t\t\tif (!isEquivalent(path1, path2)) {\n\t\t\t\t\tSystem.out.println(\"Not equal: \" + i + \" to \" + j);\n\t\t\t\t\tSystem.out.println(\"Path 1\");\n\t\t\t\t\tprintPeople(path1);\n\t\t\t\t\tSystem.out.println(\"Path 2\");\n\t\t\t\t\tprintPeople(path2);\n\t\t\t\t\tbreak;\n\t\t\t\t} else {\n\t\t\t\t\tSystem.out.println(\"Is equal: \" + i + \" to \" + j);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n}\n","Chapter":"Q9_02_Social_Network"}