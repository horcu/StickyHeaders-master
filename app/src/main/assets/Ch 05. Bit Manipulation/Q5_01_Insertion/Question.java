{"Id":"39ea90e0-7670-4c6d-9782-0709bb9a7e1c","Topic":"Question.java","Question":"","Solution":"package Q5_01_Insertion;\r\n\r\nimport CtCILibrary.AssortedMethods;\r\n\r\npublic class Question {\r\n\r\n\tpublic static int updateBits(int n, int m, int i, int j) {\r\n\t\t// Validation\r\n\t\tif (i >= 32 || j < i) {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t\t\r\n\t\t/* Create a mask to clear bits i through j in n\r\n\t\t/* EXAMPLE: i = 2, j = 4. Result should be 11100011.\r\n\t\t * (Using 8 bits for this example.  This is obviously not actually 8 bits.)\r\n\t\t */\r\n\t\tint allOnes = ~0; // allOnes = 11111111\r\n\t\t\r\n\t\tint left = allOnes << (j + 1); // 1s through position j, then 0s. left = 11100000\t\r\n\t  \tint right = ((1 << i) - 1); // 1ï¿½s after position i.  right = 00000011\r\n\t\tint mask = left | right; // All 1s, except for 0s between i and j. mask = 11100011\r\n\r\n\t\t/* Clear i through j, then put m in there */\r\n\t\tint n_cleared = n & mask; // Clear bits j through i.\r\n\t\tint m_shifted = m << i; // Move m into correct position.\r\n\t\t\r\n\t\t/* OR them, and we're done! */\r\n\t\treturn n_cleared | m_shifted; \r\n\t}\r\n\t\r\n\tpublic static void main(String[] args) {\r\n\t\tint a = 103217;\r\n\t\tSystem.out.println(AssortedMethods.toFullBinaryString(a));\r\n\t\tint b = 13;\r\n\t\tSystem.out.println(AssortedMethods.toFullBinaryString(b));\t\t\r\n\t\tint c = updateBits(a, b, 4, 12);\r\n\t\tSystem.out.println(AssortedMethods.toFullBinaryString(c));\r\n\t}\r\n\r\n}\r\n","Chapter":"Q5_01_Insertion"}