{"Id":"07cb6512-d1d4-41ef-a336-4e75ae9a4c42","Topic":"Question.java","Question":"","Solution":"package Q2_08_Loop_Detection;\r\n\r\nimport CtCILibrary.LinkedListNode;\r\n\r\npublic class Question {\r\n\r\n\tpublic static LinkedListNode FindBeginning(LinkedListNode head) {\r\n\t\tLinkedListNode slow = head;\r\n\t\tLinkedListNode fast = head; \r\n\t\t\r\n\t\t// Find meeting point\r\n\t\twhile (fast != null && fast.next != null) { \r\n\t\t\tslow = slow.next; \r\n\t\t\tfast = fast.next.next;\r\n\t\t\tif (slow == fast) {\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Error check - there is no meeting point, and therefore no loop\r\n\t\tif (fast == null || fast.next == null) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\r\n\t\t/* Move slow to Head. Keep fast at Meeting Point. Each are k steps\r\n\t\t/* from the Loop Start. If they move at the same pace, they must\r\n\t\t * meet at Loop Start. */\r\n\t\tslow = head; \r\n\t\twhile (slow != fast) { \r\n\t\t\tslow = slow.next; \r\n\t\t\tfast = fast.next; \r\n\t\t}\r\n\t\t\r\n\t\t// Both now point to the start of the loop.\r\n\t\treturn fast;\r\n\t}\r\n\t\r\n\tpublic static void main(String[] args) {\r\n\t\tint list_length = 100;\r\n\t\tint k = 10;\r\n\t\t\r\n\t\t// Create linked list\r\n\t\tLinkedListNode[] nodes = new LinkedListNode[list_length];\r\n\t\tfor (int i = 0; i < list_length; i++) {\r\n\t\t\tnodes[i] = new LinkedListNode(i, null, i > 0 ? nodes[i - 1] : null);\r\n\t\t}\r\n\t\t\r\n\t\t// Create loop;\r\n\t\tnodes[list_length - 1].next = nodes[list_length - k];\r\n\t\t\r\n\t\tLinkedListNode loop = FindBeginning(nodes[0]);\r\n\t\tif (loop == null) {\r\n\t\t\tSystem.out.println(\"No Cycle.\");\r\n\t\t} else {\r\n\t\t\tSystem.out.println(loop.data);\r\n\t\t}\r\n\t}\r\n\r\n}\r\n","Chapter":"Q2_08_Loop_Detection"}