{"Id":"7ccb4fab-943f-463e-8003-b07f93f8f702","Topic":"Q_12.java","Question":"","Solution":"package Big_O;\n\npublic class Q_12 {\n\n\tpublic static int binarySearch(int[] a, int x) {\n\t\tint low = 0;\n\t\tint high = a.length - 1;\n\t\tint mid;\n\t\t\n\t\twhile (low <= high) {\n\t\t\tmid = (low + high) / 2;\n\t\t\tif (a[mid] < x) {\n\t\t\t\tlow = mid + 1;\n\t\t\t} else if (a[mid] > x) {\n\t\t\t\thigh = mid - 1;\n\t\t\t} else {\n\t\t\t\treturn mid;\n\t\t\t}\n\t\t}\n\t\treturn -1;\n\t}\n\t\n\tpublic static void mergesort(int[] array) {\n\t\tint[] helper = new int[array.length];\n\t\tmergesort(array, helper, 0, array.length - 1);\n\t}\n\n\tpublic static void mergesort(int[] array, int[] helper, int low, int high) {\n\t\tif (low < high) {\n\t\t\tint middle = (low + high) / 2;\n\t\t\tmergesort(array, helper, low, middle); // Sort left half\n\t\t\tmergesort(array, helper, middle+1, high); // Sort right half\n\t\t\tmerge(array, helper, low, middle, high); // Merge them\n\t\t}\n\t}\n\n\tpublic static void merge(int[] array, int[] helper, int low, int middle, int high) {\n\t\t/* Copy both halves into a helper array */\n\t\tfor (int i = low; i <= high; i++) {\n\t\t\thelper[i] = array[i];\n\t\t}\n\n\t\tint helperLeft = low;\n\t\tint helperRight = middle + 1;\n\t\tint current = low;\n\n\t\t/* Iterate through helper array. Compare the left and right\n\t\t * half, copying back the smaller element from the two halves\n\t\t * into the original array. */\n\t\twhile (helperLeft <= middle && helperRight <= high) {\n\t\t\tif (helper[helperLeft] <= helper[helperRight]) {\n\t\t\t\tarray[current] = helper[helperLeft];\n\t\t\t\thelperLeft++;\n\t\t\t} else { // If right element is smaller than left element\n\t\t\t\tarray[current] = helper[helperRight];\n\t\t\t\thelperRight++;\n\t\t\t}\n\t\t\tcurrent++;\n\t\t}\n\n\t\t/* Copy the rest of the left side of the array into the\n\t\t * target array */\n\t\tint remaining = middle - helperLeft;\n\t\tfor (int i = 0; i <= remaining; i++) {\n\t\t\tarray[current + i] = helper[helperLeft + i];\n\t\t}\n\t}\t\n\t\n\tpublic static int intersection(int[] a, int[] b) {\n\t\tmergesort(b);\n\t\tint intersect = 0;\n\t\t\n\t\tfor (int x : a) {\n\t\t\tif (binarySearch(b, x) >= 0) {\n\t\t\t\tintersect++;\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn intersect;\n\t}\n\t\n\tpublic static void main(String[] args) {\n\t\tint[] a = {1, 3, 5, 7};\n\t\tint[] b = {1, 9, 2, 7};\n\t\tint x = intersection(a, b);\n\t\tSystem.out.println(x);\n\t}\n}\n","Chapter":"Big_O"}