{"Id":"91185d14-d7ae-4807-8572-a895ba67dc41","Topic":"PathNode.java","Question":"","Solution":"package Q17_22_Word_Transformer;\n\nimport java.util.LinkedList;\n\npublic class PathNode {\n\tprivate String word = null;\n\tprivate PathNode previousNode = null;\n\tpublic PathNode(String word, PathNode previous) {\n\t\tthis.word = word;\n\t\tpreviousNode = previous;\n\t}\n\t\n\tpublic String getWord() {\n\t\treturn word;\n\t}\n\t\n\t/* Traverse path and return linked list of nodes. */\n\tpublic LinkedList<String> collapse(boolean startsWithRoot) {\n\t\tLinkedList<String> path = new LinkedList<String>();\n\t\tPathNode node = this;\n\t\twhile (node != null) {\n\t\t\tif (startsWithRoot) {\n\t\t\t\tpath.addLast(node.word);\n\t\t\t} else {\n\t\t\t\tpath.addFirst(node.word);\n\t\t\t}\n\t\t\tnode = node.previousNode;\n\t\t}\n\t\treturn path;\n\t}\n}\n","Chapter":"Q17_22_Word_Transformer"}