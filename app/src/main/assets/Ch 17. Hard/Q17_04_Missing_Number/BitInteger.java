{"Id":"fae9ca42-aea5-47a7-8b99-5e9c89651ff0","Topic":"BitInteger.java","Question":"","Solution":"package Q17_04_Missing_Number;\r\n\r\npublic class BitInteger {\r\n\tpublic static int INTEGER_SIZE;\r\n\tprivate boolean[] bits;\r\n\tpublic BitInteger() {\r\n\t\tbits = new boolean[INTEGER_SIZE];\r\n\t}\r\n\t/* Creates a number equal to given value. Takes time proportional \r\n\t * to INTEGER_SIZE. */\r\n\tpublic BitInteger(int value){\r\n\t\tbits = new boolean[INTEGER_SIZE];\r\n\t\tfor (int j = 0; j < INTEGER_SIZE; j++){\r\n\t\t\tif (((value >> j) & 1) == 1) bits[INTEGER_SIZE - 1 - j] = true;\r\n\t\t\telse bits[INTEGER_SIZE - 1 - j] = false;\r\n\t\t}\r\n\t}\r\n\t\r\n\t/** Returns k-th most-significant bit. */ \r\n\tpublic int fetch(int k){\r\n\t\tif (bits[k]) return 1;\r\n\t\telse return 0;\r\n\t}\r\n\t\r\n\t/** Sets k-th most-significant bit. */\r\n\tpublic void set(int k, int bitValue){\r\n\t\tif (bitValue == 0 ) bits[k] = false;\r\n\t\telse bits[k] = true;\r\n\t}\r\n\t\r\n\t/** Sets k-th most-significant bit. */\r\n\tpublic void set(int k, char bitValue){\r\n\t\tif (bitValue == '0' ) bits[k] = false;\r\n\t\telse bits[k] = true;\r\n\t}\r\n\t\r\n\t/** Sets k-th most-significant bit. */\r\n\tpublic void set(int k, boolean bitValue){\r\n\t\tbits[k] = bitValue;\r\n\t}\t\r\n\t\r\n\tpublic void swapValues(BitInteger number) {\r\n\t\tfor (int i = 0; i < INTEGER_SIZE; i++) {\r\n\t\t\tint temp = number.fetch(i);\r\n\t\t\tnumber.set(i, this.fetch(i));\r\n\t\t\tthis.set(i, temp);\r\n\t\t}\r\n\t}\r\n\t\t\r\n\tpublic int toInt() {\r\n\t\tint number = 0;\r\n\t\tfor (int j = INTEGER_SIZE - 1; j >= 0; j--){\r\n\t\t\tnumber = number | fetch(j);\r\n\t\t\tif (j > 0) {\r\n\t\t\t\tnumber = number << 1;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn number;\r\n\t}\r\n}\r\n\r\n","Chapter":"Q17_04_Missing_Number"}