{"Id":"d6e14c78-7a4f-40b9-aa47-ca0339f77f30","Topic":"QuestionB.java","Question":"","Solution":"package Q17_14_Smallest_K;\r\n\r\nimport java.util.Comparator;\r\nimport java.util.PriorityQueue;\r\n\r\nimport CtCILibrary.AssortedMethods;\r\n\r\npublic class QuestionB {\r\n\t\r\n\tpublic static class MaxHeapComparator implements Comparator<Integer> {\r\n\t    public int compare(Integer x, Integer y) {\r\n\t        return y - x;\r\n\t    }\r\n\t}\r\n\t\r\n\tpublic static int[] smallestK(int[] array, int k) {\r\n\t\tif (k <= 0 || k > array.length) {\r\n\t\t\tthrow new IllegalArgumentException();\r\n\t\t}\r\n\t\t\r\n\t\tPriorityQueue<Integer> heap = getKMaxHeap(array, k);\r\n\t\treturn heapToIntArray(heap);\r\n\t}\r\n\t\r\n\t/* Convert heap to int array. */\r\n\tpublic static int[] heapToIntArray(PriorityQueue<Integer> heap) {\r\n\t\tint[] array = new int[heap.size()];\r\n\t\twhile (!heap.isEmpty()) {\r\n\t\t\tarray[heap.size() - 1] = heap.poll();\r\n\t\t}\r\n\t\treturn array;\r\n\t}\t\r\n\t\r\n\t/* Create max heap of smallest k elements. */\t\r\n\tpublic static PriorityQueue<Integer> getKMaxHeap(int[] array, int k) {\r\n\t\tPriorityQueue<Integer> heap = new PriorityQueue<Integer>(k, new MaxHeapComparator());\r\n\t\tfor (int a : array) {\r\n\t\t\tif (heap.size() < k) { // If space remaining\r\n\t\t\t\theap.add(a);\r\n\t\t\t} else if (a < heap.peek()) { // If full and top is small\r\n\t\t\t\theap.poll(); // remove highest\r\n\t\t\t\theap.add(a); // insert new element\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn heap;\r\n\t}\t\r\n\r\n\tpublic static void main(String[] args) {\r\n\t\tint[] array = {1, 5, 2, 9, -1, 11, 6, 13, 15};\r\n\t\tint[] smallest = smallestK(array, 3);\r\n\t\tSystem.out.println(AssortedMethods.arrayToString(smallest));\r\n\t}\r\n\r\n}\r\n","Chapter":"Q17_14_Smallest_K"}