{"Id":"a21b4545-6d5d-45ac-adc1-062344c9d426","Topic":"QuestionOld.java","Question":"","Solution":"package Q17_08_Circus_Tower;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.*;\r\n\r\npublic class QuestionOld {\r\n\r\n\t// Returns longer sequence\r\n\tprivate static ArrayList<HtWt> seqWithMaxLength(ArrayList<HtWt> seq1, ArrayList<HtWt> seq2) {\r\n\t\tif (seq1 == null) {\r\n\t\t\treturn seq2;\r\n\t\t} else if (seq2 == null) {\r\n\t\t\treturn seq1;\r\n\t\t}\r\n\t\treturn seq1.size() > seq2.size() ? seq1 : seq2;\r\n\t}\r\n\t\r\n\tprivate static void longestIncreasingSubsequence(ArrayList<HtWt> array, ArrayList<ArrayList<HtWt>> solutions, int current_index) {\r\n\t\tif (current_index >= array.size() || current_index < 0) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tHtWt current_element = array.get(current_index);\r\n\t\t\r\n\t\t// Find longest sequence that we can append current_element to\r\n\t\tArrayList<HtWt> best_sequence = null;\r\n\t\tfor (int i = 0; i < current_index; i++) {\r\n\t\t\tif (array.get(i).isBefore(current_element)) { // If current_element is bigger than list tail\r\n\t\t\t\tbest_sequence = seqWithMaxLength(best_sequence, solutions.get(i)); // Set best_sequence to our new max\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\t// Append current_element\r\n\t\tArrayList<HtWt> new_solution = new ArrayList<HtWt>();\r\n\t\tif (best_sequence != null) {\r\n\t\t\tnew_solution.addAll(best_sequence);\r\n\t\t} \r\n\t\tnew_solution.add(current_element);\r\n\t\t\r\n\t\t// Add to list and recurse\r\n\t\tsolutions.add(current_index, new_solution);\r\n\t\tlongestIncreasingSubsequence(array, solutions, current_index + 1);\r\n\t}\r\n\t\r\n\tpublic static ArrayList<HtWt> longestIncreasingSeq(ArrayList<HtWt> array) {\r\n\t\tCollections.sort(array);\r\n\t\t\r\n\t\tArrayList<ArrayList<HtWt>> solutions = new ArrayList<ArrayList<HtWt>>();\r\n\t\tlongestIncreasingSubsequence(array, solutions, 0);\r\n\t\t\r\n\t\tArrayList<HtWt> best_sequence = null;\r\n\t\tfor (int i = 0; i < array.size(); i++) {\r\n\t\t\tbest_sequence = seqWithMaxLength(best_sequence, solutions.get(i));\r\n\t\t}\r\n\t\t\r\n\t\treturn best_sequence;\r\n\t}\t\r\n\t\r\n\tpublic static ArrayList<HtWt> initialize() {\r\n\t\tArrayList<HtWt> items = new ArrayList<HtWt>();\r\n\t\t\r\n\t\tHtWt item = new HtWt(65, 60);\r\n\t\titems.add(item);\r\n\t\t\r\n\t\titem = new HtWt(70, 150);\r\n\t\titems.add(item);\r\n\t\t\r\n\t\titem = new HtWt(56, 90);\r\n\t\titems.add(item);\r\n\t\t\r\n\t\titem = new HtWt(75, 190);\r\n\t\titems.add(item);\r\n\t\t\r\n\t\titem = new HtWt(60, 95);\r\n\t\titems.add(item);\r\n\t\t\r\n\t\titem = new HtWt(68, 110);\r\n\t\titems.add(item);\r\n\t\t\r\n\t\titem = new HtWt(35, 65);\r\n\t\titems.add(item);\r\n\t\t\r\n\t\titem = new HtWt(40, 60);\r\n\t\titems.add(item);\r\n\t\t\r\n\t\titem = new HtWt(45, 63);\r\n\t\titems.add(item);\r\n\t\t\r\n\t\treturn items;\r\n\t}\r\n\t\r\n\tpublic static void printList(ArrayList<HtWt> list) {\r\n\t\tfor (HtWt item : list) {\r\n\t\t\tSystem.out.println(item.toString() + \" \");\r\n\t\t}\r\n\t}\r\n\t\r\n\tpublic static void main(String[] args) {\r\n\t\tArrayList<HtWt> items = initialize();\r\n\t\tArrayList<HtWt> solution = longestIncreasingSeq(items);\r\n\t\tprintList(solution);\r\n\t}\r\n\r\n}\r\n","Chapter":"Q17_08_Circus_Tower"}