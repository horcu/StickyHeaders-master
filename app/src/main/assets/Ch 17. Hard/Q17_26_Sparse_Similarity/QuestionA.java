{"Id":"868d3355-0ac8-4f62-8cf2-de5447743e1f","Topic":"QuestionA.java","Question":"","Solution":"package Q17_26_Sparse_Similarity;\n\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.Collections;\nimport java.util.HashMap;\nimport java.util.HashSet;\nimport java.util.Map.Entry;\n\nimport CtCILibrary.AssortedMethods;\n\npublic class QuestionA {\n\tpublic static HashMap<DocPair, Double> computeSimilarities(HashMap<Integer, Document> documents) {\n\t\tArrayList<Document> docs = new ArrayList<Document>();\n\t\tfor (Document doc : documents.values()) {\n\t\t\tdocs.add(doc);\n\t\t}\n\t\treturn computeSimilarities(docs);\n\t}\n\t\n\tpublic static HashMap<DocPair, Double> computeSimilarities(ArrayList<Document> documents) {\n\t\tHashMap<DocPair, Double> similarities = new HashMap<DocPair, Double>();\n\t\tfor (int i = 0; i < documents.size(); i++) {\n\t\t\tfor (int j = i + 1; j < documents.size(); j++) {\n\t\t\t\tDocument doc1 = documents.get(i);\n\t\t\t\tDocument doc2 = documents.get(j);\n\t\t\t\tdouble sim = computeSimilarity(doc1, doc2);\n\t\t\t\tif (sim > 0) {\n\t\t\t\t\tDocPair pair = new DocPair(doc1.getId(), doc2.getId());\n\t\t\t\t\tsimilarities.put(pair, sim);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn similarities;\n\t}\n\t\t\n\tpublic static double computeSimilarity(Document doc1, Document doc2) {\n\t\tint intersection = 0;\n\t\tHashSet<Integer> set1 = new HashSet<Integer>();\n\t\tset1.addAll(doc1.getWords());\n\t\t\n\t\tfor (int word : doc2.getWords()) {\n\t\t\tif (set1.contains(word)) {\n\t\t\t\tintersection++;\n\t\t\t}\n\t\t}\n\t\t\n\t\tdouble union = doc1.size() + doc2.size() - intersection;\n\t\t\n\t\treturn intersection / union;\n\t}\t\n\t\n\tpublic static ArrayList<Integer> removeDups(int[] array) {\n\t\tHashSet<Integer> set = new HashSet<Integer>();\n\t\tfor (int a : array) {\n\t\t\tset.add(a);\n\t\t}\n\t\tArrayList<Integer> list = new ArrayList<Integer>();\n\t\tlist.addAll(set);\n\t\treturn list;\n\t}\n\t\n\tpublic static void main(String[] args) {\n\t\tint numDocuments = 10;\n\t\tint docSize = 5;\n\t\tHashMap<Integer, Document> documents = new HashMap<Integer, Document>();\n\t\tfor (int i = 0; i < numDocuments; i++) {\n\t\t\tint[] words = AssortedMethods.randomArray(docSize, 0, 10);\n\t\t\tArrayList<Integer> w = Tester.removeDups(words);\n\t\t\tSystem.out.println(i + \": \" + w.toString());\n\t\t\tDocument doc = new Document(i, w);\n\t\t\tdocuments.put(i, doc);\n\t\t}\n\t\t\n\t\tHashMap<DocPair, Double> similarities = computeSimilarities(documents);\n\t\tTester.printSim(similarities);\n\t}\n\n}\n","Chapter":"Q17_26_Sparse_Similarity"}