{"Id":"88d86336-16bb-491b-8cd7-6d6cd681a63d","Topic":"QuestionC.java","Question":"","Solution":"package Q17_26_Sparse_Similarity;\n\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.HashMap;\nimport java.util.HashSet;\nimport java.util.Map.Entry;\n\nimport CtCILibrary.AssortedMethods;\n\npublic class QuestionC {\n\tpublic static class Element implements Comparable<Element> {\n\t\tpublic int word;\n\t\tpublic int document;\n\t\tpublic Element(int w, int d) {\n\t\t\tword = w;\n\t\t\tdocument = d;\n\t\t}\n\t\t\n\t\tpublic int compareTo(Element e) {\n\t\t\tif (word == e.word) {\n\t\t\t\treturn document - e.document;\n\t\t\t}\n\t\t\treturn word - e.word;\n\t\t}\n\t}\n\t\n\tpublic static HashMap<DocPair, Double> computeSimilarities(HashMap<Integer, Document> documents) {\n\t\tArrayList<Element> elements = sortWords(documents);\n\t\tHashMap<DocPair, Double> similarities = computeIntersections(elements);\n\t\tadjustToSimilarities(documents, similarities);\n\t\treturn similarities;\n\t}\t\n\t\n\t/* Throw all words into one list, sorting by the word then the document. */\n\tpublic static ArrayList<Element> sortWords(HashMap<Integer, Document> docs) {\n\t\tArrayList<Element> elements = new ArrayList<Element>();\n\t\tfor (Document doc : docs.values()) {\n\t\t\tArrayList<Integer> words = doc.getWords();\n\t\t\tfor (int word : words) {\n\t\t\t\telements.add(new Element(word, doc.getId()));\n\t\t\t}\n\t\t}\n\t\tCollections.sort(elements);\n\t\treturn elements;\n\t}\n\t\n\t/* Increment the intersection size of each document pair. */\n\tpublic static void increment(HashMap<DocPair, Double> similarities, int doc1, int doc2) {\n\t\tDocPair pair = new DocPair(doc1, doc2);\n\t\tif (!similarities.containsKey(pair)) {\n\t\t\tsimilarities.put(pair, 1.0);\n\t\t} else {\n\t\t\tsimilarities.put(pair, similarities.get(pair) + 1);\t\t\n\t\t}\n\t}\n\t\n\t/* Adjust the intersection value to become the similarity. */\n\tpublic static HashMap<DocPair, Double> computeIntersections(ArrayList<Element> elements) {\n\t\tHashMap<DocPair, Double> similarities = new HashMap<DocPair, Double>();\n\t\t\n\t\tfor (int i = 0; i < elements.size(); i++) {\n\t\t\tElement left = elements.get(i);\n\t\t\tfor (int j = i + 1; j < elements.size(); j++) {\n\t\t\t\tElement right = elements.get(j);\n\t\t\t\tif (left.word != right.word) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tincrement(similarities, left.document, right.document);\t\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn similarities;\n\t}\n\t\n\t/* Adjust the intersection value to become the similarity. */\n\tpublic static void adjustToSimilarities(HashMap<Integer, Document> documents, HashMap<DocPair, Double> similarities) {\n\t\tfor (Entry<DocPair, Double> entry : similarities.entrySet()) {\n\t\t\tDocPair pair = entry.getKey();\n\t\t\tDouble intersection = entry.getValue();\n\t\t\tDocument doc1 = documents.get(pair.doc1);\n\t\t\tDocument doc2 = documents.get(pair.doc2);\n\t\t\tdouble union = (double) doc1.size() + doc2.size() - intersection;\n\t\t\tentry.setValue(intersection / union);\n\t\t}\n\t}\n\t\n\tpublic static void main(String[] args) {\n\t\tint numDocuments = 10;\n\t\tint docSize = 5;\n\t\tHashMap<Integer, Document> documents = new HashMap<Integer, Document>();\n\t\tfor (int i = 0; i < numDocuments; i++) {\n\t\t\tint[] words = AssortedMethods.randomArray(docSize, 0, 10);\n\t\t\tArrayList<Integer> w = Tester.removeDups(words);\n\t\t\tSystem.out.println(i + \": \" + w.toString());\n\t\t\tDocument doc = new Document(i, w);\n\t\t\tdocuments.put(i, doc);\n\t\t}\n\t\t\n\t\tHashMap<DocPair, Double> similarities = computeSimilarities(documents);\n\t\tTester.printSim(similarities);\n\t}\n\n}\n","Chapter":"Q17_26_Sparse_Similarity"}