{"Id":"2b0f2ef5-8d7e-4d0a-adb8-b1376a55d915","Topic":"Rectangle.java","Question":"","Solution":"package Q17_25_Word_Rectangle;\r\n\r\nimport CtCILibrary.Trie;\r\n\r\n/* A class that represents a rectangular array of letters. */\r\npublic class Rectangle {\r\n    \r\n    // Rectangle data.\r\n    public int height;\r\n    public int length; \r\n    public char [][] matrix;\r\n\r\n    public Rectangle(int len) {\r\n        this.length = len;\r\n    }\r\n\r\n    /* Construct a rectangular array of letters of the specified length\r\n     * and height, and backed by the specified matrix of letters. (It is\r\n     * assumed that the length and height specified as arguments are \r\n     * consistent with the array argument's dimensions.)\r\n     */\r\n    public Rectangle(int length, int height, char[][] letters) {\r\n        this.height = letters.length;\r\n        this.length = letters[0].length;\r\n        matrix = letters;\r\n    }\r\n\r\n    /* Return the letter present at the specified location in the array.\r\n     */\r\n    public char getLetter (int i, int j) {\r\n        return matrix[i][j];\r\n    }\r\n    \r\n    public String getColumn(int i) {\r\n\t\tchar[] column = new char[height];\r\n\t\tfor (int j = 0; j < height; j++) {\r\n\t\t\tcolumn[j] = getLetter(j, i);\r\n\t\t}\r\n\t\treturn new String(column);\r\n    }\r\n    \r\n    public boolean isComplete(int l, int h, WordGroup groupList) {\r\n\t\t// Check if we have formed a complete rectangle.\r\n\t\tif (height == h) {\r\n\t\t\t// Check if each column is a word in the dictionary.\r\n\t\t\tfor (int i = 0; i < l; i++) {\r\n\t\t\t\tString col = getColumn(i);\r\n\t\t\t\tif (!groupList.containsWord(col)) {\r\n\t\t\t\t\treturn false; // Invalid rectangle.\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn true; // Valid Rectangle!\r\n\t\t}\r\n\t\treturn false;\r\n    }\r\n    \r\n    public boolean isPartialOK(int l, Trie trie) {\r\n    \tif (height == 0) {\r\n    \t\treturn true;\r\n    \t}\r\n\t\tfor (int i = 0; i < l ; i++ ) {\r\n\t\t\tString col = getColumn(i);\r\n\t\t\tif (!trie.contains(col)) {\r\n\t\t\t\treturn false; // Invalid rectangle.\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn true;\r\n    }\r\n\r\n    /* If the length of the argument s is consistent with that of this\r\n     * Rectangle object, then return a Rectangle whose matrix is constructed by\r\n     * appending s to the underlying matrix. Otherwise, return null. The\r\n     * underlying matrix of this Rectangle object is /not/ modified.\r\n     */\r\n    public Rectangle append(String s) {\r\n        if (s.length() == length) {\r\n            char temp[][] = new char[height + 1][length];\r\n            for (int i = 0; i < height; i++) {\r\n                for (int j = 0; j < length; j++) {\r\n                    temp[i][j] = matrix[i][j];\r\n                }\r\n            }\r\n            s.getChars(0, length, temp[height], 0);\r\n\r\n            return new Rectangle(length, height + 1, temp);\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /* Print the rectangle out, row by row. */\r\n    public void print() {\r\n        for (int i = 0; i < height ; i++) {\r\n            for (int j = 0; j < length; j++) {\r\n                System.out.print(matrix[i][j]);\r\n            }\r\n            System.out.println(\" \");\r\n        }\r\n    }\r\n}\r\n","Chapter":"Q17_25_Word_Rectangle"}