{"Id":"544b7885-2627-4574-bbb2-00eb97e325ca","Topic":"QuestionB.java","Question":"","Solution":"package Q17_07_Baby_Names;\n\nimport java.util.HashMap;\nimport java.util.Map.Entry;\n\npublic class QuestionB {\n\t/* Add all names to graph as nodes. */\n\tpublic static Graph constructGraph(HashMap<String, Integer> names) {\n\t\tGraph graph = new Graph();\n\t\tfor (Entry<String, Integer> entry : names.entrySet()) {\n\t\t    String name = entry.getKey();\n\t\t    int frequency = entry.getValue();\n\t\t    graph.createNode(name, frequency);\n\t\t}\n\t\treturn graph;\n\t}\n\t\n\t/* Connect synonymous spellings. */\n\tpublic static void connectEdges(Graph graph, String[][] synonyms) {\n\t\tfor (String[] entry : synonyms) {\n\t\t    String name1 = entry[0];\n\t\t    String name2 = entry[1];\n\t\t    graph.addEdge(name1,  name2);\n\t\t}\n\t}\n\t\n\t/* Do depth-first search to find the total frequency of this \n\t * component, and mark each node as visited.*/\t\n\tpublic static int getComponentFrequency(GraphNode node) {\n\t\tif (node.isVisited()) {\n\t\t\treturn 0;\n\t\t}\n\t\tnode.setIsVisited(true);\n\t\tint sum = node.getFrequency();\n\t\tfor (GraphNode child : node.getNeighbors()) {\n\t\t\tsum += getComponentFrequency(child);\n\t\t}\n\t\treturn sum;\n\t}\n\t\n\t/* Do DFS of each component. If a node has been visited before,\n\t * then its component has already been computed. */\n\tpublic static HashMap<String, Integer> getTrueFrequencies(Graph graph) {\n\t\tHashMap<String, Integer> rootNames = new HashMap<String, Integer>();\n\t\tfor (GraphNode node : graph.getNodes()) {\n\t\t\tif (!node.isVisited()) {\n\t\t\t\tint frequency = getComponentFrequency(node);\n\t\t\t\tString name = node.getName();\n\t\t\t\trootNames.put(name, frequency);\n\t\t\t}\n\t\t}\n\t\treturn rootNames;\n\t}\n\t\n\tpublic static HashMap<String, Integer> trulyMostPopular(HashMap<String, Integer> names, String[][] synonyms) {\n\t\tGraph graph = constructGraph(names);\n\t\tconnectEdges(graph, synonyms);\n\t\tHashMap<String, Integer> rootNames = getTrueFrequencies(graph);\n\t\treturn rootNames;\n\t}\n\t\n\tpublic static void main(String[] args) {\n\t\tHashMap<String, Integer> names = new HashMap<String, Integer>();\n\t\t\n\t\tnames.put(\"John\", 3);\n\t\tnames.put(\"Jonathan\", 4);\n\t\tnames.put(\"Johnny\", 5);\n\t\tnames.put(\"Chris\", 1);\n\t\tnames.put(\"Kris\", 3);\n\t\tnames.put(\"Brian\", 2);\n\t\tnames.put(\"Bryan\", 4);\n\t\tnames.put(\"Carleton\", 4);\n\t\t\n\t\tString[][] synonyms = \n\t\t\t{{\"John\", \"Jonathan\"}, \n\t\t\t {\"Jonathan\", \"Johnny\"}, \n\t\t\t {\"Chris\", \"Kris\"}, \n\t\t\t {\"Brian\", \"Bryan\"}};\n\t\t\n\t\tHashMap<String, Integer> rootNames = trulyMostPopular(names, synonyms);\n\t\tfor (Entry<String, Integer> entry : rootNames.entrySet()) {\n\t\t    String name = entry.getKey();\n\t\t    int frequency = entry.getValue();\n\t\t    System.out.println(name + \": \" + frequency);\n\t\t}\n\t}\n\n}\n","Chapter":"Q17_07_Baby_Names"}