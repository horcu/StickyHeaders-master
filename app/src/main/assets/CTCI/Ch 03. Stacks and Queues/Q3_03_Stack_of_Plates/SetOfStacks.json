{"Id":"c91f5653-00a2-490b-bdb3-0e5590e7c21d","Topic":"Ch 03. Stacks and Queues","Question":"","Solution":"package Q3_03_Stack_of_Plates;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.EmptyStackException;\r\n\r\npublic class SetOfStacks {\r\n\tArrayList<Stack> stacks = new ArrayList<Stack>();\r\n\tpublic int capacity;\r\n\t\r\n\tpublic SetOfStacks(int capacity) { \r\n\t\tthis.capacity = capacity; \r\n\t}\r\n\t\r\n\tpublic Stack getLastStack() {\r\n\t\tif (stacks.size() == 0) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\t\treturn stacks.get(stacks.size() - 1);\r\n\t}\r\n\t\r\n\tpublic void push(int v) {\r\n\t\tStack last = getLastStack();\r\n\t\tif (last != null && !last.isFull()) { // add to last\r\n\t\t\tlast.push(v);\r\n\t\t} else { // must create new stack\r\n\t\t\tStack stack = new Stack(capacity);\r\n\t\t\tstack.push(v);\r\n\t\t\tstacks.add(stack);\r\n\t\t}\r\n\t}\r\n\t\r\n\tpublic int pop() {\r\n\t\tStack last = getLastStack();\r\n\t\tif (last == null) throw new EmptyStackException();\r\n\t\tint v = last.pop();\r\n\t\tif (last.size == 0) {\r\n\t\t\tstacks.remove(stacks.size() - 1);\r\n\t\t}\r\n\t\treturn v;\r\n\t}\r\n\t\r\n\tpublic int popAt(int index) {\r\n\t\treturn leftShift(index, true);\r\n\t}\r\n\t\r\n\tpublic int leftShift(int index, boolean removeTop) {\r\n\t\tStack stack = stacks.get(index);\r\n\t\tint removed_item;\r\n\t\tif (removeTop) removed_item = stack.pop();\r\n\t\telse removed_item = stack.removeBottom();\r\n\t\tif (stack.isEmpty()) {\r\n\t\t\tstacks.remove(index);\r\n\t\t} else if (stacks.size() > index + 1) {\r\n\t\t\tint v = leftShift(index + 1, false);\r\n\t\t\tstack.push(v);\r\n\t\t}\r\n\t\treturn removed_item;\r\n\t}\r\n\t\r\n\tpublic boolean isEmpty() {\r\n\t\tStack last = getLastStack();\r\n\t\treturn last == null || last.isEmpty();\r\n\t}\r\n}\r\n\r\n","Chapter":"Ch 03. Stacks and Queues"}