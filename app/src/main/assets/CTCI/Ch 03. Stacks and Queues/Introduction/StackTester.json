{"Id":"1f85c0e2-3f9a-487c-a23e-90358f846c65","Topic":"Ch 03. Stacks and Queues","Question":"","Solution":"package Introduction;\n\nimport java.util.EmptyStackException;\nimport java.util.Stack;\n\nimport CtCILibrary.AssortedMethods;\n\npublic class StackTester {\n\n\tpublic static void main(String[] args) {\n\t\tint[] array = AssortedMethods.randomArray(100, -100, 100);\n\t\tMyStack<Integer> stack1 = new MyStack<Integer>();\t\t\n\t\tStack<Integer> stack2 = new Stack<Integer>();\n\t\t\n\t\tfor (int a : array) {\n\t\t\tif (a < 0) {\n\t\t\t\tint top1, top2;\n\t\t\t\ttry {\n\t\t\t\t\ttop1 = stack1.pop();\n\t\t\t\t} catch (EmptyStackException ex) {\n\t\t\t\t\ttop1 = Integer.MIN_VALUE;\n\t\t\t\t}\n\t\t\t\ttry {\n\t\t\t\t\ttop2 = stack2.pop();\n\t\t\t\t} catch (EmptyStackException ex) {\n\t\t\t\t\ttop2 = Integer.MIN_VALUE;\n\t\t\t\t}\n\t\t\t\tif (top1 != top2) {\n\t\t\t\t\tSystem.out.println(\"ERROR: mismatching tops\");\n\t\t\t\t} else {\n\t\t\t\t\tSystem.out.println(\"SUCCESS: matching tops: \" + top1);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tstack1.push(a);\n\t\t\t\tstack2.push(a);\n\t\t\t}\n\t\t}\n\t\t\n\t\twhile (!stack1.isEmpty() || !stack2.isEmpty()) {\n\t\t\tint top1, top2;\n\t\t\ttry {\n\t\t\t\ttop1 = stack1.pop();\n\t\t\t} catch (EmptyStackException ex) {\n\t\t\t\ttop1 = Integer.MIN_VALUE;\n\t\t\t}\n\t\t\ttry {\n\t\t\t\ttop2 = stack2.pop();\n\t\t\t} catch (EmptyStackException ex) {\n\t\t\t\ttop2 = Integer.MIN_VALUE;\n\t\t\t}\n\t\t\tif (top1 != top2) {\n\t\t\t\tSystem.out.println(\"ERROR: mismatching tops\");\n\t\t\t} else {\n\t\t\t\tSystem.out.println(\"SUCCESS: matching tops: \" + top1);\n\t\t\t}\n\t\t}\n\t}\n\n}\n","Chapter":"Ch 03. Stacks and Queues"}