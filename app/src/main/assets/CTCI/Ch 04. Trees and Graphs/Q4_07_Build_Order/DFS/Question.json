{"Id":"0dac93f8-cf16-4adf-a903-f7605c023a9a","Topic":"Q4_07_Build_Order","Question":"","Solution":"package Q4_07_Build_Order.DFS;\n\nimport java.util.ArrayList;\nimport java.util.Stack;\n\npublic class Question {\n\n\t/* Build the graph, adding the edge (a, b) if b is dependent on a. \n\t * Assumes a pair is listed in “build order” (which is the reverse \n\t * of dependency order). The pair (a, b) in dependencies indicates\n\t * that b depends on a and a must be built before a. */\n\tpublic static Graph buildGraph(String[] projects, String[][] dependencies) {\n\t\tGraph graph = new Graph();\n\t\tfor (String project : projects) {\n\t\t\tgraph.getOrCreateNode(project);\n\t\t}\n\t\t\n\t\tfor (String[] dependency : dependencies) {\n\t\t\tString first = dependency[0];\n\t\t\tString second = dependency[1];\n\t\t\tgraph.addEdge(first, second);\n\t\t}\n\t\t\n\t\treturn graph;\n\t}\n\t\n\tpublic static boolean doDFS(Project project, Stack<Project> stack) {\n\t\tif (project.getState() == Project.State.PARTIAL) {\n\t\t\treturn false; // Cycle\n\t\t}\n\t\t\n\t\tif (project.getState() == Project.State.BLANK) {\n\t\t\tproject.setState(Project.State.PARTIAL);\n\t\t\tArrayList<Project> children = project.getChildren();\n\t\t\tfor (Project child : children) {\n\t\t\t\tif (!doDFS(child, stack)) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t\tproject.setState(Project.State.COMPLETE);\n\t\t\tstack.push(project);\n\t\t}\n\t\treturn true;\n\t}\n\t\n\tpublic static Stack<Project> orderProjects(ArrayList<Project> projects) {\n\t\tStack<Project> stack = new Stack<Project>();\n\t\tfor (Project project : projects) {\n\t\t\tif (project.getState() == Project.State.BLANK) {\n\t\t\t\tif (!doDFS(project, stack)) {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn stack;\n\t}\n\t\n\tpublic static String[] convertToStringList(Stack<Project> projects) {\n\t\tString[] buildOrder = new String[projects.size()];\n\t\tfor (int i = 0; i < buildOrder.length; i++) {\n\t\t\tbuildOrder[i] = projects.pop().getName();\n\t\t}\n\t\treturn buildOrder;\n\t}\n\t\n\tpublic static Stack<Project> findBuildOrder(String[] projects, String[][] dependencies) {\n\t\tGraph graph = buildGraph(projects, dependencies);\n\t\treturn orderProjects(graph.getNodes());\n\t}\n\t\n\tpublic static String[] buildOrderWrapper(String[] projects, String[][] dependencies) {\n\t\tStack<Project> buildOrder = findBuildOrder(projects, dependencies);\n\t\tif (buildOrder == null) return null;\n\t\tString[] buildOrderString = convertToStringList(buildOrder);\n\t\treturn buildOrderString;\n\t}\n\t\n\tpublic static void main(String[] args) {\n\t\tString[] projects = {\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"};\n\t\tString[][] dependencies = {\n\t\t\t\t{\"a\", \"b\"},\n\t\t\t\t{\"b\", \"c\"},\n\t\t\t\t{\"a\", \"c\"},\n\t\t\t\t{\"d\", \"e\"},\n\t\t\t\t{\"b\", \"d\"},\n\t\t\t\t{\"e\", \"f\"},\n\t\t\t\t{\"a\", \"f\"},\n\t\t\t\t{\"h\", \"i\"},\n\t\t\t\t{\"h\", \"j\"},\n\t\t\t\t{\"i\", \"j\"},\n\t\t\t\t{\"g\", \"j\"}};\n\t\tString[] buildOrder = buildOrderWrapper(projects, dependencies);\n\t\tif (buildOrder == null) {\n\t\t\tSystem.out.println(\"Circular Dependency.\");\n\t\t} else {\n\t\t\tfor (String s : buildOrder) {\n\t\t\t\tSystem.out.println(s);\n\t\t\t}\n\t\t}\n\t}\n\n}\n","Chapter":"Q4_07_Build_Order"}