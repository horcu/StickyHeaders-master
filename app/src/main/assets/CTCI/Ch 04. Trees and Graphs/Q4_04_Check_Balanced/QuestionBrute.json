{"Id":"63e6570c-8f48-4667-be5b-8b365bce9b40","Topic":"Ch 04. Trees and Graphs","Question":"","Solution":"package Q4_04_Check_Balanced;\r\n\r\nimport CtCILibrary.AssortedMethods;\r\nimport CtCILibrary.TreeNode;\r\n\r\npublic class QuestionBrute {\r\n\t\r\n\tpublic static int getHeight(TreeNode root) {\r\n\t\tif (root == null) {\r\n\t\t\treturn -1;\r\n\t\t}\r\n\t\treturn Math.max(getHeight(root.left), getHeight(root.right)) + 1;\r\n\t}\r\n\t\t\r\n\tpublic static boolean isBalanced(TreeNode root) {\r\n\t\tif (root == null) {\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\tint heightDiff = getHeight(root.left) - getHeight(root.right);\r\n\t\tif (Math.abs(heightDiff) > 1) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn isBalanced(root.left) && isBalanced(root.right);\r\n\t\t}\r\n\t}\r\n\t\r\n\tpublic static void main(String[] args) {\r\n\t\t// Create balanced tree\r\n\t\tint[] array = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};\r\n\t\tTreeNode root = TreeNode.createMinimalBST(array);\r\n\t\tSystem.out.println(\"Root? \" + root.data);\r\n\t\tSystem.out.println(\"Is balanced? \" + isBalanced(root));\r\n\t\t\r\n\t\t// Could be balanced, actually, but it's very unlikely...\r\n\t\tTreeNode unbalanced = new TreeNode(10);\r\n\t\tfor (int i = 0; i < 10; i++) {\r\n\t\t\tunbalanced.insertInOrder(AssortedMethods.randomIntInRange(0, 100));\r\n\t\t}\r\n\t\tSystem.out.println(\"Root? \" + unbalanced.data);\r\n\t\tSystem.out.println(\"Is balanced? \" + isBalanced(unbalanced));\r\n\t}\r\n\r\n}\r\n","Chapter":"Ch 04. Trees and Graphs"}