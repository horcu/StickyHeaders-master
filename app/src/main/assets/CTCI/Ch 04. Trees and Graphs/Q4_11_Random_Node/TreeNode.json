{"Id":"b65bcf9b-48e5-4c2d-8391-1e03dbe7dbd6","Topic":"Ch 04. Trees and Graphs","Question":"","Solution":"package Q4_11_Random_Node;\r\n\r\nimport java.util.Random;\r\n\r\n/* One node of a binary tree. The data element stored is a single \r\n * character.\r\n */\r\npublic class TreeNode {\r\n\tpublic int data;      \r\n\tpublic TreeNode left;    \r\n\tpublic TreeNode right; \r\n\tprivate int size = 0;\r\n\r\n\tpublic TreeNode(int d) {\r\n\t\tdata = d;\r\n\t\tsize = 1;\r\n\t}\r\n\t\r\n\tpublic void insertInOrder(int d) {\r\n\t\tif (d <= data) {\r\n\t\t\tif (left == null) {\r\n\t\t\t\tleft = new TreeNode(d);\r\n\t\t\t} else {\r\n\t\t\t\tleft.insertInOrder(d);\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tif (right == null) {\r\n\t\t\t\tright = new TreeNode(d);\r\n\t\t\t} else {\r\n\t\t\t\tright.insertInOrder(d);\r\n\t\t\t}\r\n\t\t}\r\n\t\tsize++;\r\n\t}\r\n\t\r\n\tpublic int size() {\r\n\t\treturn size;\r\n\t}\r\n\t\r\n\tpublic TreeNode find(int d) {\r\n\t\tif (d == data) {\r\n\t\t\treturn this;\r\n\t\t} else if (d <= data) {\r\n\t\t\treturn left != null ? left.find(d) : null;\r\n\t\t} else if (d > data) {\r\n\t\t\treturn right != null ? right.find(d) : null;\r\n\t\t}\r\n\t\treturn null;\r\n\t}\r\n\t\r\n\tpublic TreeNode getRandomNode() {\r\n\t\tint leftSize = left == null ? 0 : left.size();\r\n\t\tRandom random = new Random();\r\n\t\tint index = random.nextInt(size);\r\n\t\tif (index < leftSize) {\r\n\t\t\treturn left.getRandomNode();\r\n\t\t} else if (index == leftSize) {\r\n\t\t\treturn this;\r\n\t\t} else {\r\n\t\t\treturn right.getRandomNode();\r\n\t\t}\r\n\t}\r\n\t\r\n\tpublic TreeNode getIthNode(int i) {\r\n\t\tint leftSize = left == null ? 0 : left.size();\r\n\t\tif (i < leftSize) {\r\n\t\t\treturn left.getIthNode(i);\r\n\t\t} else if (i == leftSize) {\r\n\t\t\treturn this;\r\n\t\t} else {\r\n\t\t\treturn right.getIthNode(i - (leftSize + 1));\r\n\t\t}\r\n\t}\r\n} \r\n","Chapter":"Ch 04. Trees and Graphs"}