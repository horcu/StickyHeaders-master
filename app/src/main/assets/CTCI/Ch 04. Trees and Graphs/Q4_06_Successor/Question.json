{"Id":"e2c99604-7209-434c-ad76-704ed0852fb3","Topic":"Ch 04. Trees and Graphs","Question":"","Solution":"package Q4_06_Successor;\r\n\r\nimport CtCILibrary.TreeNode;\r\n\r\npublic class Question {\r\n\r\n\tpublic static TreeNode inorderSucc(TreeNode n) { \r\n\t\tif (n == null) return null;\r\n\t\t\r\n\t\t// Found right children -> return left most node of right subtree\r\n\t\tif (n.parent == null || n.right != null) { \r\n\t\t\treturn leftMostChild(n.right); \r\n\t\t} else { \r\n\t\t\tTreeNode q = n;\r\n\t\t\tTreeNode x = q.parent;\r\n\t\t\t// Go up until weï¿½re on left instead of right\r\n\t\t\twhile (x != null && x.left != q) {\r\n\t\t\t\tq = x;\r\n\t\t\t\tx = x.parent;\r\n\t\t\t}\r\n\t\t\treturn x;\r\n\t\t}  \r\n\t} \r\n\t\t\r\n\tpublic static TreeNode leftMostChild(TreeNode n) {\r\n\t\tif (n == null) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\t\twhile (n.left != null) {\r\n\t\t\tn = n.left; \r\n\t\t}\r\n\t\treturn n; \r\n\t}\r\n\t\r\n\tpublic static void main(String[] args) {\r\n\t\tint[] array = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};\r\n\t\tTreeNode root = TreeNode.createMinimalBST(array);\r\n\t\tfor (int i = 0; i < array.length; i++) {\r\n\t\t\tTreeNode node = root.find(array[i]);\r\n\t\t\tTreeNode next = inorderSucc(node);\r\n\t\t\tif (next != null) {\r\n\t\t\t\tSystem.out.println(node.data + \"->\" + next.data);\r\n\t\t\t} else {\r\n\t\t\t\tSystem.out.println(node.data + \"->\" + null);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n}\r\n","Chapter":"Ch 04. Trees and Graphs"}