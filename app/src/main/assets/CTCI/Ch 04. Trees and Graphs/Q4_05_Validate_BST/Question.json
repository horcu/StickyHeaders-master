{"Id":"555fed1e-3a96-40eb-90f8-103d9ab5db10","Topic":"Ch 04. Trees and Graphs","Question":"","Solution":"package Q4_05_Validate_BST;\r\n\r\nimport CtCILibrary.TreeNode;\r\n\r\npublic class Question {\r\n\tpublic static Integer last_printed = null;\r\n\r\n\tpublic static boolean checkBST(TreeNode node) {\r\n\t\treturn checkBST(node, true);\r\n\t}\r\n\r\n\t// Allow \"equal\" value only for left child. This validates the BST property.\r\n\tpublic static boolean checkBST(TreeNode n, boolean isLeft) {\r\n\t\tif (n == null) {\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\t\r\n\t\t// Check / recurse left\r\n\t\tif (!checkBST(n.left, true)) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\t\r\n\t\t// Check current\r\n\t\tif (last_printed != null) {\r\n\t\t\tif (isLeft) {\r\n\t\t\t\t// left child \"is allowed\" be equal to parent.\r\n\t\t\t\tif (n.data < last_printed) {\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\t// Right child \"is not allowed\" be equal to parent.\r\n\t\t\t\tif (n.data <= last_printed) {\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tlast_printed = n.data;\r\n\t\t\r\n\t\t// Check / recurse right\r\n\t\tif (!checkBST(n.right, false)) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\treturn true;\r\n\t}\r\n\r\n\tpublic static void main(String[] args) {\r\n\t\tint[] array = {Integer.MIN_VALUE, Integer.MAX_VALUE - 2, Integer.MAX_VALUE - 1, Integer.MAX_VALUE};\r\n\t\tTreeNode node = TreeNode.createMinimalBST(array);\r\n\t\t//node.left.data = 5;\r\n\t\t//node.left.right.data = 3;\r\n\t\tSystem.out.println(checkBST(node));\r\n\r\n\t\ttest();\r\n\t}\r\n\r\n\tpublic static void test() {\r\n\t\tTreeNode node;\r\n\t\tboolean condition;\r\n\t\tSystem.out.println(\"test cases for equals condition.\");\r\n\r\n\t\t/* Expect true: for left child: node.data <= last_printed.\r\n   2\r\n  / \\\r\n /   \\\r\n 2   3\r\n      \\\r\n      4\r\n\t\t*/\r\n\t\tint[] array2 = {1, 2, 3, 4};\r\n\t\tnode = TreeNode.createMinimalBST(array2);\r\n\t\tnode.left.data = 2;\r\n\t\tnode.print();\r\n\t\tlast_printed = null;\r\n\t\tcondition = checkBST(node);\r\n\t\tSystem.out.println(\"should be true: \" + condition);\r\n\r\n\t\t/* Expect false: for right child: node.data <= last_printed.\r\n   2\r\n  / \\\r\n /   \\\r\n 1   2\r\n      \\\r\n      4\r\n\t\t */\r\n\t\tint[] array3 = {1, 2, 3, 4};\r\n\t\tnode = TreeNode.createMinimalBST(array3);\r\n\t\tnode.right.data = 2;\r\n\t\tnode.print();\r\n\t\tlast_printed = null;\r\n\t\tcondition = checkBST(node);\r\n\t\tSystem.out.println(\"should be false: \" + condition);\r\n\t}\r\n}","Chapter":"Ch 04. Trees and Graphs"}