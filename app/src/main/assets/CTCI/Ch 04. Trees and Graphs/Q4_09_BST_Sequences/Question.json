{"Id":"c9db5ceb-04a4-44f2-b196-3cdd55c90087","Topic":"Ch 04. Trees and Graphs","Question":"","Solution":"package Q4_09_BST_Sequences;\n\nimport java.util.ArrayList;\nimport java.util.LinkedList;\n\nimport CtCILibrary.TreeNode;\n\npublic class Question {\n\t\n\tpublic static void weaveLists(LinkedList<Integer> first, LinkedList<Integer> second, ArrayList<LinkedList<Integer>> results, LinkedList<Integer> prefix) {\n\t\t/* One list is empty. Add the remainder to [a cloned] prefix and\n\t\t * store result. */\n\t\tif (first.size() == 0 || second.size() == 0) {\n\t\t\tLinkedList<Integer> result = (LinkedList<Integer>) prefix.clone();\n\t\t\tresult.addAll(first);\n\t\t\tresult.addAll(second);\n\t\t\tresults.add(result);\n\t\t\treturn;\n\t\t}\n\t\t\n\t\t/* Recurse with head of first added to the prefix. Removing the\n\t\t * head will damage first, so weâ€™ll need to put it back where we\n\t\t * found it afterwards. */\n\t\tint headFirst = first.removeFirst();\n\t\tprefix.addLast(headFirst);\n\t\tweaveLists(first, second, results, prefix);\n\t\tprefix.removeLast();\n\t\tfirst.addFirst(headFirst);\n\t\t\n\t\t/* Do the same thing with second, damaging and then restoring\n\t\t * the list.*/\n\t\tint headSecond = second.removeFirst();\n\t\tprefix.addLast(headSecond);\n\t\tweaveLists(first, second, results, prefix);\n\t\tprefix.removeLast();\t\n\t\tsecond.addFirst(headSecond);\n\t}\n\t\n\tpublic static ArrayList<LinkedList<Integer>> allSequences(TreeNode node) {\n\t\tArrayList<LinkedList<Integer>> result = new ArrayList<LinkedList<Integer>>();\n\t\t\n\t\tif (node == null) {\n\t\t\tresult.add(new LinkedList<Integer>());\n\t\t\treturn result;\n\t\t} \n\t\t\n\t\tLinkedList<Integer> prefix = new LinkedList<Integer>();\n\t\tprefix.add(node.data);\n\t\t\n\t\t/* Recurse on left and right subtrees. */\n\t\tArrayList<LinkedList<Integer>> leftSeq = allSequences(node.left);\n\t\tArrayList<LinkedList<Integer>> rightSeq = allSequences(node.right);\n\t\t\n\t\t/* Weave together each list from the left and right sides. */\n\t\tfor (LinkedList<Integer> left : leftSeq) {\n\t\t\tfor (LinkedList<Integer> right : rightSeq) {\n\t\t\t\tArrayList<LinkedList<Integer>> weaved = new ArrayList<LinkedList<Integer>>();\n\t\t\t\tweaveLists(left, right, weaved, prefix);\n\t\t\t\tresult.addAll(weaved);\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n\n\tpublic static void main(String[] args) {\n\t\tTreeNode node = new TreeNode(100);\n\t\tint[] array = {100, 50, 20, 75, 150, 120, 170};\n\t\tfor (int a : array) {\n\t\t\tnode.insertInOrder(a);\n\t\t}\n\t\tArrayList<LinkedList<Integer>> allSeq = allSequences(node);\n\t\tfor (LinkedList<Integer> list : allSeq) {\n\t\t\tSystem.out.println(list);\n\t\t}\n\t\tSystem.out.println(allSeq.size());\n\t}\n\n}\n","Chapter":"Ch 04. Trees and Graphs"}