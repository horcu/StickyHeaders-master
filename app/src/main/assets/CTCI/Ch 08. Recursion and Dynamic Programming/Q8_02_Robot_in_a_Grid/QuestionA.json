{"Id":"7c36dec3-2a73-4ba3-b319-9a39cf765f00","Topic":"Ch 08. Recursion and Dynamic Programming","Question":"","Solution":"package Q8_02_Robot_in_a_Grid;\r\n\r\nimport java.util.ArrayList;\r\n\r\nimport CtCILibrary.AssortedMethods;\r\n\r\npublic class QuestionA {\r\n\t\r\n\tpublic static ArrayList<Point> getPath(boolean[][] maze) {\r\n\t\tif (maze == null || maze.length == 0) return null;\r\n\t\tArrayList<Point> path = new ArrayList<Point>();\r\n\t\tif (getPath(maze, maze.length - 1, maze[0].length - 1, path)) {\r\n\t\t\treturn path;\r\n\t\t}\r\n\t\treturn null;\r\n\t}\t\r\n\t\r\n\tpublic static boolean getPath(boolean[][] maze, int row, int col, ArrayList<Point> path) {\r\n\t\t// If out of bounds or not available, return.\r\n\t\tif (col < 0 || row < 0 || !maze[row][col]) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\t\r\n\t\tboolean isAtOrigin = (row == 0) && (col == 0);\r\n\t\t\r\n\t\t// If there's a path from the start to my current location, add my location.\r\n\t\tif (isAtOrigin || getPath(maze, row, col - 1, path) || getPath(maze, row - 1, col, path)) { \r\n\t\t\tPoint p = new Point(row, col);\r\n\t\t\tpath.add(p);\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\t\r\n\t\treturn false;\r\n\t}\r\n\t\r\n\tpublic static void main(String[] args) {\r\n\t\tint size = 5;\r\n\t\tboolean[][] maze = AssortedMethods.randomBooleanMatrix(size, size, 70);\r\n\t\t\r\n\t\tAssortedMethods.printMatrix(maze);\r\n\t\t\r\n\t\tArrayList<Point> path = getPath(maze);\r\n\t\tif (path != null) {\r\n\t\t\tSystem.out.println(path.toString());\r\n\t\t} else {\r\n\t\t\tSystem.out.println(\"No path found.\");\r\n\t\t}\r\n\t}\r\n\r\n}\r\n","Chapter":"Ch 08. Recursion and Dynamic Programming"}