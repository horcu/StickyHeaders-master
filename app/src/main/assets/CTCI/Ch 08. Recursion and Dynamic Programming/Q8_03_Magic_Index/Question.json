{"Id":"c4719cfb-aec0-44ae-a32c-bba8919fdb41","Topic":"Ch 08. Recursion and Dynamic Programming","Question":"","Solution":"package Q8_03_Magic_Index;\r\n\r\nimport java.util.Arrays;\r\n\r\nimport CtCILibrary.AssortedMethods;\r\n\r\npublic class Question {\r\n\r\n\tpublic static int magicSlow(int[] array) {\r\n\t\tfor (int i = 0; i < array.length; i++) {\r\n\t\t\tif (array[i] == i) {\r\n\t\t\t\treturn i;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn -1;\r\n\t}\r\n\t\r\n\tpublic static int magicFast(int[] array, int start, int end) {\r\n\t\tif (end < start) {\r\n\t\t\treturn -1;\r\n\t\t}\r\n\t\tint mid = (start + end) / 2;\r\n\t\tif (array[mid] == mid) {\r\n\t\t\treturn mid;\r\n\t\t} else if (array[mid] > mid){\r\n\t\t\treturn magicFast(array, start, mid - 1);\r\n\t\t} else {\r\n\t\t\treturn magicFast(array, mid + 1, end);\r\n\t\t}\r\n\t}\r\n\t\r\n\tpublic static int magicFast(int[] array) {\r\n\t\treturn magicFast(array, 0, array.length - 1);\r\n\t}\r\n\t\r\n\t/* Creates an array that is distinct and sorted */\r\n\tpublic static int[] getDistinctSortedArray(int size) {\r\n\t\tint[] array = AssortedMethods.randomArray(size, -1 * size, size);\r\n\t\tArrays.sort(array);\r\n\t\tfor (int i = 1; i < array.length; i++) {\r\n\t\t\tif (array[i] == array[i-1]) {\r\n\t\t\t\tarray[i]++;\r\n\t\t\t} else if (array[i] < array[i - 1]) {\r\n\t\t\t\tarray[i] = array[i-1] + 1;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn array;\r\n\t}\r\n\t\r\n\tpublic static void main(String[] args) {\r\n\t\tfor (int i = 0; i < 1000; i++) {\r\n\t\t\tint size = AssortedMethods.randomIntInRange(5, 20);\r\n\t\t\tint[] array = getDistinctSortedArray(size);\r\n\t\t\tint v2 = magicFast(array);\r\n\t\t\tif (v2 == -1 && magicSlow(array) != -1) {\r\n\t\t\t\tint v1 = magicSlow(array);\r\n\t\t\t\tSystem.out.println(\"Incorrect value: index = -1, actual = \" + v1 + \" \" + i);\r\n\t\t\t\tSystem.out.println(AssortedMethods.arrayToString(array));\r\n\t\t\t\tbreak;\r\n\t\t\t} else if (v2 > -1 && array[v2] != v2) {\r\n\t\t\t\tSystem.out.println(\"Incorrect values: index= \" + v2 + \", value \" + array[v2]);\r\n\t\t\t\tSystem.out.println(AssortedMethods.arrayToString(array));\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n}\r\n","Chapter":"Ch 08. Recursion and Dynamic Programming"}