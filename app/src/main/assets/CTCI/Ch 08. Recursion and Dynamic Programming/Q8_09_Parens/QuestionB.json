{"Id":"e5b7d505-364d-4e1e-acca-c5a644dd8500","Topic":"Ch 08. Recursion and Dynamic Programming","Question":"","Solution":"package Q8_09_Parens;\r\n\r\nimport java.util.ArrayList;\r\n\r\npublic class QuestionB {\r\n\t\r\n\tpublic static void addParen(ArrayList<String> list, int leftRem, int rightRem, char[] str, int index) {\r\n\t\tif (leftRem < 0 || rightRem < leftRem) return; // invalid state\r\n\t\t\r\n\t\tif (leftRem == 0 && rightRem == 0) { /* all out of left and right parentheses */\r\n\t\t\tlist.add(String.copyValueOf(str));\r\n\t\t} else {\r\n\t\t\tstr[index] = '('; // Add left and recurse\r\n\t\t\taddParen(list, leftRem - 1, rightRem, str, index + 1);\r\n\t\t\t\r\n\t\t\tstr[index] = ')'; // Add right and recurse\r\n\t\t\taddParen(list, leftRem, rightRem - 1, str, index + 1);\r\n\t\t}\r\n\t}\r\n\t\r\n\tpublic static ArrayList<String> generateParens(int count) {\r\n\t\tchar[] str = new char[count*2];\r\n\t\tArrayList<String> list = new ArrayList<String>();\r\n\t\taddParen(list, count, count, str, 0);\r\n\t\treturn list;\r\n\t}\r\n\t\r\n\tpublic static void main(String[] args) {\r\n\t\tArrayList<String> list = generateParens(6);\r\n\t\tfor (String s : list) {\r\n\t\t\tSystem.out.println(s);\r\n\t\t}\r\n\t\tSystem.out.println(list.size());\t\t\r\n\t}\r\n\r\n}\r\n","Chapter":"Ch 08. Recursion and Dynamic Programming"}