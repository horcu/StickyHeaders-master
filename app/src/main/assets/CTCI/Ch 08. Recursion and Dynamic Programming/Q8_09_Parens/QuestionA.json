{"Id":"46572731-2195-4e6e-8832-f1c3456b8f2b","Topic":"Ch 08. Recursion and Dynamic Programming","Question":"","Solution":"package Q8_09_Parens;\r\n\r\nimport java.util.HashSet;\r\nimport java.util.Set;\r\n\r\npublic class QuestionA {\r\n\tpublic static String insertInside(String str, int leftIndex) {\r\n\t\tString left = str.substring(0, leftIndex + 1);\r\n\t\tString right = str.substring(leftIndex + 1, str.length());\r\n\t\treturn left + \"()\" + right;\r\n\t}\r\n\t\r\n\tpublic static Set<String> generateParens(int remaining) {\r\n\t\tSet<String> set = new HashSet<String>();\r\n\t\tif (remaining == 0) {\r\n\t\t\tset.add(\"\");\r\n\t\t} else {\r\n\t\t\tSet<String> prev = generateParens(remaining - 1); \r\n\t\t\tfor (String str : prev) {\r\n\t\t\t\tfor (int i = 0; i < str.length(); i++) {\r\n\t\t\t\t\tif (str.charAt(i) == '(') {\r\n\t\t\t\t\t\tString s = insertInside(str, i);\r\n\t\t\t\t\t\t/* Add s to set if it is not already in there. Note: \t\r\n\t\t\t\t\t\t * HashSet automatically checks for duplicates before\r\n\t\t\t\t\t\t * adding, so an explicit check is not necessary. */\r\n\t\t\t\t\t\tset.add(s);\t\t\t\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tset.add(\"()\" + str);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn set;\r\n\t}\r\n\t\r\n\tpublic static void main(String[] args) {\r\n\t\tSet<String> list = generateParens(4);\r\n\t\tfor (String s : list) {\r\n\t\t\tSystem.out.println(s);\r\n\t\t}\r\n\t\tSystem.out.println(list.size());\r\n\t}\r\n\r\n}\r\n","Chapter":"Ch 08. Recursion and Dynamic Programming"}