{"Id":"e68fd342-5398-4897-8b6e-817671c70aca","Topic":"Ch 08. Recursion and Dynamic Programming","Question":"","Solution":"package Q8_11_Coins;\r\n\r\npublic class Question {\t\r\n\tpublic static int makeChange(int amount, int[] denoms, int index) {\r\n\t\tif (index >= denoms.length - 1) return 1; // one denom remaining -> one way to do it\r\n\t\tint denomAmount = denoms[index];\r\n\t\tint ways = 0;\r\n\t\tfor (int i = 0; i * denomAmount <= amount; i++) {\r\n\t\t\tint amountRemaining = amount - i * denomAmount;\r\n\t\t\tways += makeChange(amountRemaining, denoms, index + 1); // go to next denom\r\n\t\t}\r\n\t\treturn ways;\r\n\t}\r\n\t\r\n\tpublic static int makeChange(int amount, int[] denoms) {\r\n\t\treturn makeChange(amount, denoms, 0);\r\n\t}\r\n\t\r\n\tpublic static void main(String[] args) {\r\n\t\tint[] denoms = {25, 10, 5, 1};\r\n\t\tint ways = makeChange(300322, denoms);\r\n\t\tSystem.out.println(ways);\r\n\t}\r\n\r\n}","Chapter":"Ch 08. Recursion and Dynamic Programming"}