{"Id":"0a744226-294f-4ce4-a12b-321227a84c59","Topic":"Ch 08. Recursion and Dynamic Programming","Question":"","Solution":"package Q8_11_Coins;\n\npublic class QuestionB {\n\n\tpublic static int makeChange(int n, int[] denoms) {\n\t\tint[][] map = new int[n + 1][denoms.length];\n\t\treturn makeChange(n, denoms, 0, map);\n\t}\n\t\n\tpublic static int makeChange(int amount, int[] denoms, int index, int[][] map) {\n\t\tif (map[amount][index] > 0) { // retrieve value\n\t\t\treturn map[amount][index];\n\t\t}\n\t\tif (index >= denoms.length - 1) return 1; // one denom remaining -> one way to do it\n\t\tint denomAmount = denoms[index];\n\t\tint ways = 0;\n\t\tfor (int i = 0; i * denomAmount <= amount; i++) {\n\t\t\t// go to next denom, assuming i coins of denomAmount\n\t\t\tint amountRemaining = amount - i * denomAmount;\n\t\t\tways += makeChange(amountRemaining, denoms, index + 1, map);\n\t\t}\n\t\tmap[amount][index] = ways;\n\t\treturn ways;\n\t}\t\n\t\n\tpublic static void main(String[] args) {\n\t\tint[] denoms = {25, 10, 5, 1};\n\t\tint ways = makeChange(100000, denoms);\n\t\tSystem.out.println(ways);\n\t}\n\n}\n","Chapter":"Ch 08. Recursion and Dynamic Programming"}