{"Id":"11ac2355-3989-43be-a596-b5008dca40c2","Topic":"Ch 08. Recursion and Dynamic Programming","Question":"","Solution":"package Q8_05_Recursive_Multiply;\n\npublic class Tester {\n\n\t/**\n\t * @param args\n\t */\n\tpublic static void main(String[] args) {\n\t\tint max = 1000;\n\t\tint counterA = 0, counterB = 0, counterC = 0, counterD = 0;\n\t\t\n\t\tfor (int a = 0; a < max; a++) {\n\t\t\tfor (int b = 0; b < max; b++) {\n\t\t\t\tint prodA = QuestionA.minProduct(a, b);\n\t\t\t\tint prodB = QuestionB.minProduct(a, b);\n\t\t\t\tint prodC = QuestionC.minProduct(a, b);\n\t\t\t\tint prodD = QuestionD.minProduct(a, b);\n\t\t\t\t\n\t\t\t\tint product = a * b;\n\t\t\t\t\n\t\t\t\tcounterA += QuestionA.counter;\n\t\t\t\tcounterB += QuestionB.counter;\n\t\t\t\tcounterC += QuestionC.counter;\n\t\t\t\tcounterD += QuestionD.counter;\n\n\t\t\t\tQuestionA.counter = 0;\n\t\t\t\tQuestionB.counter = 0;\n\t\t\t\tQuestionC.counter = 0;\n\t\t\t\tQuestionD.counter = 0;\n\t\t\t\t\n\t\t\t\tif (prodA != product || prodB != product || prodC != product || prodD != product) {\n\t\t\t\t\tSystem.out.println(\"Failure: \" + a + \" * \" + b + \" = \" + product + \" instead of (\" + prodA + \", \" + prodB + \", \" + prodC + \", \" + prodD + \")\");\n\t\t\t\t\tbreak;\n\t\t\t\t} \n\t\t\t}\n\t\t}\n\n\t\tSystem.out.println();\n\t\tSystem.out.println(\"A: \" + counterA);\n\t\tSystem.out.println(\"B: \" + counterB);\n\t\tSystem.out.println(\"C: \" + counterC);\n\t\tSystem.out.println(\"D: \" + counterD);\n\t}\n\n}\n","Chapter":"Ch 08. Recursion and Dynamic Programming"}