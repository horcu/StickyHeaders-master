{"Id":"02f8fbf3-4678-4be0-8cf9-a2178476b911","Topic":"Ch 08. Recursion and Dynamic Programming","Question":"","Solution":"package Q8_05_Recursive_Multiply;\n\npublic class QuestionB {\n\n\tpublic static int counter = 0;\n\t\n\tpublic static int sum(int x, int y) {\n\t\tcounter += 1;\n\t\treturn x + y;\n\t}\n\t\n\tpublic static int minProduct(int smaller, int bigger, int[] memo) {\n\t\tif (smaller == 0) {\n\t\t\treturn 0;\n\t\t} else if (smaller == 1) {\n\t\t\treturn bigger;\n\t\t} else if (memo[smaller] > 0) {\n\t\t\treturn memo[smaller];\n\t\t}\n\t\t\t\n\t\t/* Compute half. If uneven, compute other half. If even,\n\t\t * double it. */\n\t\tint s = smaller >> 1; // Divide by 2\n\t\tint side1 = minProduct(s, bigger, memo); // Compute half\n\t\tint side2 = side1;\n\t\tif (smaller % 2 == 1) {\n\t\t\tcounter++;\n\t\t\tside2 = minProduct(smaller - s, bigger, memo);\n\t\t}\n\t\t\n\t\t/* Sum and cache.*/\n\t\tcounter++;\n\t\tmemo[smaller] = side1 + side2; \n\t\treturn memo[smaller];\n\t}\n\t\n\tpublic static int minProduct(int a, int b) {\n\t\tint bigger = a < b ? b : a;\n\t\tint smaller = a < b ? a : b;\n\t\t\n\t\tint memo[] = new int[sum(smaller, 1)];\n\t\treturn minProduct(smaller, bigger, memo);\n\t}\n\t\n\tpublic static void main(String[] args) {\n\t\tint a = 13494;\n\t\tint b = 22323;\n\t\tint product = a * b;\n\t\tint minProduct = minProduct(a, b);\n\t\tif (product == minProduct) {\n\t\t\tSystem.out.println(\"Success: \" + a + \" * \" + b + \" = \" + product);\n\t\t} else {\n\t\t\tSystem.out.println(\"Failure: \" + a + \" * \" + b + \" = \" + product + \" instead of \" + minProduct);\n\t\t}\n\t\tSystem.out.println(\"Adds: \" + counter);\n\t}\n\n}\n","Chapter":"Ch 08. Recursion and Dynamic Programming"}