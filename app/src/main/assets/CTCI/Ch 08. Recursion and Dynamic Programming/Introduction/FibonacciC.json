{"Id":"941ffca8-3b29-4da1-b0ab-839b06316f45","Topic":"Ch 08. Recursion and Dynamic Programming","Question":"","Solution":"package Introduction;\r\n\r\npublic class FibonacciC {\r\n\t\r\n\tpublic static int fibonacci(int n) {\r\n\t\tif (n == 0) return 0;\r\n\t\telse if (n == 1) return 1;\r\n\t\t\r\n\t\tint[] memo = new int[n];\r\n\t\tmemo[0] = 0;\r\n\t\tmemo[1] = 1;\r\n\t\tfor (int i = 2; i < n; i++) {\r\n\t\t\tmemo[i] = memo[i - 1] + memo[i - 2];\r\n\t\t}\r\n\t\treturn memo[n - 1] + memo[n - 2];\r\n\t}\r\n\t\r\n\t/**\r\n\t * @param args\r\n\t */\r\n\tpublic static void main(String[] args) {\r\n\t\tint max = 100; // Make this as big as you want! (Though you'll exceed the bounds of a long around 46)\r\n\t\tint trials = 10; // Run code multiple times to compute average time.\r\n\t\tdouble[] times = new double[max]; // Store times\r\n\t\t\r\n\t\tfor (int j = 0; j < trials; j++) { // Run this 10 times to compute\r\n\t\t\tfor (int i = 0; i < max; i++) {\r\n\t\t\t\tlong start = System.currentTimeMillis();\r\n\t\t\t\tSystem.out.println(fibonacci(i));\r\n\t\t\t\tlong end = System.currentTimeMillis();\r\n\t\t\t\tlong time = end - start;\r\n\t\t\t\ttimes[i] += time; \r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tfor (int j = 0; j < max; j++) {\r\n\t\t\t//System.out.println(j + \": \" + times[j] / trials + \"ms\");\r\n\t\t}\r\n\t}\r\n\r\n}\r\n","Chapter":"Ch 08. Recursion and Dynamic Programming"}