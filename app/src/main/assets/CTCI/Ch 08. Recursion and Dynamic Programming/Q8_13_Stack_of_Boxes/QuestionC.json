{"Id":"428e5ced-e3bc-49d3-954c-79f5e76e3403","Topic":"Ch 08. Recursion and Dynamic Programming","Question":"","Solution":"package Q8_13_Stack_of_Boxes;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.Collections;\r\n\r\npublic class QuestionC {\t\r\n\tpublic static int createStack(ArrayList<Box> boxes) {\r\n\t\tCollections.sort(boxes, new BoxComparator());\r\n\t\tint[] stackMap = new int[boxes.size()];\r\n\t\treturn createStack(boxes, null, 0, stackMap);\r\n\t}\r\n\t\r\n\tpublic static int createStack(ArrayList<Box> boxes, Box bottom, int offset, int[] stackMap) {\r\n\t\tif (offset >= boxes.size()) {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t\t\r\n\t\t/* height with this bottom */\r\n\t\tBox newBottom = boxes.get(offset);\r\n\t\tint heightWithBottom = 0;\r\n\t\tif (bottom == null || newBottom.canBeAbove(bottom)) {\r\n\t\t\tif (stackMap[offset] == 0) {\r\n\t\t\t\tstackMap[offset] = createStack(boxes, newBottom, offset + 1, stackMap);\r\n\t\t\t\tstackMap[offset] += newBottom.height;\r\n\t\t\t}\r\n\t\t\theightWithBottom = stackMap[offset];\r\n\t\t}\r\n\t\t\r\n\t\t/* without this bottom */\r\n\t\tint heightWithoutBottom = createStack(boxes, bottom, offset + 1, stackMap);\r\n\t\t\r\n\t\treturn Math.max(heightWithBottom, heightWithoutBottom);\r\n\t}\r\n\t\t\r\n\t\r\n\tpublic static void main(String[] args) {\r\n\t\tBox[] boxList = { new Box(6, 4, 4), new Box(8, 6, 2), new Box(5, 3, 3), new Box(7, 8, 3), new Box(4, 2, 2), new Box(9, 7, 3)};\r\n\t\tArrayList<Box> boxes = new ArrayList<Box>();\r\n\t\tfor (Box b : boxList) {\r\n\t\t\tboxes.add(b);\r\n\t\t}\r\n\t\t\r\n\t\tint height = createStack(boxes);\r\n\t\tSystem.out.println(height);\r\n\t}\r\n\r\n}\r\n","Chapter":"Ch 08. Recursion and Dynamic Programming"}