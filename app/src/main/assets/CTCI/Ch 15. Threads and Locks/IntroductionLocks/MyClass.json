{"Id":"017fa28f-8049-4854-a0f7-7f6e29c596af","Topic":"Ch 15. Threads and Locks","Question":"","Solution":"package IntroductionLocks;\r\n\r\nimport java.util.concurrent.locks.Lock;\r\nimport java.util.concurrent.locks.ReentrantLock;\r\n\r\nimport CtCILibrary.AssortedMethods;\r\n\r\npublic class MyClass extends Thread  {\r\n\tprivate NoLockATM noLockATM;\r\n\tprivate LockedATM lockedATM;\r\n\tpublic int delta = 0;\r\n\t\r\n\tprivate Lock completionLock;\r\n\t\r\n\tpublic MyClass(NoLockATM atm1, LockedATM atm2) {\r\n\t\tnoLockATM = atm1;\r\n\t\tlockedATM = atm2;\r\n\t\tcompletionLock = new ReentrantLock();\r\n\t}\r\n\t\r\n\tpublic void run() {\r\n\t\tcompletionLock.lock();\r\n\t\tint[] operations = AssortedMethods.randomArray(20, -50, 50);\r\n\t\tfor (int op : operations) {\r\n\t\t\tdelta += op;\r\n\t\t\tif (op < 0) {\r\n\t\t\t\tint val = op * -1;\r\n\t\t\t\tnoLockATM.withdraw(val);\r\n\t\t\t\tlockedATM.withdraw(val);\r\n\t\t\t} else {\r\n\t\t\t\tnoLockATM.deposit(op);\r\n\t\t\t\tlockedATM.deposit(op);\t\t\t\t\r\n\t\t\t}\r\n\t\t}\r\n\t\tcompletionLock.unlock();\r\n\t}\r\n\t\r\n\tpublic void waitUntilDone() {\r\n\t\tcompletionLock.lock();\r\n\t\tcompletionLock.unlock();\r\n\t}\r\n}\r\n","Chapter":"Ch 15. Threads and Locks"}