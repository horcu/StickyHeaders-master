{"Id":"ce51b0f8-35a0-4611-b6cd-5a04b2ee2c1d","Topic":"Ch 02. Linked Lists","Question":"","Solution":"package Q2_07_Intersection;\n\nimport CtCILibrary.AssortedMethods;\nimport CtCILibrary.LinkedListNode;\n\npublic class Question {\n\n\tpublic static class Result {\n\t\tpublic LinkedListNode tail;\n\t\tpublic int size;\n\t\tpublic Result(LinkedListNode tail, int size) {\n\t\t\tthis.tail = tail;\n\t\t\tthis.size = size;\n\t\t}\n\t}\n\t\n\tpublic static Result getTailAndSize(LinkedListNode list) {\n\t\tif (list == null) return null;\n\t\t\n\t\tint size = 1;\n\t\tLinkedListNode current = list;\n\t\twhile (current.next != null) {\n\t\t\tsize++;\n\t\t\tcurrent = current.next;\n\t\t}\n\t\treturn new Result(current, size);\n\t}\n\t\n\tpublic static LinkedListNode getKthNode(LinkedListNode head, int k) {\n\t\tLinkedListNode current = head;\n\t\twhile (k > 0 && current != null) {\n\t\t\tcurrent = current.next;\n\t\t\tk--;\n\t\t}\n\t\treturn current;\n\t}\n\t\n\tpublic static LinkedListNode findIntersection(LinkedListNode list1, LinkedListNode list2) {\n\t\tif (list1 == null || list2 == null) return null;\n\t\t\n\t\t/* Get tail and sizes. */\n\t\tResult result1 = getTailAndSize(list1);\n\t\tResult result2 = getTailAndSize(list2);\n\t\t\n\t\t/* If different tail nodes, then there's no intersection. */\n\t\tif (result1.tail != result2.tail) {\n\t\t\treturn null;\n\t\t}\n\t\t\n\t\t/* Set pointers to the start of each linked list. */\n\t\tLinkedListNode shorter = result1.size < result2.size ? list1 : list2;\n\t\tLinkedListNode longer = result1.size < result2.size ? list2 : list1;\n\t\t\n\t\t/* Advance the pointer for the longer linked list by the difference in lengths. */\n\t\tlonger = getKthNode(longer, Math.abs(result1.size - result2.size));\n\t\t\n\t\t/* Move both pointers until you have a collision. */\n\t\twhile (shorter != longer) {\n\t\t\tshorter = shorter.next;\n\t\t\tlonger = longer.next;\n\t\t}\n\t\t\n\t\t/* Return either one. */\n\t\treturn longer; \n\t}\n\t\n\tpublic static void main(String[] args) {\n\t\t/* Create linked list */\n\t\tint[] vals = {-1, -2, 0, 1, 2, 3, 4, 5, 6, 7, 8};\n\t\tLinkedListNode list1 = AssortedMethods.createLinkedListFromArray(vals);\n\t\t\n\t\tint[] vals2 = {12, 14, 15};\n\t\tLinkedListNode list2 = AssortedMethods.createLinkedListFromArray(vals2);\n\t\t\n\t\tlist2.next.next = list1.next.next.next.next;\n\t\t\n\t\tSystem.out.println(list1.printForward());\n\t\tSystem.out.println(list2.printForward());\n\t\t\n\t\t\n\t\tLinkedListNode intersection = findIntersection(list1, list2);\n\t\t\n\t\tSystem.out.println(intersection.printForward());\n\t}\n\n}\n","Chapter":"Ch 02. Linked Lists"}