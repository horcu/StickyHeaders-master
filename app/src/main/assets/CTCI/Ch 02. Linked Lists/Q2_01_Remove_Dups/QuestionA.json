{"Id":"373cc569-033d-4658-aeac-977e8c175df1","Topic":"Ch 02. Linked Lists","Question":"","Solution":"package Q2_01_Remove_Dups;\r\n\r\nimport java.util.HashSet;\r\nimport CtCILibrary.LinkedListNode;\r\n\r\npublic class QuestionA {\r\n\tpublic static void deleteDups(LinkedListNode n) {\r\n\t\tHashSet<Integer> set = new HashSet<Integer>();\r\n\t\tLinkedListNode previous = null;\r\n\t\twhile (n != null) {\r\n\t\t\tif (set.contains(n.data)) {\r\n\t\t\t\tprevious.next = n.next;\r\n\t\t\t} else {\r\n\t\t\t\tset.add(n.data);\r\n\t\t\t\tprevious = n;\r\n\t\t\t}\r\n\t\t\tn = n.next;\r\n\t\t}\r\n\t}\r\n\t\r\n\tpublic static void main(String[] args) {\t\r\n\t\tLinkedListNode first = new LinkedListNode(0, null, null); //AssortedMethods.randomLinkedList(1000, 0, 2);\r\n\t\tLinkedListNode head = first;\r\n\t\tLinkedListNode second = first;\r\n\t\tfor (int i = 1; i < 8; i++) {\r\n\t\t\tsecond = new LinkedListNode(i % 2, null, null);\r\n\t\t\tfirst.setNext(second);\r\n\t\t\tsecond.setPrevious(first);\r\n\t\t\tfirst = second;\r\n\t\t}\r\n\t\tSystem.out.println(head.printForward());\r\n\t\tdeleteDups(head);\r\n\t\tSystem.out.println(head.printForward());\r\n\t}\r\n}\r\n","Chapter":"Ch 02. Linked Lists"}