{"Id":"6dca88c9-55ce-4214-a2f4-5fb8cae6811e","Topic":"Ch 02. Linked Lists","Question":"","Solution":"package Q2_06_Palindrome;\r\n\r\nimport CtCILibrary.LinkedListNode;\r\n\r\npublic class QuestionC {\r\n\tpublic static class Result {\r\n\t\tpublic LinkedListNode node;\r\n\t\tpublic boolean result;\r\n\t\tpublic Result(LinkedListNode n, boolean res) {\r\n\t\t\tnode = n;\r\n\t\t\tresult = res;\r\n\t\t}\r\n\t}\r\n\r\n\tpublic static Result isPalindromeRecurse(LinkedListNode head, int length) {\r\n\t\tif (head == null || length <= 0) { // Even number of nodes\r\n\t\t\treturn new Result(head, true);\r\n\t\t} else if (length == 1) { // Odd number of nodes\r\n\t\t\treturn new Result(head.next, true);\r\n\t\t} \r\n\t\t\r\n\t\t/* Recurse on sublist. */\r\n\t\tResult res = isPalindromeRecurse(head.next, length - 2);\r\n\t\t\r\n\t\t/* If child calls are not a palindrome, pass back up \r\n\t\t * a failure. */\r\n\t\tif (!res.result || res.node == null) {\r\n\t\t\treturn res;\r\n\t\t} \r\n\t\t\r\n\t\t/* Check if matches corresponding node on other side. */\r\n\t\tres.result = (head.data == res.node.data); \r\n\t\t\r\n\t\t/* Return corresponding node. */\r\n\t\tres.node = res.node.next;\r\n\t\t\r\n\t\treturn res;\r\n\t}\r\n\t\r\n\tpublic static int lengthOfList(LinkedListNode n) {\r\n\t\tint size = 0;\r\n\t\twhile (n != null) {\r\n\t\t\tsize++;\r\n\t\t\tn = n.next;\r\n\t\t}\r\n\t\treturn size;\r\n\t}\r\n\t\r\n\tpublic static boolean isPalindrome(LinkedListNode head) {\r\n\t\tint length = lengthOfList(head);\r\n\t\tResult p = isPalindromeRecurse(head, length);\r\n\t\treturn p.result;\r\n\t}\r\n\t\r\n\tpublic static void main(String[] args) {\r\n\t\tint length = 9;\r\n\t\tLinkedListNode[] nodes = new LinkedListNode[length];\r\n\t\tfor (int i = 0; i < length; i++) {\r\n\t\t\tnodes[i] = new LinkedListNode(i >= length / 2 ? length - i - 1 : i, null, null);\r\n\t\t}\r\n\t\t\r\n\t\tfor (int i = 0; i < length; i++) {\r\n\t\t\tif (i < length - 1) {\r\n\t\t\t\tnodes[i].setNext(nodes[i + 1]);\r\n\t\t\t}\r\n\t\t\tif (i > 0) {\r\n\t\t\t\tnodes[i].setPrevious(nodes[i - 1]);\r\n\t\t\t}\r\n\t\t}\r\n\t\t//nodes[length - 2].data = 9; // Uncomment to ruin palindrome\r\n\t\t\r\n\t\tLinkedListNode head = nodes[0];\r\n\t\tSystem.out.println(head.printForward());\r\n\t\tSystem.out.println(isPalindrome(head));\r\n\t}\r\n\r\n}\r\n","Chapter":"Ch 02. Linked Lists"}