{"Id":"7de6e7e4-f729-4d70-8765-4bb052afaadb","Topic":"Ch 02. Linked Lists","Question":"","Solution":"package Q2_06_Palindrome;\r\n\r\nimport CtCILibrary.LinkedListNode;\r\n\r\nimport java.util.Stack;\r\n\r\npublic class QuestionB {\r\n\tpublic static boolean isPalindrome(LinkedListNode head) {\r\n\t\tLinkedListNode fast = head;\r\n\t\tLinkedListNode slow = head;\r\n\t\t\r\n\t\tStack<Integer> stack = new Stack<Integer>();\r\n\t\t\r\n\t\twhile (fast != null && fast.next != null) {\r\n\t\t\tstack.push(slow.data);\r\n\t\t\tslow = slow.next;\r\n\t\t\tfast = fast.next.next;\t\t\t\r\n\t\t}\r\n\t\t\r\n\t\t/* Has odd number of elements, so skip the middle */\r\n\t\tif (fast != null) { \r\n\t\t\tslow = slow.next;\r\n\t\t}\r\n\t\t\r\n\t\twhile (slow != null) {\r\n\t\t\tint top = stack.pop().intValue();\r\n\t\t\tif (top != slow.data) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\tslow = slow.next;\r\n\t\t}\r\n\t\treturn true;\r\n\t}\r\n\t\r\n\tpublic static void main(String[] args) {\r\n\t\tint length = 9;\r\n\t\tLinkedListNode[] nodes = new LinkedListNode[length];\r\n\t\tfor (int i = 0; i < length; i++) {\r\n\t\t\tnodes[i] = new LinkedListNode(i >= length / 2 ? length - i - 1 : i, null, null);\r\n\t\t}\r\n\t\t\r\n\t\tfor (int i = 0; i < length; i++) {\r\n\t\t\tif (i < length - 1) {\r\n\t\t\t\tnodes[i].setNext(nodes[i + 1]);\r\n\t\t\t}\r\n\t\t\tif (i > 0) {\r\n\t\t\t\tnodes[i].setPrevious(nodes[i - 1]);\r\n\t\t\t}\r\n\t\t}\r\n\t\t//nodes[length - 2].data = 9; // Uncomment to ruin palindrome\r\n\t\t\r\n\t\tLinkedListNode head = nodes[0];\r\n\t\tSystem.out.println(head.printForward());\r\n\t\tSystem.out.println(isPalindrome(head));\r\n\t}\r\n\r\n}\r\n","Chapter":"Ch 02. Linked Lists"}