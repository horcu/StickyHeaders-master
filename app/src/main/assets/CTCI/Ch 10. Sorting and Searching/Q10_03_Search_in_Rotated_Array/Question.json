{"Id":"2d5cc2d9-8297-4e7d-aea5-2a22edb792a2","Topic":"Ch 10. Sorting and Searching","Question":"","Solution":"package Q10_03_Search_in_Rotated_Array;\r\n\r\npublic class Question {\r\n\t\r\n\tpublic static int search(int a[], int x) {\r\n\t\treturn search(a, 0, a.length - 1, x);\r\n\t}\r\n\r\n\t\r\n\tpublic static int search(int a[], int left, int right, int x) {\r\n\t\tint mid = (left + right) / 2;\r\n\t\tif (x == a[mid]) { // Found element\r\n\t\t\treturn mid;\r\n\t\t}\r\n\t\tif (right < left) {\r\n\t\t\treturn -1;\r\n\t\t}\r\n\t\t\r\n\t\t/* While there may be an inflection point due to the rotation, either the left or \r\n\t\t * right half must be normally ordered.  We can look at the normally ordered half\r\n\t\t * to make a determination as to which half we should search. \r\n\t\t */\r\n\t\tif (a[left] < a[mid]) { // Left is normally ordered.\r\n\t\t\tif (x >= a[left] && x < a[mid]) { \r\n\t\t\t\treturn search(a, left, mid - 1, x);\r\n\t\t\t} else {\r\n\t\t\t\treturn search(a, mid + 1, right, x);\r\n\t\t\t}\r\n\t\t} else if (a[mid] < a[left]) { // Right is normally ordered.\r\n\t\t\tif (x > a[mid] && x <= a[right]) {\r\n\t\t\t\treturn search(a, mid + 1, right, x);\r\n\t\t\t} else {\r\n\t\t\t\treturn search(a, left, mid - 1, x);\r\n\t\t\t}\t\t\t\t\r\n\t\t} else if (a[left] == a[mid]) { // Left is either all repeats OR loops around (with the right half being all dups)\r\n\t\t\tif (a[mid] != a[right]) { // If right half is different, search there\r\n\t\t\t\treturn search(a, mid + 1, right, x);\r\n\t\t\t} else { // Else, we have to search both halves\r\n\t\t\t\tint result = search(a, left, mid - 1, x); \r\n\t\t\t\tif (result == -1) {\r\n\t\t\t\t\treturn search(a, mid + 1, right, x); \r\n\t\t\t\t} else {\r\n\t\t\t\t\treturn result;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn -1;\r\n\t}\r\n\r\n\tpublic static void main(String[] args) {\r\n\t\tint[] a = { 2, 3, 1, 2, 2, 2, 2, 2 , 2 , 2 };\r\n\r\n\t\tSystem.out.println(search(a, 2));\r\n\t\tSystem.out.println(search(a, 3));\r\n\t\tSystem.out.println(search(a, 4));\r\n\t\tSystem.out.println(search(a, 1));\r\n\t\tSystem.out.println(search(a, 8));\r\n\t}\r\n\r\n}\r\n","Chapter":"Ch 10. Sorting and Searching"}