{"Id":"b796e4c8-e9f6-4b0b-bdda-0e5a7c0eddbd","Topic":"Ch 10. Sorting and Searching","Question":"","Solution":"package Introduction;\r\n\r\nimport CtCILibrary.AssortedMethods;\r\n\r\npublic class Quicksort {\r\n\tpublic static void swap(int[] array, int i, int j) {\r\n\t\tint tmp = array[i];\r\n\t\tarray[i] = array[j];\r\n\t\tarray[j] = tmp;\r\n\t}\r\n\t\r\n\tpublic static int partition(int[] arr, int left, int right) {\r\n\t\tint pivot = arr[(left + right) / 2]; // Pick a pivot point. Can be an element\t\t\r\n\t\t\r\n\t\twhile (left <= right) { // Until we've gone through the whole array\r\n\t\t\t// Find element on left that should be on right\r\n\t\t\twhile (arr[left] < pivot) { \r\n\t\t\t\tleft++;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t// Find element on right that should be on left\r\n\t\t\twhile (arr[right] > pivot) {\r\n\t\t\t\tright--;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t// Swap elements, and move left and right indices\r\n\t\t\tif (left <= right) {\r\n\t\t\t\tswap(arr, left, right);\r\n\t\t\t\tleft++;\r\n\t\t\t\tright--;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn left; \r\n\t}\r\n\t\r\n\tpublic static void quickSort(int[] arr, int left, int right) {\r\n\t\tint index = partition(arr, left, right); \r\n\t\tif (left < index - 1) { // Sort left half\r\n\t\t\tquickSort(arr, left, index - 1);\r\n\t\t}\r\n\t\tif (index < right) { // Sort right half\r\n\t\t\tquickSort(arr, index, right);\r\n\t\t}\r\n\t}\r\n\t\r\n\tpublic static void main(String[] args) {\r\n\t\tint[] arr = AssortedMethods.randomArray(20, 0, 6);\r\n\t\tAssortedMethods.printIntArray(arr);\t\r\n\t\tquickSort(arr, 0, arr.length - 1);\r\n\t\tAssortedMethods.printIntArray(arr);\r\n\t}\r\n\r\n}\r\n","Chapter":"Ch 10. Sorting and Searching"}