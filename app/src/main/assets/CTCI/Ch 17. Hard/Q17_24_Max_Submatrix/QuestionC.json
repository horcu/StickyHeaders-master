{"Id":"bc6cbad1-1b3f-4cf9-8f0d-0d3c78252b5a","Topic":"Ch 17. Hard","Question":"","Solution":"package Q17_24_Max_Submatrix;\r\n\r\nimport CtCILibrary.AssortedMethods;\r\n\r\npublic class QuestionC {\t\r\n\tpublic static SubMatrix getMaxMatrix(int[][] matrix) {\r\n\t\tint rowCount = matrix.length;\r\n\t\tint colCount = matrix[0].length;\r\n\t\r\n\t\tSubMatrix best = null;\r\n\t\r\n\t\tfor (int rowStart = 0; rowStart < rowCount; rowStart++) {\r\n\t\t\tint[] partialSum = new int[colCount];\r\n\t\t\r\n\t\t\tfor (int rowEnd = rowStart; rowEnd < rowCount; rowEnd++) {\r\n\t\t\t\t/* Add values at row rowEnd. */\r\n\t\t\t\tfor (int i = 0; i < colCount; i++) {\r\n\t\t\t\t\tpartialSum[i] += matrix[rowEnd][i];\r\n\t\t\t\t}\r\n\t\t\r\n\t\t\t\tRange bestRange = maxSubArray(partialSum, colCount);\r\n\t\t\t\tif (best == null || best.getSum() < bestRange.sum) {\r\n\t\t\t\t\tbest = new SubMatrix(rowStart, bestRange.start, rowEnd, bestRange.end, bestRange.sum);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn best;\r\n\t}\r\n\r\n\tpublic static Range maxSubArray(int[] array, int N) {\r\n\t\tRange best = null;\r\n\t\tint start = 0;\r\n\t\tint sum = 0;\r\n\r\n\t\tfor (int i = 0; i < N; i++) {\r\n\t\t\tsum += array[i];\r\n\t\t\tif (best == null || sum > best.sum) {\r\n\t\t\t\tbest = new Range(start, i, sum);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t/* If running_sum is < 0 no point in trying to continue the \r\n\t\t\t * series. Reset. */\r\n\t\t\tif (sum < 0) {\r\n\t\t\t\tstart = i + 1;\r\n\t\t\t\tsum = 0;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn best;\r\n\t}\r\n\t\r\n\tpublic static void main(String[] args) {\r\n\t\tint[][] matrix = AssortedMethods.randomMatrix(10, 10, -5, 5);\r\n\t\tAssortedMethods.printMatrix(matrix);\r\n\t\tSystem.out.println(getMaxMatrix(matrix));\r\n\t}\r\n\r\n}\r\n","Chapter":"Ch 17. Hard"}