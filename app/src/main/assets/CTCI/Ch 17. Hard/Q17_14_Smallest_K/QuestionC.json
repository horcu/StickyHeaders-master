{"Id":"3f4440c3-0828-411c-b442-9875080c6014","Topic":"Ch 17. Hard","Question":"","Solution":"package Q17_14_Smallest_K;\r\n\r\nimport java.util.Random;\r\n\r\nimport CtCILibrary.AssortedMethods;\r\n\r\npublic class QuestionC {\r\n\t\r\n\tpublic static int[] smallestK(int[] array, int k) {\r\n\t\tif (k <= 0 || k > array.length) {\r\n\t\t\tthrow new IllegalArgumentException();\r\n\t\t}\r\n\t\t\r\n\t\tint threshold = rank(array, k - 1);\r\n\t\tint[] smallest = new int[k];\r\n\t\tint count = 0;\r\n\t\tfor (int a : array) {\r\n\t\t\tif (a <= threshold) {\r\n\t\t\t\tsmallest[count] = a;\r\n\t\t\t\tcount++;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn smallest;\r\n\t}\r\n\t\r\n\t/* Get item with rank. */\r\n\tpublic static int rank(int[] array, int rank) {\r\n\t\treturn rank(array, 0, array.length - 1, rank);\r\n\t}\r\n\t\r\n\t/* Get element with rank between left and right indices. */\r\n\tpublic static int rank(int[] array, int left, int right, int rank) {\r\n\t\tint pivot = array[randomIntInRange(left, right)];\r\n\t\tint leftEnd = partition(array, left, right, pivot); // returns end of left partition\r\n\t\tint leftSize = leftEnd - left + 1;\r\n\t\tif (rank == leftSize - 1) {\r\n\t\t\treturn max(array, left, leftEnd);\r\n\t\t} else if (rank < leftSize) {\r\n\t\t\treturn rank(array, left, leftEnd, rank);\r\n\t\t} else {\r\n\t\t\treturn rank(array, leftEnd + 1, right, rank - leftSize);\r\n\t\t}\r\n\t}\r\n\t\r\n\t/* Partition array around pivot such that all elements <= pivot\r\n\t * come before all elements > pivot. */\r\n\tpublic static int partition(int[] array, int left, int right, int pivot) {\r\n\t\twhile (left <= right) {\r\n\t\t\tif (array[left] > pivot) {\r\n\t\t\t\t/* Left is bigger than pivot. Swap it to the right\r\n\t\t\t\t * side, where we know it should be. */\r\n\t\t\t\tswap(array, left, right);\r\n\t\t\t\tright--;\r\n\t\t\t} else if (array[right] <= pivot) {\r\n\t\t\t\t/* Right is smaller than the pivot. Swap it to theÂ \r\n\t\t\t\t * left side, where we know it should be. */\r\n\t\t\t\tswap(array, left, right);\r\n\t\t\t\tleft++;\r\n\t\t\t} else {\r\n\t\t\t\t/* Left and right are in correct places. Expand both\r\n\t\t\t\t * sides. */\r\n\t\t\t\tleft++;\r\n\t\t\t\tright--;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn left - 1;\r\n\t} \r\n\t\r\n\t/* Get random integer within range, inclusive. */\r\n\tpublic static int randomIntInRange(int min, int max) {\r\n\t\tRandom rand = new Random();\r\n\t\treturn rand.nextInt(max + 1 - min) + min;\r\n\t}\t\r\n\t\r\n\t/* Swap values at index i and j. */\r\n\tpublic static void swap(int[] array, int i, int j) {\r\n\t\tint t = array[i];\r\n\t\tarray[i] = array[j];\r\n\t\tarray[j] = t;\r\n\t}\r\n\t\r\n\t/* Get largest element in array between left and right indices. */\r\n\tpublic static int max(int[] array, int left, int right) {\r\n\t\tint max = Integer.MIN_VALUE;\r\n\t\tfor (int i = left; i <= right; i++) {\r\n\t\t\tmax = Math.max(array[i], max);\r\n\t\t}\r\n\t\treturn max;\r\n\t}\r\n\r\n\tpublic static void main(String[] args) {\r\n\t\tint[] array = {1, 5, 2, 9, -1, 11, 6, 13, 15};\r\n\t\tint[] smallest = smallestK(array, 3);\r\n\t\tSystem.out.println(AssortedMethods.arrayToString(smallest));\r\n\t}\r\n\r\n}\r\n","Chapter":"Ch 17. Hard"}