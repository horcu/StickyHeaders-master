{"Id":"92c6f4fb-892f-4200-be1e-62486bf37922","Topic":"Ch 17. Hard","Question":"","Solution":"package Q17_05_Letters_and_Numbers;\n\nimport java.util.HashMap;\n\n\npublic class QuestionB {\n\t/* Compute the difference between the number of letters and \n\t * numbers between the beginning of the array and each index. */\n\tpublic static int[] computeDeltaArray(char[] array) {\n\t\tint[] deltas = new int[array.length];\n\t\tint delta = 0;\n\t\tfor (int i = 0; i < array.length; i++) {\n\t\t\tif (Character.isLetter(array[i])) {\n\t\t\t\tdelta++;\n\t\t\t} else if (Character.isDigit(array[i])) {\n\t\t\t\tdelta--;\n\t\t\t}\n\t\t\tdeltas[i] = delta;\n\t\t}\n\t\treturn deltas;\n\t}\n\t\n\t/* Find the matching pair of values in the deltas array with the \n\t * largest difference in indices. */ \t\n\tpublic static int[] findLongestMatch(int[] deltas) {\n\t\tHashMap<Integer, Integer> map = new HashMap<Integer, Integer>();\n\t\tmap.put(0,  -1);\n\t\tint[] max = new int[2];\n\t\tfor (int i = 0; i < deltas.length; i++) {\n\t\t\tif (!map.containsKey(deltas[i])) {\n\t\t\t\tmap.put(deltas[i],  i);\n\t\t\t} else {\n\t\t\t\tint match = map.get(deltas[i]);\n\t\t\t\tint distance = i - match;\n\t\t\t\tint longest = max[1] - max[0];\n\t\t\t\tif (distance > longest) {\n\t\t\t\t\tmax[1] = i;\n\t\t\t\t\tmax[0] = match;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn max;\n\t}\n\t\n\tpublic static char[] extract(char[] array, int start, int end) {\n\t\tif (start > end) return null;\n\t\tchar[] subarray = new char[end - start + 1];\n\t\tfor (int i = start; i <= end; i++) {\n\t\t\tsubarray[i - start] = array[i];\n\t\t}\n\t\treturn subarray;\n\t}\n\n\tpublic static char[] findLongestSubarray(char[] array) {\n\t\t/* Compute deltas betw count of numbers and count of letters. */\n\t\tint[] deltas = computeDeltaArray(array);\n\n\t\t/* Find pair in deltas with matching values and largest span. */\n\t\tint[] match = findLongestMatch(deltas);\n\n\t\t/* Return the subarray. Note that it starts one *after* the \n\t\t * initial occurence of this delta. */\n\t\treturn extract(array, match[0] + 1, match[1]);\n\t}\n\t\n\tpublic static boolean isEqual(char[] array, int start, int end) {\n\t\tint counter = 0;\n\t\tfor (int i = start; i < end; i++) {\n\t\t\tif (Character.isLetter(array[i])) {\n\t\t\t\tcounter++;\n\t\t\t} else if (Character.isDigit(array[i])) {\n\t\t\t\tcounter--;\n\t\t\t}\n\t\t}\n\t\treturn counter == 0;\n\t}\n\t\n\tpublic static void main(String[] args) {\n\t\tchar b = '1';\n\t\tchar a = 'a';\n\t\tchar[] array = {a, b, a, b, a, b, b, b, b, b, a, a, a, a, a, b, a, b, a, b, b, a, a, a, a, a, a, a};\n\t\tfor (int i = 0; i < array.length; i++) {\n\t\t\tSystem.out.print(array[i] + \" \");\n\t\t}\n\t\tSystem.out.println();\n\t\tchar[] max = findLongestSubarray(array);\n\t\tif (max == null) {\n\t\t\tSystem.out.println(\"No equal subarray\");\n\t\t} else {\n\t\t\tSystem.out.println(max.length);\n\t\t\tfor (int i = 0; i < max.length; i++) {\n\t\t\t\tSystem.out.print(max[i] + \" \");\n\t\t\t}\n\t\n\t\t\tSystem.out.println(\"\\nIs Valid? \" + isEqual(max, 0, max.length));\n\t\t}\n\t}\n\n}\n","Chapter":"Ch 17. Hard"}