{"Id":"c08bfee1-e67c-4022-849f-185a49d4a08c","Topic":"Ch 17. Hard","Question":"","Solution":"package Q17_18_Shortest_Supersequence;\n\npublic class QuestionC {\n\n\t/* Do backwards sweep and update the closures list with the next occurrence of value, if it's later than the current closure*/\n\tpublic static void sweepForClosure(int[] big, int[] closures, int value) {\n\t\tint next = -1;\n\t\tfor (int i = big.length - 1; i >= 0; i--) {\n\t\t\tif (big[i] == value) {\n\t\t\t\tnext = i;\n\t\t\t}\n\t\t\tif ((next == -1 || closures[i] < next) && (closures[i] != -1)) {\n\t\t\t\tclosures[i] = next;\n\t\t\t}\n\t\t}\n\t}\n\t\n\t/* Get closure for each index. */\n\tpublic static int[] getClosures(int[] big, int[] small) {\n\t\tint[] closure = new int[big.length];\n\t\tfor (int i = 0; i < small.length; i++) {\n\t\t\tsweepForClosure(big, closure, small[i]);\n\t\t}\n\t\treturn closure;\n\t}\n\t\n\t/* Get shortest closure. */\n\tpublic static Range getShortestClosure(int[] closures) {\n\t\tRange shortest = new Range(0, closures[0]);\n\t\tfor (int i = 1; i < closures.length; i++) {\n\t\t\tif (closures[i] == -1) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tRange range = new Range(i, closures[i]);\n\t\t\tif (!shortest.shorterThan(range)) {\n\t\t\t\tshortest = range;\n\t\t\t}\n\t\t}\n\t\treturn shortest;\n\t}\n\t\n\tpublic static Range shortestSupersequence(int[] big, int[] small) {\n\t\tint[] closures = getClosures(big, small);\n\t\treturn getShortestClosure(closures);\n\t}\n\t\n\tpublic static void main(String[] args) {\n\t\tint[] array = {7, 5, 9, 0, 2, 1, 3, 5, 7, 9, 1, 1, 5, 8, 9, 7};\n\t\tint[] set = {1, 5, 9};\n\t\tSystem.out.println(array.length);\n\t\tRange shortest = shortestSupersequence(array, set);\n\t\tSystem.out.println(shortest.getStart() + \", \" + shortest.getEnd());\n\n\t}\n\n}\n","Chapter":"Ch 17. Hard"}