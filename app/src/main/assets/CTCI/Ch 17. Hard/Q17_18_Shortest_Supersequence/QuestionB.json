{"Id":"5e320bf4-5760-46d3-9cc3-ba99331aab91","Topic":"Ch 17. Hard","Question":"","Solution":"package Q17_18_Shortest_Supersequence;\n\npublic class QuestionB {\n\n\t/* Do backwards sweep to get a list of the next occurrence of value from each index. */\n\tpublic static int[] getNextElement(int[] bigArray, int value) {\n\t\tint next = -1;\n\t\tint[] nexts = new int[bigArray.length];\n\t\tfor (int i = bigArray.length - 1; i >= 0; i--) {\n\t\t\tif (bigArray[i] == value) {\n\t\t\t\tnext = i;\n\t\t\t}\n\t\t\tnexts[i] = next;\n\t\t}\n\t\treturn nexts;\n\t}\n\t\n\t/* Create table of next occurrences. */ \n\tpublic static int[][] getNextElementsMulti(int[] big, int[] small) {\n\t\tint[][] nextElements = new int[small.length][big.length];\n\t\tfor (int i = 0; i < small.length; i++) {\n\t\t\tnextElements[i] = getNextElement(big, small[i]);\n\t\t}\n\t\treturn nextElements;\n\t}\n\t\n\t/* Given an index and the table of next elements, find the closure\n\t * for this index (which will be the min of this column. */\n\tpublic static int getClosureForIndex(int[][] nextElements, int index) {\n\t\tint max = -1;\n\t\tfor (int i = 0; i < nextElements.length; i++) {\n\t\t\tif (nextElements[i][index] == -1) {\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t\tmax = Math.max(max, nextElements[i][index]);\n\t\t}\n\t\treturn max;\n\t}\n\t\n\t/* Get closure for each index. */\n\tpublic static int[] getClosures(int[][] nextElements) {\n\t\tint[] maxNextElement = new int[nextElements[0].length];\n\t\tfor (int i = 0; i < nextElements[0].length; i++) {\n\t\t\tmaxNextElement[i] = getClosureForIndex(nextElements, i);\n\t\t}\n\t\treturn maxNextElement;\n\t}\n\t\n\t/* Get shortest closure. */\n\tpublic static Range getShortestClosure(int[] closures) {\n\t\tint bestStart = -1;\n\t\tint bestEnd = -1;\n\t\tfor (int i = 0; i < closures.length; i++) {\n\t\t\tif (closures[i] == -1) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tint current = closures[i] - i;\n\t\t\tif (bestStart == -1 || current < bestEnd - bestStart) {\n\t\t\t\tbestStart = i;\n\t\t\t\tbestEnd = closures[i];\n\t\t\t}\n\t\t}\n\t\treturn new Range(bestStart, bestEnd);\n\t}\n\t\n\tpublic static Range shortestSupersequence(int[] big, int[] small) {\n\t\tint[][] nextElements = getNextElementsMulti(big, small);\n\t\tint[] closures = getClosures(nextElements);\n\t\treturn getShortestClosure(closures);\n\t}\n\t\n\tpublic static void main(String[] args) {\n\t\tint[] array = {9, 5, 1, 0, 2, 1, 3, 5, 7, 9, 1, 1, 5, 8, 9, 7};\n\t\tint[] set = {1, 5, 9};\n\t\tSystem.out.println(array.length);\n\t\tRange shortest = shortestSupersequence(array, set);\n\t\tSystem.out.println(shortest.getStart() + \", \" + shortest.getEnd());\n\n\t}\n\n}\n","Chapter":"Ch 17. Hard"}