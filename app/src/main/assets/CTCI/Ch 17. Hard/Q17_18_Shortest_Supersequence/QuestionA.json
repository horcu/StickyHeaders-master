{"Id":"f93a55ed-2893-44da-8dc3-dbac485a4ce1","Topic":"Ch 17. Hard","Question":"","Solution":"package Q17_18_Shortest_Supersequence;\n\npublic class QuestionA {\n\t/* Find next instance of element starting from index. */\n\tpublic static int findNextInstance(int[] array, int element, int index) {\n\t\tfor (int i = index; i < array.length; i++) {\n\t\t\tif (array[i] == element) {\n\t\t\t\treturn i;\n\t\t\t}\n\t\t}\n\t\treturn -1;\n\t}\n\t\n\t/* Given an index, find the closure (i.e., the element which terminates a complete\n\t * subarray containing all elements in smallArray). This will be the max of the\n\t * next locations of each element in smallArray. */\n\tpublic static int findClosure(int[] bigArray, int[] smallArray, int index) {\n\t\tint max = -1;\n\t\tfor (int i = 0; i < smallArray.length; i++) {\n\t\t\tint next = findNextInstance(bigArray, smallArray[i], index);\n\t\t\tif (next == -1) {\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t\tmax = Math.max(next,  max);\n\t\t}\n\t\treturn max;\n\t}\n\t\n\tpublic static Range shortestSupersequence(int[] bigArray, int[] smallArray) {\n\t\tint bestStart = -1;\n\t\tint bestEnd = -1;\n\t\tfor (int i = 0; i < bigArray.length; i++) {\n\t\t\tint end = findClosure(bigArray, smallArray, i);\n\t\t\tif (end == -1) break;\n\t\t\tif (bestStart == -1 || end - i < bestEnd - bestStart) {\n\t\t\t\tbestStart = i;\n\t\t\t\tbestEnd = end;\n\t\t\t}\n\t\t}\n\t\treturn new Range(bestStart, bestEnd);\n\t}\n\t\n\tpublic static void main(String[] args) {\n\t\tint[] array = {7, 5, 9, 0, 2, 1, 3, 5, 7, 9, 1, 1, 5, 8, 9, 7};\n\t\tint[] set = {1, 5, 9};\n\t\tSystem.out.println(array.length);\n\t\tRange shortest = shortestSupersequence(array, set);\n\t\tSystem.out.println(shortest.getStart() + \", \" + shortest.getEnd());\n\t}\n}\n","Chapter":"Ch 17. Hard"}