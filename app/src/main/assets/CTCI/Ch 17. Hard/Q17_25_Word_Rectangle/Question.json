{"Id":"8aa57d79-7b3f-434d-a6ec-e781bdfc332c","Topic":"Ch 17. Hard","Question":"","Solution":"package Q17_25_Word_Rectangle;\r\n\r\nimport java.util.ArrayList;\r\nimport CtCILibrary.AssortedMethods;\r\nimport CtCILibrary.Trie;\r\n\r\npublic class Question {\r\n\tprivate int maxWordLength;\r\n\tprivate WordGroup[] groupList ;\r\n\tprivate Trie trieList[];\r\n\r\n\tpublic Question(String[] list) {\r\n\t\tgroupList = WordGroup.createWordGroups(list);\r\n\t\tmaxWordLength = groupList.length;\r\n\t\t// Initialize trieList to store trie of groupList[i] at ith position.\r\n\t\ttrieList = new Trie[maxWordLength];\r\n\t}\r\n\r\n\t/* This function finds a rectangle of letters of the largest \r\n\t * possible area (length x breadth) such that every row forms a \r\n\t * word (reading left to right) from the list and every column \r\n\t * forms a word (reading top to bottom) from the list. \r\n\t */\r\n\tpublic Rectangle maxRectangle() {\r\n\t\t// The dimensions of the largest possible rectangle.\r\n\t\tint maxSize = maxWordLength * maxWordLength; \r\n\r\n\t\tfor (int z = maxSize; z > 0; z--) {\r\n\t\t\t// Find out all pairs i,j less than maxWordLength \r\n\t\t\t// such that i * j = z\r\n\t\t\tfor (int i = 1; i <= maxWordLength; i ++ ) {\r\n\t\t\t\tif (z % i == 0) {\r\n\t\t\t\t\tint j = z / i;\r\n\t\t\t\t\tif (j <= maxWordLength) {\r\n\t\t\t\t\t\t// Check if a Rectangle of length i and height \r\n\t\t\t\t\t\t// j can be created. \r\n\t\t\t\t\t\tRectangle rectangle = makeRectangle(i,j);\r\n\t\t\t\t\t\tif (rectangle != null) {\r\n\t\t\t\t\t\t\treturn rectangle;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn null;\r\n\t}\r\n\r\n\t/* This function takes the length and height of a rectangle as\r\n\t * arguments. It tries to form a rectangle of the given length and \r\n\t * height using words of the specified length as its rows, in which \r\n\t * words whose length is the specified height form the columns. It \r\n\t * returns the rectangle so formed, and null if such a rectangle \r\n\t * cannot be formed.\r\n\t */\r\n\tprivate Rectangle makeRectangle(int length, int height) {\r\n\t\tif (groupList[length - 1] == null || groupList[height - 1] == null) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\t\tif (trieList[height - 1] == null) {\r\n\t\t\tArrayList<String> words = groupList[height - 1].getWords();\r\n\t\t\ttrieList[height - 1] = new Trie(words); \r\n\t\t}\r\n\t\treturn makePartialRectangle(length, height, new Rectangle(length));\r\n\t}\r\n\r\n\r\n\t/* This function recursively tries to form a rectangle with words\r\n\t * of length l from the dictionary as rows and words of length h\r\n\t * from the dictionary as columns. To do so, we start with an empty\r\n\t * rectangle and add in a word with length l as the first row. We\r\n\t * then check the trie of words of length h to see if each partial\r\n\t * column is a prefix of a word with length h. If so we branch\r\n\t * recursively and check the next word till we've formed a complete\r\n\t * rectangle. When we have a complete rectangle check if every\r\n\t * column is a word in the dictionary.\r\n\t */\r\n\tprivate Rectangle makePartialRectangle(int l, int h, Rectangle rectangle) {\r\n\r\n\t\t// Check if we have formed a complete rectangle by seeing if each column\r\n\t\t// is in the dictionary\r\n\t\tif (rectangle.height == h) {\r\n\t\t\tif (rectangle.isComplete(l, h, groupList[h - 1])) {\r\n\t\t\t\treturn rectangle;\r\n\t\t\t} else {\r\n\t\t\t\treturn null;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// If the rectangle is not empty, validate that each column is a\r\n\t\t// substring of a word of length h in the dictionary using the\r\n\t\t// trie of words of length h.\r\n\t\tif (!rectangle.isPartialOK(l, trieList[h - 1])) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\t\t\r\n\t\t// For each word of length l, try to make a new rectangle by adding\r\n\t\t// the word to the existing rectangle.\r\n\t\tfor (int i = 0; i < groupList[l-1].length(); i++) {\r\n\t\t\tRectangle orgPlus = rectangle.append(groupList[l-1].getWord(i));\r\n\t\t\tRectangle rect = makePartialRectangle(l, h, orgPlus);\r\n\t\t\tif (rect != null) {\r\n\t\t\t\treturn rect;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn null;\r\n\t}\r\n\r\n\t// Test harness.\r\n\tpublic static void main(String[] args) {\r\n\t\tQuestion dict = new Question(AssortedMethods.getListOfWords());\r\n\t\tRectangle rect = dict.maxRectangle();\r\n\t\tif (rect != null) {\r\n\t\t\trect.print();\r\n\t\t} else {\r\n\t\t\tSystem.out.println (\"No rectangle exists\");\r\n\t\t}\r\n\t}\r\n\r\n\r\n}\r\n\r\n","Chapter":"Ch 17. Hard"}