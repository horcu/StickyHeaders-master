{"Id":"f385203c-3a05-48d9-a3c3-a21af3e644a0","Topic":"Ch 17. Hard","Question":"","Solution":"package Q17_25_Word_Rectangle;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.HashMap;\r\n\r\n/* A container for a group of words of the same length. */\r\npublic class WordGroup {\r\n\tprivate HashMap<String, Boolean> lookup = new HashMap<String, Boolean>();\r\n    private ArrayList<String> group = new ArrayList<String>();\r\n    \r\n    public WordGroup() {\r\n\r\n    }\r\n    \r\n    public boolean containsWord(String s) {\r\n    \treturn lookup.containsKey(s);\r\n    }\r\n    \r\n    public void addWord (String s) {\r\n        group.add(s);\r\n        lookup.put(s, true);\r\n    }\r\n    \r\n    public int length() {\r\n        return group.size();\r\n    }\r\n    \r\n    public String getWord(int i) {\r\n        return group.get(i);\r\n    }\r\n    \r\n    public ArrayList<String> getWords(){ \r\n        return group;\r\n    }\r\n    \r\n    public static WordGroup[] createWordGroups(String[] list) {\r\n    \tWordGroup[] groupList;\r\n    \tint maxWordLength = 0;\r\n\t\t// Find out the length of the longest word\r\n\t\tfor (int i = 0; i < list.length; i++) {\r\n\t\t\tif (list[i].length() > maxWordLength) {\r\n\t\t\t\tmaxWordLength = list[i].length();\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t/* Group the words in the dictionary into lists of words of \r\n\t\t * same length.groupList[i] will contain a list of words, each \r\n\t\t * of length (i+1). */\r\n\t\tgroupList = new WordGroup[maxWordLength];\r\n\t\tfor (int i = 0; i < list.length; i++) {\r\n\t\t\t/* We do wordLength - 1 instead of just wordLength since this is used as\r\n\t\t\t * an index and no words are of length 0 */\r\n\t\t\tint wordLength = list[i].length() - 1; \r\n\t\t\tif (groupList[wordLength] == null) {\r\n\t\t\t\tgroupList[wordLength] = new WordGroup();\r\n\t\t\t}\r\n\t\t\tgroupList[wordLength].addWord(list[i]);\r\n\t\t}\r\n\t\treturn groupList;\r\n    }\r\n}\r\n","Chapter":"Ch 17. Hard"}