{"Id":"cddf2b5b-d356-40bc-bfbe-04f7eca7b769","Topic":"Ch 17. Hard","Question":"","Solution":"package Q17_20_Continuous_Median;\r\n\r\nimport java.util.Arrays;\r\nimport java.util.Comparator;\r\nimport java.util.PriorityQueue;\r\n\r\npublic class Question {\r\n\tprivate static Comparator<Integer> maxHeapComparator;\r\n\tprivate static Comparator<Integer> minHeapComparator;\r\n\tprivate static PriorityQueue<Integer> maxHeap;\r\n\tprivate static PriorityQueue<Integer> minHeap;\r\n\r\n\tpublic static void addNewNumber(int randomNumber) {\r\n\t\t/* Note: addNewNumber maintains a condition that maxHeap.size() >= minHeap.size() */\r\n\t\tif (maxHeap.size() == minHeap.size()) {\r\n\t\t\tif ((minHeap.peek() != null) && \r\n\t\t\t\t\trandomNumber > minHeap.peek()) {\r\n\t\t\t\tmaxHeap.offer(minHeap.poll());\r\n\t\t\t\tminHeap.offer(randomNumber);\r\n\t\t\t} else {\r\n\t\t\t\tmaxHeap.offer(randomNumber);\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\tif(randomNumber < maxHeap.peek()){\r\n\t\t\t\tminHeap.offer(maxHeap.poll());\r\n\t\t\t\tmaxHeap.offer(randomNumber);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tminHeap.offer(randomNumber);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tpublic static double getMedian() {\r\n\t\t/* maxHeap is always at least as big as minHeap. So if maxHeap is empty, then minHeap is also. */\t\t\r\n\t\tif (maxHeap.isEmpty()) {\r\n\t\t\treturn 0;\r\n\t\t} \r\n\t\tif (maxHeap.size() == minHeap.size()) {\r\n\t\t\treturn ((double)minHeap.peek() + (double) maxHeap.peek()) / 2;\r\n\t\t} else {\r\n\t\t\t/* If maxHeap and minHeap are of different sizes, then maxHeap must have one extra element. Return maxHeapï¿½s top element.*/\t\t\t\r\n\t\t\treturn maxHeap.peek();\r\n\t\t} \r\n\t}\r\n\r\n\tpublic static void addNewNumberAndPrintMedian(int randomNumber) {\r\n\t\taddNewNumber(randomNumber);\r\n\t\tSystem.out.println(\"Random Number = \" + randomNumber);\r\n\t\tprintMinHeapAndMaxHeap();\r\n\t\tSystem.out.println(\"\\nMedian = \" + getMedian() + \"\\n\");\r\n\t}\r\n\r\n\tpublic static void printMinHeapAndMaxHeap(){\r\n\t\tInteger[] minHeapArray = minHeap.toArray(\r\n\t\t\t\tnew Integer[minHeap.size()]);\r\n\t\tInteger[] maxHeapArray = maxHeap.toArray(\r\n\t\t\t\tnew Integer[maxHeap.size()]);\r\n\r\n\t\tArrays.sort(minHeapArray, maxHeapComparator);\r\n\t\tArrays.sort(maxHeapArray, maxHeapComparator);\r\n\t\tSystem.out.print(\"MinHeap =\");\r\n\t\tfor (int i = minHeapArray.length - 1; i >= 0 ; i--){\r\n\t\t\tSystem.out.print(\" \" + minHeapArray[i]);\r\n\t\t}\r\n\t\tSystem.out.print(\"\\nMaxHeap =\");\r\n\t\tfor (int i = 0; i < maxHeapArray.length; i++){\r\n\t\t\tSystem.out.print(\" \" + maxHeapArray[i]);\r\n\t\t}\r\n\t}\r\n\r\n\tpublic static void main(String[] args) {\r\n\t\tint arraySize = 10;\r\n\t\tint range = 7;\r\n\r\n\t\tmaxHeapComparator = new MaxHeapComparator();\r\n\t\tminHeapComparator = new MinHeapComparator();\r\n\t\tmaxHeap = new PriorityQueue<Integer>(arraySize - arraySize/2, maxHeapComparator);\r\n\t\tminHeap = new PriorityQueue<Integer>(arraySize/2, minHeapComparator);\r\n\t\t\r\n\t\tfor(int i = 0; i < arraySize; i++) {\r\n\t\t\tint randomNumber = (int) (Math.random( ) * (range+1));\r\n\t\t\taddNewNumberAndPrintMedian(randomNumber);\r\n\t\t}\r\n\t}\r\n\r\n}\r\n","Chapter":"Ch 17. Hard"}