{"Id":"23e52b5c-823a-4d99-b951-9be782637898","Topic":"Ch 17. Hard","Question":"","Solution":"package Q17_26_Sparse_Similarity;\n\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.HashMap;\nimport java.util.Map.Entry;\nimport java.util.Set;\n\nimport CtCILibrary.AssortedMethods;\nimport CtCILibrary.HashMapList;\n\npublic class QuestionB {\n\tpublic static HashMap<DocPair, Double> computeSimilarities(HashMap<Integer, Document> documents) {\n\t\tHashMapList<Integer, Integer> wordToDocs = groupWords(documents);\n\t\tHashMap<DocPair, Double> similarities = computeIntersections(wordToDocs);\n\t\tadjustToSimilarities(documents, similarities);\n\t\treturn similarities;\n\t}\t\n\t\n\t/* Create hash table from each word to where it appears. */\n\tpublic static HashMapList<Integer, Integer> groupWords(HashMap<Integer, Document> documents) {\n\t\tHashMapList<Integer, Integer> wordToDocs = new HashMapList<Integer, Integer>();\n\n\t\tfor (Document doc : documents.values()) {\n\t\t\tArrayList<Integer> words = doc.getWords();\n\t\t\tfor (int word : words) {\n\t\t\t\twordToDocs.put(word, doc.getId());\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn wordToDocs;\n\t}\n\t\n\t/* Compute intersections of documents. Iterate through each list of \n\t * documents and then each pair within that list, incrementing the \n\t * intersection of each page. */\n\tpublic static HashMap<DocPair, Double> computeIntersections(HashMapList<Integer, Integer> wordToDocs) {\n\t\tHashMap<DocPair, Double> similarities = new HashMap<DocPair, Double>();\n\t\tSet<Integer> words = wordToDocs.keySet();\n\t\tfor (int word : words) {\n\t\t\tArrayList<Integer> docs = wordToDocs.get(word);\n\t\t\tCollections.sort(docs);\n\t\t\tfor (int i = 0; i < docs.size(); i++) {\n\t\t\t\tfor (int j = i + 1; j < docs.size(); j++) {\n\t\t\t\t\tincrement(similarities, docs.get(i), docs.get(j));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn similarities;\n\t}\n\t\n\t/* Increment the intersection size of each document pair. */\n\tpublic static void increment(HashMap<DocPair, Double> similarities, int doc1, int doc2) {\n\t\tDocPair pair = new DocPair(doc1, doc2);\n\t\tif (!similarities.containsKey(pair)) {\n\t\t\tsimilarities.put(pair, 1.0);\n\t\t} else {\n\t\t\tsimilarities.put(pair, similarities.get(pair) + 1);\t\t\n\t\t}\n\t}\t\n\t\n\t/* Adjust the intersection value to become the similarity. */\n\tpublic static void adjustToSimilarities(HashMap<Integer, Document> documents, HashMap<DocPair, Double> similarities) {\n\t\tfor (Entry<DocPair, Double> entry : similarities.entrySet()) {\n\t\t\tDocPair pair = entry.getKey();\n\t\t\tDouble intersection = entry.getValue();\n\t\t\tDocument doc1 = documents.get(pair.doc1);\n\t\t\tDocument doc2 = documents.get(pair.doc2);\n\t\t\tdouble union = (double) doc1.size() + doc2.size() - intersection;\n\t\t\tentry.setValue(intersection / union);\n\t\t}\n\t}\n\t\n\tpublic static void main(String[] args) {\n\t\tint numDocuments = 10;\n\t\tint docSize = 5;\n\t\tHashMap<Integer, Document> documents = new HashMap<Integer, Document>();\n\t\tfor (int i = 0; i < numDocuments; i++) {\n\t\t\tint[] words = AssortedMethods.randomArray(docSize, 0, 10);\n\t\t\tArrayList<Integer> w = Tester.removeDups(words);\n\t\t\tSystem.out.println(i + \": \" + w.toString());\n\t\t\tDocument doc = new Document(i, w);\n\t\t\tdocuments.put(i, doc);\n\t\t}\n\t\t\n\t\tHashMap<DocPair, Double> similarities = computeSimilarities(documents);\n\t\tTester.printSim(similarities);\n\t}\n\n}\n","Chapter":"Ch 17. Hard"}