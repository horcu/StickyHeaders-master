{"Id":"4ca7a55c-bacf-4522-a96e-e101dfd32d6c","Topic":"CtCILibrary","Question":"","Solution":"package CtCILibrary;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.Collections;\r\nimport java.util.List;\r\n\r\npublic class BTreePrinter {\r\n\r\n    public static <T extends Comparable<?>> void printNode(TreeNode root) {\r\n        int maxLevel = BTreePrinter.maxLevel(root);\r\n\r\n        printNodeInternal(Collections.singletonList(root), 1, maxLevel);\r\n    }\r\n\r\n    private static <T extends Comparable<?>> void printNodeInternal(List<TreeNode> nodes, int level, int maxLevel) {\r\n        if (nodes.isEmpty() || BTreePrinter.isAllElementsNull(nodes))\r\n            return;\r\n\r\n        int floor = maxLevel - level;\r\n        int endgeLines = (int) Math.pow(2, (Math.max(floor - 1, 0)));\r\n        int firstSpaces = (int) Math.pow(2, (floor)) - 1;\r\n        int betweenSpaces = (int) Math.pow(2, (floor + 1)) - 1;\r\n\r\n        BTreePrinter.printWhitespaces(firstSpaces);\r\n\r\n        List<TreeNode> newNodes = new ArrayList<TreeNode>();\r\n        for (TreeNode node : nodes) {\r\n            if (node != null) {\r\n                System.out.print(node.data);\r\n                newNodes.add(node.left);\r\n                newNodes.add(node.right);\r\n            } else {\r\n                newNodes.add(null);\r\n                newNodes.add(null);\r\n                System.out.print(\" \");\r\n            }\r\n\r\n            BTreePrinter.printWhitespaces(betweenSpaces);\r\n        }\r\n        System.out.println(\"\");\r\n\r\n        for (int i = 1; i <= endgeLines; i++) {\r\n            for (int j = 0; j < nodes.size(); j++) {\r\n                BTreePrinter.printWhitespaces(firstSpaces - i);\r\n                if (nodes.get(j) == null) {\r\n                    BTreePrinter.printWhitespaces(endgeLines + endgeLines + i + 1);\r\n                    continue;\r\n                }\r\n\r\n                if (nodes.get(j).left != null)\r\n                    System.out.print(\"/\");\r\n                else\r\n                    BTreePrinter.printWhitespaces(1);\r\n\r\n                BTreePrinter.printWhitespaces(i + i - 1);\r\n\r\n                if (nodes.get(j).right != null)\r\n                    System.out.print(\"\\\\\");\r\n                else\r\n                    BTreePrinter.printWhitespaces(1);\r\n\r\n                BTreePrinter.printWhitespaces(endgeLines + endgeLines - i);\r\n            }\r\n\r\n            System.out.println(\"\");\r\n        }\r\n\r\n        printNodeInternal(newNodes, level + 1, maxLevel);\r\n    }\r\n\r\n    private static void printWhitespaces(int count) {\r\n        for (int i = 0; i < count; i++)\r\n            System.out.print(\" \");\r\n    }\r\n\r\n    private static <T extends Comparable<?>> int maxLevel(TreeNode node) {\r\n        if (node == null)\r\n            return 0;\r\n\r\n        return Math.max(BTreePrinter.maxLevel(node.left), BTreePrinter.maxLevel(node.right)) + 1;\r\n    }\r\n\r\n    private static <T> boolean isAllElementsNull(List<T> list) {\r\n        for (Object object : list) {\r\n            if (object != null)\r\n                return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n}\r\n","Chapter":"CtCILibrary"}