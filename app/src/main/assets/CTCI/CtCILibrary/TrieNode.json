{"Id":"f7a1e1ea-4f1e-425d-83a1-8f269efa8372","Topic":"CtCILibrary","Question":"","Solution":"package CtCILibrary;\r\n\r\nimport java.util.HashMap;\r\n\r\n/* One node in the trie. Most of the logic of the trie is implemented\r\n * in this class.\r\n */\r\npublic class TrieNode {\r\n    /* The children of this node in the trie.*/\r\n    private HashMap<Character, TrieNode> children;\r\n    private boolean terminates = false;\r\n\r\n    // The character stored in this node as data.\r\n    private char character;\t\r\n\r\n\t/* Constructs a trie node and stores this character as the node's value.\r\n\t * Initializes the list of child nodes of this node to an empty hash map. */\r\n    public TrieNode() {\r\n    \tchildren = new HashMap<Character, TrieNode>();\r\n    }\r\n\r\n    /* Constructs a trie node and stores in the node the char passed in\r\n     * as the argument. Initializes the list of child nodes of this\r\n     * node to an empty hash map.\r\n     */\r\n    public TrieNode(char character) {\r\n        this();\r\n        this.character = character;\r\n    }\r\n\r\n    /* Returns the character data stored in this node. */\r\n    public char getChar() {\r\n        return character;\r\n    }\r\n\r\n    /* Add this word to the trie, and recursively create the child\r\n     * nodes. */\r\n    public void addWord(String word) {\r\n    \tif (word == null || word.isEmpty()) {\r\n    \t\treturn;\r\n    \t}\r\n    \t\r\n        char firstChar = word.charAt(0);\r\n\r\n        TrieNode child = getChild(firstChar);\r\n        if (child == null) {\r\n            child = new TrieNode(firstChar);\r\n            children.put(firstChar, child);\r\n        } \r\n\r\n        if (word.length() > 1) {\r\n            child.addWord(word.substring(1));\r\n        } else {\r\n        \tchild.setTerminates(true);\r\n        }\r\n    }\r\n\r\n    /* Find a child node of this node that has the char argument as its\r\n     * data. Return null if no such child node is present in the trie.\r\n     */\r\n    public TrieNode getChild(char c) {\r\n    \treturn children.get(c);\r\n    }\r\n\r\n    /* Returns whether this node represents the end of a complete word. */\r\n    public boolean terminates() {\r\n    \treturn terminates;\r\n    }\r\n    \r\n    /* Set whether this node is the end of a complete word.*/\r\n    public void setTerminates(boolean t) {\r\n    \tterminates = t;\r\n    }\r\n}\r\n","Chapter":"CtCILibrary"}