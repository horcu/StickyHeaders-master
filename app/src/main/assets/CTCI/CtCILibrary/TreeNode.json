{"Id":"a0ab034f-7acf-4382-a4f2-ef4db975a49a","Topic":"CtCILibrary","Question":"","Solution":"package CtCILibrary;\r\n\r\n/* One node of a binary tree. The data element stored is a single \r\n * character.\r\n */\r\npublic class TreeNode {\r\n\tpublic int data;      \r\n\tpublic TreeNode left;    \r\n\tpublic TreeNode right; \r\n\tpublic TreeNode parent;\r\n\tprivate int size = 0;\r\n\r\n\tpublic TreeNode(int d) {\r\n\t\tdata = d;\r\n\t\tsize = 1;\r\n\t}\r\n\t\r\n\tprivate void setLeftChild(TreeNode left) {\r\n\t\tthis.left = left;\r\n\t\tif (left != null) {\r\n\t\t\tleft.parent = this;\r\n\t\t}\r\n\t}\r\n\t\r\n\tprivate void setRightChild(TreeNode right) {\r\n\t\tthis.right = right;\r\n\t\tif (right != null) {\r\n\t\t\tright.parent = this;\r\n\t\t}\r\n\t}\r\n\t\r\n\tpublic void insertInOrder(int d) {\r\n\t\tif (d <= data) {\r\n\t\t\tif (left == null) {\r\n\t\t\t\tsetLeftChild(new TreeNode(d));\r\n\t\t\t} else {\r\n\t\t\t\tleft.insertInOrder(d);\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tif (right == null) {\r\n\t\t\t\tsetRightChild(new TreeNode(d));\r\n\t\t\t} else {\r\n\t\t\t\tright.insertInOrder(d);\r\n\t\t\t}\r\n\t\t}\r\n\t\tsize++;\r\n\t}\r\n\t\r\n\tpublic int size() {\r\n\t\treturn size;\r\n\t}\r\n\t\r\n\tpublic boolean isBST() {\r\n\t\tif (left != null) {\r\n\t\t\tif (data < left.data || !left.isBST()) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tif (right != null) {\r\n\t\t\tif (data >= right.data || !right.isBST()) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t}\t\t\r\n\t\t\r\n\t\treturn true;\r\n\t}\r\n\t\r\n\tpublic int height() {\r\n\t\tint leftHeight = left != null ? left.height() : 0;\r\n\t\tint rightHeight = right != null ? right.height() : 0;\r\n\t\treturn 1 + Math.max(leftHeight, rightHeight);\r\n\t}\r\n\t\r\n\tpublic TreeNode find(int d) {\r\n\t\tif (d == data) {\r\n\t\t\treturn this;\r\n\t\t} else if (d <= data) {\r\n\t\t\treturn left != null ? left.find(d) : null;\r\n\t\t} else if (d > data) {\r\n\t\t\treturn right != null ? right.find(d) : null;\r\n\t\t}\r\n\t\treturn null;\r\n\t}\r\n\t\r\n\tprivate static TreeNode createMinimalBST(int arr[], int start, int end){\r\n\t\tif (end < start) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\t\tint mid = (start + end) / 2;\r\n\t\tTreeNode n = new TreeNode(arr[mid]);\r\n\t\tn.setLeftChild(createMinimalBST(arr, start, mid - 1));\r\n\t\tn.setRightChild(createMinimalBST(arr, mid + 1, end));\r\n\t\treturn n;\r\n\t}\r\n\t\r\n\tpublic static TreeNode createMinimalBST(int array[]) {\r\n\t\treturn createMinimalBST(array, 0, array.length - 1);\r\n\t}\r\n\t\r\n\tpublic void print() {\r\n\t\tBTreePrinter.printNode(this);\r\n\t}\r\n} \r\n","Chapter":"CtCILibrary"}