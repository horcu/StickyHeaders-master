{"Id":"096331dd-69c9-4549-bf29-f578ed1c683c","Topic":"CtCILibrary","Question":"","Solution":"package CtCILibrary;\r\n\r\nimport java.util.ArrayList;\r\n\r\n\r\n/* Implements a trie. We store the input list of words in tries so\r\n * that we can efficiently find words with a given prefix. \r\n */ \r\npublic class Trie\r\n{\r\n    // The root of this trie.\r\n    private TrieNode root;\r\n\r\n    /* Takes a list of strings as an argument, and constructs a trie that stores these strings. */\r\n    public Trie(ArrayList<String> list) {\r\n        root = new TrieNode();\r\n        for (String word : list) {\r\n            root.addWord(word);\r\n        }\r\n    }  \r\n    \r\n\r\n    /* Takes a list of strings as an argument, and constructs a trie that stores these strings. */    \r\n    public Trie(String[] list) {\r\n        root = new TrieNode();\r\n        for (String word : list) {\r\n            root.addWord(word);\r\n        }\r\n    }    \r\n\r\n    /* Checks whether this trie contains a string with the prefix passed\r\n     * in as argument.\r\n     */\r\n    public boolean contains(String prefix, boolean exact) {\r\n        TrieNode lastNode = root;\r\n        int i = 0;\r\n        for (i = 0; i < prefix.length(); i++) {\r\n            lastNode = lastNode.getChild(prefix.charAt(i));\r\n            if (lastNode == null) {\r\n                return false;\t \r\n            }\r\n        }\r\n        return !exact || lastNode.terminates();\r\n    }\r\n    \r\n    public boolean contains(String prefix) {\r\n    \treturn contains(prefix, false);\r\n    }\r\n    \r\n    public TrieNode getRoot() {\r\n    \treturn root;\r\n    }\r\n}\r\n","Chapter":"CtCILibrary"}