{"Id":"2aedf512-997c-4fc8-b053-8a61010913ba","Topic":"Ch 05. Bit Manipulation","Question":"","Solution":"package Q5_04_Next_Number;\r\n\r\npublic class QuestionC {\r\n\tpublic static int getNextArith(int n) {\r\n\t\tint c = n;\r\n\t\tint c0 = 0;\r\n\t\tint c1 = 0;\r\n\t\twhile (((c & 1) == 0) && (c != 0)) {\r\n\t\t\tc0++;\r\n\t\t\tc >>= 1;\r\n\t\t}\r\n\t\t\r\n\t\twhile ((c & 1) == 1) {\r\n\t\t\tc1++;\r\n\t\t\tc >>= 1;\r\n\t\t}\r\n\t\t\r\n\t\t/* If c is 0, then n is a sequence of 1s followed by a sequence of 0s. This is already the biggest\r\n\t\t * number with c1 ones. Return error.\r\n\t\t */\r\n\t\tif (c0 + c1 == 31 || c0 + c1 == 0) {\r\n\t\t\treturn -1;\r\n\t\t}\r\n\t\t\r\n\t\t/* Arithmetically:\r\n\t\t * 2^c0 = 1 << c0\r\n\t\t * 2^(c1-1) = 1 << (c0 - 1)\r\n\t\t * next = n + 2^c0 + 2^(c1-1) - 1;\r\n\t\t */\r\n\t\t\r\n\t\treturn n + (1 << c0) + (1 << (c1 - 1)) - 1;\r\n\t}\r\n\t\r\n\tpublic static int getPrevArith(int n) {\r\n\t\tint temp = n;\r\n\t\tint c0 = 0;\r\n\t\tint c1 = 0;\r\n\t\twhile (((temp & 1) == 1) && (temp != 0)) {\r\n\t\t\tc1++;\r\n\t\t\ttemp >>= 1;\r\n\t\t}\r\n\t\t\r\n\t\t/* If temp is 0, then the number is a sequence of 0s followed by a sequence of 1s. This is already\r\n\t\t * the smallest number with c1 ones. Return -1 for an error.\r\n\t\t */\r\n\t\tif (temp == 0) { \r\n\t\t\treturn -1;\r\n\t\t}\r\n\t\t\r\n\t\twhile ((temp & 1) == 0 && (temp != 0)) {\r\n\t\t\tc0++;\r\n\t\t\ttemp >>= 1;\r\n\t\t}\r\n\r\n\t\t/* Arithmetic:\r\n\t\t * 2^c1 = 1 << c1\r\n\t\t * 2^(c0 - 1) = 1 << (c0 - 1)\r\n\t\t */\r\n\t\treturn n - (1 << c1) - (1 << (c0 - 1)) + 1;\t\t\r\n\t}\t\r\n\t\r\n\tpublic static void binPrint(int i) {\r\n\t\tSystem.out.println(i + \": \" + Integer.toBinaryString(i));\t\t\r\n\t}\r\n\t\r\n\tpublic static void main(String[] args) {\r\n\t\tint i = 13948;\r\n\t\tint p1 = getPrevArith(i);\r\n\t\tint n1 = getNextArith(i);\r\n\t\tTester.binPrint(p1);\r\n\t\tTester.binPrint(n1);\r\n\t}\r\n\r\n}\r\n","Chapter":"Ch 05. Bit Manipulation"}