{"Id":"2465642a-d29f-4da1-873c-82c3f19b3d56","Topic":"Ch 07. Object-Oriented Design","Question":"","Solution":"package Q7_02_Call_Center;\r\n\r\n/* Employee is a super class for the Director, Manager, and Respondent classes. It is implemented as an\r\n * abstract class, since there should be no reason to instantiated an Employee type directly.\r\n */\r\nabstract class Employee {\r\n\tprivate Call currentCall = null;\r\n\tprotected Rank rank;\r\n\tprivate CallHandler callHandler;\r\n\r\n\tpublic Employee(CallHandler handler) {\r\n\t\tcallHandler = handler;\r\n\t}\r\n\r\n\t/* Start the conversation */\r\n\tpublic void receiveCall(Call call) {\r\n\t\tcurrentCall = call;\r\n\t}\r\n\r\n\t/* the issue is resolved, finish the call */\r\n\tpublic void callCompleted() {\r\n\t\tif (currentCall != null) {\r\n\t\t\t/* Disconnect the call. */\r\n\t\t\tcurrentCall.disconnect();\r\n\r\n\t\t\t/* Free the employee */\r\n\t\t\tcurrentCall = null;\r\n\t\t}\r\n\r\n\t\t/* Check if there is a call waiting in queue */\r\n\t\tassignNewCall();\r\n\t}\r\n\r\n\t/*\r\n\t * The issue has not been resolved. Escalate the call, and assign a new call\r\n\t * to the employee.\r\n\t */\r\n\tpublic void escalateAndReassign() {\r\n\t\tif (currentCall != null) {\r\n\t\t\t/* escalate call */\r\n\t\t\tcurrentCall.incrementRank();\r\n\t\t\tcallHandler.dispatchCall(currentCall);\r\n\r\n\t\t\t/* free the employee */\r\n\t\t\tcurrentCall = null;\r\n\t\t}\r\n\r\n\t\t/* assign a new call */\r\n\t\tassignNewCall();\r\n\t}\r\n\r\n\t/* Assign a new call to an employee, if the employee is free. */\r\n\tpublic boolean assignNewCall() {\r\n\t\tif (!isFree()) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\treturn callHandler.assignCall(this);\r\n\t}\r\n\r\n\t/* Returns whether or not the employee is free. */\r\n\tpublic boolean isFree() {\r\n\t\treturn currentCall == null;\r\n\t}\r\n\r\n\tpublic Rank getRank() {\r\n\t\treturn rank;\r\n\t}\r\n}\r\n","Chapter":"Ch 07. Object-Oriented Design"}