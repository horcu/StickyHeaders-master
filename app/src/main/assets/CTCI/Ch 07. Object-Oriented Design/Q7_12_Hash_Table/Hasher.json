{"Id":"4cdb430c-927f-4ab4-b565-8cd29bacbe0a","Topic":"Ch 07. Object-Oriented Design","Question":"","Solution":"package Q7_12_Hash_Table;\n\nimport java.util.ArrayList;\n\npublic class Hasher<K, V> {\n\tprivate static class LinkedListNode<K, V> {\n\t\tpublic LinkedListNode<K, V> next;\n\t\tpublic LinkedListNode<K, V> prev;\n\t\tpublic K key;\n\t\tpublic V value;\n\t\tpublic LinkedListNode(K k, V v) {\n\t\t\tkey = k;\n\t\t\tvalue = v;\n\t\t}\n\t\t\n\t\tpublic String printForward() {\n\t\t\tString data = \"(\" + key + \",\" + value + \")\";\n\t\t\tif (next != null) {\n\t\t\t\treturn data + \"->\" + next.printForward();\n\t\t\t} else {\n\t\t\t\treturn data;\n\t\t\t}\n\t\t}\n\t}\t\n\t\n\tprivate ArrayList<LinkedListNode<K, V>> arr;\n\tpublic Hasher(int capacity) {\n\t\t/* Create list of linked lists. */\n\t\tarr = new ArrayList<LinkedListNode<K, V>>();\n\t\tarr.ensureCapacity(capacity);\n\t\tfor (int i = 0; i < capacity; i++) {\n\t\t\tarr.add(null);\n\t\t}\n\t}\n\t\n\t/* Insert key and value into hash table. */\n\tpublic V put(K key, V value) {\n\t\tLinkedListNode<K, V> node = getNodeForKey(key);\n\t\tif (node != null) {\n\t\t\tV oldValue = node.value;\n\t\t\tnode.value = value; // just update the value.\n\t\t\treturn oldValue;\n\t\t}\n\t\t\n\t\tnode = new LinkedListNode<K, V>(key, value);\n\t\tint index = getIndexForKey(key);\n\t\tif (arr.get(index) != null) {\n\t\t\tnode.next = arr.get(index);\n\t\t\tnode.next.prev = node;\n\t\t}\n\t\tarr.set(index, node);\n\t\treturn null;\n\t}\n\t\n\t/* Remove node for key. */\n\tpublic V remove(K key) {\n\t\tLinkedListNode<K, V> node = getNodeForKey(key);\n\t\tif (node == null) {\n\t\t\treturn null;\n\t\t}\n\t\t\n\t\tif (node.prev != null) {\n\t\t\tnode.prev.next = node.next;\n\t\t} else {\n\t\t\t/* Removing head - update. */\n\t\t\tint hashKey = getIndexForKey(key);\n\t\t\tarr.set(hashKey, node.next);\n\t\t}\n\t\t\n\t\tif (node.next != null) {\n\t\t\tnode.next.prev = node.prev;\n\t\t}\n\t\treturn node.value;\n\t}\n\t\n\t/* Get value for key. */\n\tpublic V get(K key) {\n\t\tif (key == null) return null;\n\t\tLinkedListNode<K, V> node = getNodeForKey(key);\n\t\treturn node == null ? null : node.value;\n\t}\n\t\n\t/* Get linked list node associated with a given key. */\n\tprivate LinkedListNode<K, V> getNodeForKey(K key) {\n\t\tint index = getIndexForKey(key);\n\t\tLinkedListNode<K, V> current = arr.get(index);\n\t\twhile (current != null) {\n\t\t\tif (current.key == key) {\n\t\t\t\treturn current;\n\t\t\t}\n\t\t\tcurrent = current.next;\n\t\t}\n\t\treturn null;\t\t\n\t}\n\t\n\t/* Really stupid function to map a key to an index. */\n\tpublic int getIndexForKey(K key) {\n\t\treturn Math.abs(key.hashCode() % arr.size());\n\t}\n\t\n\tpublic void printTable() {\n\t\tfor (int i = 0; i < arr.size(); i++) {\n\t\t\tString s = arr.get(i) == null ? \"\" : arr.get(i).printForward();\n\t\t\tSystem.out.println(i + \": \" + s);\n\t\t}\n\t}\n}","Chapter":"Ch 07. Object-Oriented Design"}