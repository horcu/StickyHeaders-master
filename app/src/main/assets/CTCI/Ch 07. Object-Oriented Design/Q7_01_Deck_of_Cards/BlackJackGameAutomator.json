{"Id":"9c52c2d5-eef5-4845-ab0c-54ace721dc5c","Topic":"Ch 07. Object-Oriented Design","Question":"","Solution":"package Q7_01_Deck_of_Cards;\r\n\r\nimport java.util.ArrayList;\r\n\r\npublic class BlackJackGameAutomator {\r\n\tprivate Deck<BlackJackCard> deck;\r\n\tprivate BlackJackHand[] hands;\r\n\tprivate static final int HIT_UNTIL = 16;\r\n\t\r\n\tpublic BlackJackGameAutomator(int numPlayers) {\r\n\t\thands = new BlackJackHand[numPlayers];\r\n\t\tfor (int i = 0; i < numPlayers; i++) {\r\n\t\t\thands[i] = new BlackJackHand();\r\n\t\t}\r\n\t}\r\n\t\r\n\tpublic boolean dealInitial() {\r\n\t\tfor (BlackJackHand hand : hands) {\r\n\t\t\tBlackJackCard card1 = deck.dealCard();\r\n\t\t\tBlackJackCard card2 = deck.dealCard();\r\n\t\t\tif (card1 == null || card2 == null) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\thand.addCard(card1);\r\n\t\t\thand.addCard(card2);\t\r\n\t\t}\r\n\t\treturn true;\r\n\t}\r\n\t\r\n\tpublic ArrayList<Integer> getBlackJacks() {\r\n\t\tArrayList<Integer> winners = new ArrayList<Integer>();\r\n\t\tfor (int i = 0; i < hands.length; i++) {\r\n\t\t\tif (hands[i].isBlackJack()) {\r\n\t\t\t\twinners.add(i);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn winners;\r\n\t}\r\n\t\r\n\tpublic boolean playHand(int i) {\r\n\t\tBlackJackHand hand = hands[i];\r\n\t\treturn playHand(hand);\r\n\t}\r\n\t\r\n\tpublic boolean playHand(BlackJackHand hand) {\r\n\t\twhile (hand.score() < HIT_UNTIL) {\r\n\t\t\tBlackJackCard card = deck.dealCard();\r\n\t\t\tif (card == null) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\thand.addCard(card);\r\n\t\t}\r\n\t\treturn true;\r\n\t}\t\r\n\t\r\n\tpublic boolean playAllHands() {\r\n\t\tfor (BlackJackHand hand : hands) {\r\n\t\t\tif (!playHand(hand)) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn true;\r\n\t}\r\n\t\r\n\tpublic ArrayList<Integer> getWinners() {\r\n\t\tArrayList<Integer> winners = new ArrayList<Integer>();\r\n\t\tint winningScore = 0;\r\n\t\tfor (int i = 0; i < hands.length; i++) {\r\n\t\t\tBlackJackHand hand = hands[i];\r\n\t\t\tif (!hand.busted()) {\r\n\t\t\t\tif (hand.score() > winningScore) {\r\n\t\t\t\t\twinningScore = hand.score();\r\n\t\t\t\t\twinners.clear();\r\n\t\t\t\t\twinners.add(i);\r\n\t\t\t\t} else if (hand.score() == winningScore) {\r\n\t\t\t\t\twinners.add(i);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn winners;\r\n\t}\r\n\t\r\n\tpublic void initializeDeck() {\r\n\t\tArrayList<BlackJackCard> cards = new ArrayList<BlackJackCard>();\r\n\t\tfor (int i = 1; i <= 13; i++) {\r\n\t\t\tfor (int j = 0; j <= 3; j++) {\r\n\t\t\t\tSuit suit = Suit.getSuitFromValue(j);\r\n\t\t\t\tBlackJackCard card = new BlackJackCard(i, suit);\r\n\t\t\t\tcards.add(card);\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tdeck = new Deck<BlackJackCard>();\r\n\t\tdeck.setDeckOfCards(cards);\r\n\t\tdeck.shuffle();\t\r\n\t}\r\n\t\r\n\tpublic void printHandsAndScore() {\r\n\t\tfor (int i = 0; i < hands.length; i++) {\r\n\t\t\tSystem.out.print(\"Hand \" + i + \" (\" + hands[i].score() + \"): \");\r\n\t\t\thands[i].print();\r\n\t\t\tSystem.out.println(\"\");\r\n\t\t}\r\n\t}\r\n}\r\n","Chapter":"Ch 07. Object-Oriented Design"}