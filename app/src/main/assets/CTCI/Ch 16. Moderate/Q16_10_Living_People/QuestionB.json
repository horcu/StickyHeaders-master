{"Id":"0f8c625b-f56b-42b9-8cb8-6e1b1bab93a3","Topic":"Ch 16. Moderate","Question":"","Solution":"package Q16_10_Living_People;\n\nimport java.util.Random;\n\npublic class QuestionB {\n\n\tpublic static int maxAliveYear(Person[] people, int min, int max) {\n\t\tint[] years = createYearMap(people, min, max);\n\t\tint best = getMaxIndex(years);\n\n\t\treturn best + min;\n\t}\n\t\n\t/* Add each person's years to a year map. */\t\n\tpublic static int[] createYearMap(Person[] people, int min, int max) {\n\t\tint[] years = new int[max - min + 1];\n\t\tfor (Person person : people) {\n\t\t\tint left = person.birth - min;\n\t\t\tint right = person.death - min;\t\t\t\n\t\t\tincrementRange(years, left, right);\n\t\t}\n\t\treturn years;\n\t}\n\t\n\t/* Increment array for each value between left and right. */\n\tpublic static void incrementRange(int[] values, int left, int right) {\n\t\tfor (int i = left; i <= right; i++) {\n\t\t\tvalues[i]++;\n\t\t}\n\t}\t\n\t\n\t/* Get index of largest element in array. */\n\tpublic static int getMaxIndex(int[] values) {\n\t\tint max = 0;\n\t\tfor (int i = 1; i < values.length; i++) {\n\t\t\tif (values[i] > values[max]) {\n\t\t\t\tmax = i;\n\t\t\t}\n\t\t}\n\t\treturn max;\n\t}\t\n\t\n\tpublic static void main(String[] args) {\n\t\tint n = 3;\n\t\tint first = 1900;\n\t\tint last = 2000;\n\t\tRandom random = new Random();\n\t\tPerson[] people = new Person[n];\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tint birth = first + random.nextInt(last - first);\n\t\t\tint death = birth + random.nextInt(last - birth);\n\t\t\tpeople[i] = new Person(birth, death);\n\t\t\tSystem.out.println(birth + \", \" + death);\n\t\t}\n\t\tint year = maxAliveYear(people, first, last);\n\t\tSystem.out.println(year);\n\t}\n\n}\n","Chapter":"Ch 16. Moderate"}