{"Id":"e5f42d02-75fd-4f62-bc6d-01b0cd4d4c83","Topic":"Ch 16. Moderate","Question":"","Solution":"package Q16_10_Living_People;\n\nimport java.util.Random;\n\npublic class QuestionD {\n\t\n\tpublic static int maxAliveYear(Person[] people, int min, int max) {\n\t\t/* Build population delta array. */\n\t\tint[] populationDeltas = getPopulationDeltas(people, min, max);\n\t\tint maxAliveYear = getMaxAliveYear(populationDeltas);\n\t\treturn maxAliveYear + min;\n\t}\n\t\n\t/* Add birth and death years to deltas array. */\n\tpublic static int[] getPopulationDeltas(Person[] people, int min, int max) {\n\t\tint[] populationDeltas = new int[max - min + 2];\n\t\tfor (Person person : people) {\n\t\t\tint birth = person.birth - min;\n\t\t\tpopulationDeltas[birth]++;\n\t\t\t\n\t\t\tint death = person.death - min;\n\t\t\tpopulationDeltas[death + 1]--;\t\n\t\t}\n\t\treturn populationDeltas;\n\t}\n\t\n\t/* Compute running sums and return index with max. */\n\tpublic static int getMaxAliveYear(int[] deltas) {\n\t\tint maxAliveYear = 0;\n\t\tint maxAlive = 0;\n\t\tint currentlyAlive = 0;\n\t\tfor (int year = 0; year < deltas.length; year++) {\n\t\t\tcurrentlyAlive += deltas[year];\n\t\t\tif (currentlyAlive > maxAlive) {\n\t\t\t\tmaxAliveYear = year;\n\t\t\t\tmaxAlive = currentlyAlive;\n\t\t\t}\n\t\t}\t\n\t\t\n\t\treturn maxAliveYear;\n\t}\n\t\n\tpublic static void main(String[] args) {\n\t\tint n = 3;\n\t\tint first = 1900;\n\t\tint last = 2000;\n\t\tRandom random = new Random();\n\t\tPerson[] people = new Person[n];\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tint birth = first + random.nextInt(last - first);\n\t\t\tint death = birth + random.nextInt(last - birth);\n\t\t\tpeople[i] = new Person(birth, death);\n\t\t\tSystem.out.println(birth + \", \" + death);\n\t\t}\n\t\tint year = maxAliveYear(people, first, last);\n\t\tSystem.out.println(year);\n\t}\n\n}\n","Chapter":"Ch 16. Moderate"}