{"Id":"e9481097-1c6e-44b6-a4b7-0001d6841379","Topic":"Ch 16. Moderate","Question":"","Solution":"package Q16_16_Sub_Sort;\r\n\r\npublic class Question {\r\n\r\n\tpublic static int findEndOfLeftSubsequence(int[] array) {\r\n\t\tfor (int i = 1; i < array.length; i++) {\r\n\t\t\tif (array[i] < array[i - 1]) {\r\n\t\t\t\treturn i - 1;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn array.length - 1;\r\n\t}\r\n\t\r\n\tpublic static int findStartOfRightSubsequence(int[] array) {\r\n\t\tfor (int i = array.length - 2; i >= 0; i--) {\r\n\t\t\tif (array[i] > array[i + 1]) {\r\n\t\t\t\treturn i + 1;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn 0;\r\n\t}\t\t\r\n\t\r\n\tpublic static int shrinkLeft(int[] array, int min_index, int start) {\r\n\t\tint comp = array[min_index];\r\n\t\tfor (int i = start - 1; i >= 0; i--) {\r\n\t\t\tif (array[i] <= comp) {\r\n\t\t\t\treturn i + 1;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn 0;\r\n\t}\r\n\t\r\n\tpublic static int shrinkRight(int[] array, int max_index, int start) {\r\n\t\tint comp = array[max_index];\r\n\t\tfor (int i = start; i < array.length; i++) {\r\n\t\t\tif (array[i] >= comp) {\r\n\t\t\t\treturn i - 1;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn array.length - 1;\r\n\t}\t\r\n\t\r\n\tpublic static void findUnsortedSequence(int[] array) {\r\n\t\t// find left subsequence\r\n\t\tint end_left = findEndOfLeftSubsequence(array);\t\r\n\t\t\r\n\t\tif (end_left >= array.length - 1) {\r\n\t\t\t//System.out.println(\"The array is already sorted.\");\r\n\t\t\treturn; // Already sorted\r\n\t\t}\r\n\t\t\r\n\t\t// find right subsequence\r\n\t\tint start_right = findStartOfRightSubsequence(array);\t\r\n\t\t\r\n\t\tint max_index = end_left; // max of left side\r\n\t\tint min_index = start_right; // min of right side\r\n\t\tfor (int i = end_left + 1; i < start_right; i++) {\r\n\t\t\tif (array[i] < array[min_index]) {\r\n\t\t\t\tmin_index = i;\r\n\t\t\t}\r\n\t\t\tif (array[i] > array[max_index]) {\r\n\t\t\t\tmax_index = i;\r\n\t\t\t}\r\n\t\t}\t\t\r\n\t\t\r\n\t\t// slide left until less than array[min_index]\r\n\t\tint left_index = shrinkLeft(array, min_index, end_left);\r\n\r\n\t\t// slide right until greater than array[max_index]\r\n\t\tint right_index = shrinkRight(array, max_index, start_right);\r\n\t\t\r\n\t\tif (validate(array, left_index, right_index)) {\r\n\t\t\tSystem.out.println(\"TRUE: \" + left_index + \" \" + right_index);\r\n\t\t} else {\r\n\t\t\tSystem.out.println(\"FALSE: \" + left_index + \" \" + right_index);\r\n\t\t}\r\n\t}\r\n\t\r\n\t/* Validate that sorting between these indices will sort the array. Note that this is not a complete\r\n\t * validation, as it does not check if these are the best possible indices.\r\n\t */\r\n\tpublic static boolean validate(int[] array, int left_index, int right_index) {\r\n\t\tint[] middle = new int[right_index - left_index + 1];\r\n\t\tfor (int i = left_index; i <= right_index; i++) {\r\n\t\t\tmiddle[i - left_index] = array[i];\r\n\t\t}\r\n\t\tjava.util.Arrays.sort(middle);\r\n\t\tfor (int i = left_index; i <= right_index; i++) {\r\n\t\t\tarray[i] = middle[i - left_index];\r\n\t\t}\r\n\t\tfor (int i = 1; i < array.length; i++) {\r\n\t\t\tif (array[i-1] > array[i]) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\t\t\r\n\t\t}\r\n\t\treturn true;\r\n\t}\r\n\t\r\n\tpublic static void main(String[] args) {\r\n\t\tint[] array = {1, 9, 4, 3, 5};\r\n\t\tfindUnsortedSequence(array);\r\n\t}\r\n\r\n}\r\n","Chapter":"Ch 16. Moderate"}