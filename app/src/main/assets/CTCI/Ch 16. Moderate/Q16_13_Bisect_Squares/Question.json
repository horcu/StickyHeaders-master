{"Id":"56f27252-262d-4c73-b639-5ad9a835519d","Topic":"Ch 16. Moderate","Question":"","Solution":"package Q16_13_Bisect_Squares;\r\n\r\npublic class Question {\r\n\r\n\tpublic static int randomInt(int n) {\r\n\t\treturn (int) (Math.random() * n);\r\n\t}\r\n\t\r\n\tpublic static void printLine(Line l) {\r\n\t\tSystem.out.println(l.start.x + \"\\t\" + l.start.y);\r\n\t\tSystem.out.println(l.end.x + \"\\t\" + l.end.y);\r\n\t}\r\n\t\r\n\tpublic static void printSquare(Square s) {\r\n\t\tSystem.out.println(s.left + \"\\t\" + s.top + \"\\t\" + s.size);\r\n\t}\t\r\n\t\r\n\tpublic static boolean isApproxEqual(double d1, double d2) {\r\n\t\tdouble epsilon = .001;\t\r\n\t\tif (Math.abs(d1 - d2) < epsilon) {\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\t\r\n\tpublic static boolean isApproxEqual(Point p1, Point p2) {\r\n\t\treturn isApproxEqual(p1.x, p2.x) && isApproxEqual(p1.y, p2.y); \r\n\t}\r\n\t\r\n\tpublic static boolean doTest(Square s1, Square s2, Point start, Point end) {\r\n\t\tLine line = s1.cut(s2);\r\n\t\tboolean r = (isApproxEqual(line.start, start) && isApproxEqual(line.end, end)) || (isApproxEqual(line.start, end) && isApproxEqual(line.end, start));\r\n\t\tif (!r) {\r\n\t\t\tprintSquare(s1);\r\n\t\t\tprintSquare(s2);\r\n\t\t\tprintLine(line);\r\n\t\t\tSystem.out.println(start.toString());\r\n\t\t\tSystem.out.println(end.toString());\r\n\t\t\tSystem.out.println();\r\n\t\t\treturn r;\r\n\t\t}\r\n\t\treturn r;\r\n\t}\r\n\t\r\n\tpublic static boolean doTestFull(Square s1, Square s2, Point start, Point end) {\r\n\t\treturn doTest(s1, s2, start, end) && doTest(s2, s1, start, end);\r\n\t}\r\n\t\r\n\tpublic static void doTests() {\r\n\t\t// Equal\r\n\t\tdoTestFull(new Square(1, 1, 5), new Square(1, 1, 5), new Point(3.5, 1), new Point(3.5, 6));\t\r\n\t\t\r\n\t\t// Concentric\r\n\t\tdoTestFull(new Square(1, 1, 5), new Square(2, 2, 3), new Point(3.5, 1), new Point(3.5, 6));\r\n\t\t\r\n\t\t// Partially overlapping -- side by side\r\n\t\tdoTestFull(new Square(10, 10, 10), new Square(8, 10, 10), new Point(8, 15), new Point(20, 15));\r\n\t\t\r\n\t\t// Partially overlapping -- corners\r\n\t\tdoTestFull(new Square(10, 10, 10), new Square(8, 7, 7), new Point(8.777777, 7), new Point(18.8888888, 20));\t\t\r\n\t\t\r\n\t\t// Partially overlapping -- on top of each other\r\n\t\tdoTestFull(new Square(10, 10, 10), new Square(8, 7, 15), new Point(8, 22), new Point(23, 7));\t\t\r\n\t\t\r\n\t\t// Not overlapping -- side by side\r\n\t\tdoTestFull(new Square(10, 10, 10), new Square(19, 25, 4), new Point(12.5, 10), new Point(22, 29));\t\t\t\t\r\n\t\t\r\n\t\t// Not overlapping -- on top of each other\r\n\t\tdoTestFull(new Square(10, 10, 10), new Square(4, 4, 3), new Point(4, 4), new Point(20, 20));\t\t\r\n\t\t\r\n\t\t// Contained\r\n\t\tdoTestFull(new Square(10, 10, 10), new Square(12, 14, 3), new Point(10, 16.66666), new Point(20, 13.333));\t\t\t\r\n\t}\r\n\t\r\n\tpublic static void main(String[] args) {\r\n\t\t/* For an easy way to test these, open up Square Cut Tester.xlsx\r\n\t\t * in the Chapter 7, Problem 5 folder. Copy and paste the exact \r\n\t\t * output from below into the file (including all tabs).\r\n\t\t */\r\n\t\tdoTests();\r\n\t}\r\n\r\n}\r\n","Chapter":"Ch 16. Moderate"}