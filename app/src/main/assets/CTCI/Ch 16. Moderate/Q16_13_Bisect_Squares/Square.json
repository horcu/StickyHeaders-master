{"Id":"2c3bd758-5ef3-46fb-b290-60939af9ce7f","Topic":"Ch 16. Moderate","Question":"","Solution":"package Q16_13_Bisect_Squares;\r\n\r\npublic class Square {\r\n\tpublic double left;\r\n\tpublic double top;\r\n\tpublic double bottom;\r\n\tpublic double right;\r\n\tpublic double size;\r\n\tpublic Square(double left, double top, double size) {\r\n\t\tthis.left = left;\r\n\t\tthis.top = top;\r\n\t\tthis.bottom = top + size;\r\n\t\tthis.right = left + size;\r\n\t\tthis.size = size;\r\n\t}\r\n\t\r\n\tpublic Point middle() {\r\n\t\treturn new Point((this.left + this.right)/2.0, (this.top + this.bottom)/2.0);\r\n\t}\r\n\t\r\n\tpublic boolean contains(Square other) {\r\n\t\tif (this.left <= other.left && this.right >= other.right && this.top <= other.top && this.bottom >= other.bottom) {\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\t\r\n\t/* Return the point where the line segment connecting mid1 and\r\n\t * mid2 intercepts the edge of square 1. That is, draw a line \r\n\t * from mid2 to mid1, and continue it out until the edge of\r\n\t * the square. */\r\n\tpublic Point extend(Point mid1, Point mid2, double size) {\r\n\t\t/* Find what direction the line mid2 -> mid1 goes */\r\n\t\tdouble xdir = mid1.x < mid2.x ? -1 : 1;\r\n\t\tdouble ydir = mid1.y < mid2.y ? -1 : 1;\r\n\t\t\r\n\t\t/* If mid1 and mid2 have the same x value, then the slope\r\n\t\t * calculation will throw a divide by 0 exception. So, we\r\n\t\t * compute this specially. */\r\n\t\tif (mid1.x == mid2.x) {\r\n\t\t\treturn new Point(mid1.x, mid1.y + ydir * size / 2.0);\r\n\t\t}\r\n\t\tdouble slope = (mid1.y - mid2.y) / (mid1.x - mid2.x);\r\n\t\tdouble x1 = 0;\r\n\t\tdouble y1 = 0;\r\n\t\t\r\n\t\t/* Calculate slope using the equation (y1 - y2) / (x1 - x2).\r\n\t\t * Note: if the slope is �steep� (>1) then the end of the\r\n\t\t * line segment will hit size / 2 units away from the middle\r\n\t\t * on the y axis. If the slope is �shallow� (<1) the end of\r\n\t\t * the line segment will hit size / 2 units away from the\r\n\t\t * middle on the x axis. */\r\n\t\tif (Math.abs(slope) == 1) {\r\n\t\t\tx1 = mid1.x + xdir * size / 2.0;\r\n\t\t\ty1 = mid1.y + ydir * size / 2.0;\r\n\t\t} else if (Math.abs(slope) < 1) {\r\n\t\t\tx1 = mid1.x + xdir * size / 2.0;\r\n\t\t\ty1 = slope * (x1 - mid1.x) + mid1.y; \r\n\t\t} else {\r\n\t\t\ty1 = mid1.y + ydir * size / 2.0;\r\n\t\t\tx1 = (y1 - mid1.y) / slope + mid1.x;\r\n\t\t}\r\n\t\treturn new Point(x1, y1);\r\n\t}\r\n\t\r\n\tpublic Line cut(Square other) {\r\n\t\t/* Calculate where a line between each middle would collide with the edges of the squares */\r\n\t\tPoint p1 = extend(this.middle(), other.middle(), this.size);\r\n\t\tPoint p2 = extend(this.middle(), other.middle(), -1 * this.size);\r\n\t\tPoint p3 = extend(other.middle(), this.middle(), other.size);\r\n\t\tPoint p4 = extend(other.middle(), this.middle(), -1 * other.size);\r\n\t\r\n\t\t/* Of above points, find start and end of lines. Start is farthest left (with top most as a tie breaker)\r\n\t\t * and end is farthest right (with bottom most as a tie breaker */\r\n\t\tPoint start = p1;\r\n\t\tPoint end = p1;\t\t\r\n\t\tPoint[] points = {p2, p3, p4};\r\n\t\tfor (int i = 0; i < points.length; i++) {\r\n\t\t\tif (points[i].x < start.x || (points[i].x == start.x && points[i].y < start.y)) {\r\n\t\t\t\tstart = points[i];\r\n\t\t\t} else if (points[i].x > end.x || (points[i].x == end.x && points[i].y > end.y)) {\r\n\t\t\t\tend = points[i];\r\n\t\t\t}\r\n\t\t}\r\n\t\t\t\r\n\t\treturn new Line(start, end);\r\n\t}\r\n\t\r\n\tpublic String toString() {\r\n\t\treturn \"(\" + left + \", \" + top + \")|(\" + right + \",\" + bottom + \")\";\r\n\t}\r\n}\r\n","Chapter":"Ch 16. Moderate"}