{"Id":"5304f3b9-be63-47d3-ba72-f81a54df2297","Topic":"Ch 16. Moderate","Question":"","Solution":"package Q16_04_Tic_Tac_Win;\r\n\r\nimport CtCILibrary.AssortedMethods;\r\n\r\npublic class QuestionF {\r\n\r\n\tpublic static Piece hasWon(Piece[][] board) {\r\n\t\tPiece winner = Piece.Empty;\r\n\t\t\r\n\t\t/* Check rows. */\r\n\t\tfor (int i = 0; i < board.length; i++) {\r\n\t\t\twinner = hasWon(board, i, 0, 0, 1);\r\n\t\t\tif (winner != Piece.Empty) {\r\n\t\t\t\treturn winner;\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\t/* Check columns. */\r\n\t\tfor (int i = 0; i < board[0].length; i++) {\r\n\t\t\twinner = hasWon(board, 0, i, 1, 0);\r\n\t\t\tif (winner != Piece.Empty) {\r\n\t\t\t\treturn winner;\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\t/* Check top/left -> bottom/right diagonal. */\r\n\t\twinner = hasWon(board, 0, 0, 1, 1);\r\n\t\tif (winner != Piece.Empty) {\r\n\t\t\treturn winner;\r\n\t\t}\r\n\t\t\r\n\t\t/* Check top/right -> bottom/left diagonal. */\r\n\t\treturn hasWon(board, 0, board[0].length - 1, 1, -1);\r\n\t}\r\n\t\r\n\tpublic static Piece hasWon(Piece[][] board, int row, int col, int incrementRow, int incrementCol) {\r\n\t\tPiece first = board[row][col];\r\n\t\twhile (row < board.length && col < board[row].length) {\r\n\t\t\tif (board[row][col] != first) {\r\n\t\t\t\treturn Piece.Empty;\r\n\t\t\t}\r\n\t\t\trow += incrementRow;\r\n\t\t\tcol += incrementCol;\r\n\t\t}\r\n\t\treturn first;\r\n\t}\r\n\t\r\n\tpublic static void main(String[] args) {\r\n\t\tint N = 3;\r\n\t\tint[][] board_t = AssortedMethods.randomMatrix(N, N, 0, 2);\r\n\t\tPiece[][] board = new Piece[N][N];\r\n\t\tfor (int i = 0; i < N; i++) {\r\n\t\t\tfor (int j = 0; j < N; j++) {\r\n\t\t\t\tint x = board_t[i][j];\r\n\t\t\t\tboard[i][j] = Tester.convertIntToPiece(x);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tPiece p1 = hasWon(board);\r\n\t\t\r\n\t\tSystem.out.println(p1);\r\n\t\tAssortedMethods.printMatrix(board_t);\r\n\t}\r\n\r\n}\r\n","Chapter":"Ch 16. Moderate"}