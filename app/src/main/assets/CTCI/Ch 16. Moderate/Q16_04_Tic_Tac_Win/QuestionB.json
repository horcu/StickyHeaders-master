{"Id":"89173738-2017-4e62-a7ca-a4197f4d4f6e","Topic":"Ch 16. Moderate","Question":"","Solution":"package Q16_04_Tic_Tac_Win;\r\n\r\n\r\nimport CtCILibrary.AssortedMethods;\r\n\r\npublic class QuestionB {\t\r\n\tpublic static Piece hasWon(Piece[][] board, int row, int column) {\r\n\t\tif (board.length != board[0].length) return Piece.Empty;\r\n\t\t\r\n\t\tPiece piece = board[row][column];\r\n\t\t\r\n\t\tif (piece == Piece.Empty) return Piece.Empty;\r\n\t\tif (hasWonRow(board, row) || hasWonColumn(board, column)) {\r\n\t\t\treturn piece;\r\n\t\t}\r\n\t\t\r\n\t\tif (row == column && hasWonDiagonal(board, 1)) {\r\n\t\t\treturn piece;\r\n\t\t}\r\n\t\t\r\n\t\tif (row == (board.length - column - 1) && hasWonDiagonal(board, -1)) {\r\n\t\t\treturn piece;\r\n\t\t}\r\n\t\t\r\n\t\treturn Piece.Empty;\r\n\t}\t\r\n\t\r\n\tpublic static boolean hasWonRow(Piece[][] board, int row) {\r\n\t\tfor (int c = 1; c < board[row].length; c++) {\r\n\t\t\tif (board[row][c] != board[row][0]) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn true;\r\n\t}\r\n\t\r\n\tpublic static boolean hasWonColumn(Piece[][] board, int column) {\r\n\t\tfor (int r = 1; r < board.length; r++) {\r\n\t\t\tif (board[r][column] != board[0][column]) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn true;\r\n\t}\r\n\t\r\n\tpublic static boolean hasWonDiagonal(Piece[][] board, int direction) {\r\n\t\tint row = 0;\r\n\t\tint column = direction == 1 ? 0 : board.length - 1;\r\n\t\tPiece first = board[0][column];\r\n\t\tfor (int i = 0; i < board.length; i++) {\r\n\t\t\tif (board[row][column] != first) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\trow += 1;\r\n\t\t\tcolumn += direction;\r\n\t\t}\r\n\t\treturn true;\r\n\t}\t\t\r\n\t\r\n\tpublic static void main(String[] args) {\r\n\t\tint N = 3;\r\n\t\tint[][] board_t = AssortedMethods.randomMatrix(N, N, 0, 2);\r\n\r\n\t\tboard_t[1][1] = board_t[0][2];\r\n\t\tboard_t[2][0] = board_t[0][2];\r\n\t\t\r\n\t\tPiece[][] board = new Piece[N][N];\r\n\t\tfor (int i = 0; i < N; i++) {\r\n\t\t\tfor (int j = 0; j < N; j++) {\r\n\t\t\t\tint x = board_t[i][j];\r\n\t\t\t\tboard[i][j] = Tester.convertIntToPiece(x);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tPiece p1 = hasWon(board, 0, 2);\r\n\t\t\r\n\t\tSystem.out.println(p1);\r\n\t\tAssortedMethods.printMatrix(board_t);\r\n\t}\r\n\r\n}\r\n","Chapter":"Ch 16. Moderate"}