{"Id":"596b845e-c990-4723-89f1-a1979ea3f62b","Topic":"Ch 01. Arrays and Strings","Question":"","Solution":"package Q1_02_Check_Permutation;\r\n\r\npublic class QuestionB {\t\r\n\tpublic static boolean permutation(String s, String t) {\r\n\t\tif (s.length() != t.length()) return false; // Permutations must be same length\r\n\t\t\r\n\t\tint[] letters = new int[128]; // Assumption: ASCII\r\n\t\tfor (int i = 0; i < s.length(); i++) {\r\n\t\t\tletters[s.charAt(i)]++;\r\n\t\t}\r\n\t\t  \r\n\t\tfor (int i = 0; i < t.length(); i++) {\r\n\t\t\tletters[t.charAt(i)]--;\r\n\t\t    if (letters[t.charAt(i)] < 0) {\r\n\t\t    \treturn false;\r\n\t\t    }\r\n\t\t}\r\n\t\t  \r\n\t\treturn true; // letters array has no negative values, and therefore no positive values either\r\n\t}\r\n\t\r\n\tpublic static void main(String[] args) {\r\n\t\tString[][] pairs = {{\"apple\", \"papel\"}, {\"carrot\", \"tarroc\"}, {\"hello\", \"llloh\"}};\r\n\t\tfor (String[] pair : pairs) {\r\n\t\t\tString word1 = pair[0];\r\n\t\t\tString word2 = pair[1];\r\n\t\t\tboolean anagram = permutation(word1, word2);\r\n\t\t\tSystem.out.println(word1 + \", \" + word2 + \": \" + anagram);\r\n\t\t}\r\n\t}\r\n}\r\n","Chapter":"Ch 01. Arrays and Strings"}