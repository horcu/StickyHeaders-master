{"Id":"7ee38eab-94d1-4720-b5f7-5022fc5f8d51","Topic":"QuestionB.java","Question":"","Solution":"package Q4_08_First_Common_Ancestor;\r\n\r\nimport CtCILibrary.TreeNode;\r\n\r\npublic class QuestionB {\r\n\tpublic static TreeNode commonAncestor(TreeNode p, TreeNode q) {\r\n\t\tint delta = depth(p) - depth(q); // get difference in depths\r\n\t\tTreeNode first = delta > 0 ? q : p; // get shallower node\r\n\t\tTreeNode second = delta > 0 ? p : q; // get deeper node\r\n\t\tsecond = goUpBy(second, Math.abs(delta)); // move shallower node to depth of deeper\r\n\t\twhile (first != second && first != null && second != null) {\r\n\t\t\tfirst = first.parent;\r\n\t\t\tsecond = second.parent;\r\n\t\t}\r\n\t\treturn first == null || second == null ? null : first;\r\n\t}\r\n\t\r\n\tpublic static TreeNode goUpBy(TreeNode node, int delta) {\r\n\t\twhile (delta > 0 && node != null) {\r\n\t\t\tnode = node.parent;\r\n\t\t\tdelta--;\r\n\t\t}\r\n\t\treturn node;\r\n\t}\r\n\t\r\n\tpublic static int depth(TreeNode node) {\r\n\t\tint depth = 0;\r\n\t\twhile (node != null) {\r\n\t\t\tnode = node.parent;\r\n\t\t\tdepth++;\r\n\t\t}\r\n\t\treturn depth;\r\n\t}\t\r\n\t\r\n\tpublic static void main(String[] args) {\r\n\t\tint[] array = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};\r\n\t\tTreeNode root = TreeNode.createMinimalBST(array);\r\n\t\tTreeNode n3 = root.find(3);\r\n\t\tTreeNode n7 = root.find(7);\r\n\t\tTreeNode ancestor = commonAncestor(n3, n7);\r\n\t\tSystem.out.println(ancestor.data);\r\n\t}\r\n\r\n}\r\n","Chapter":"Q4_08_First_Common_Ancestor"}