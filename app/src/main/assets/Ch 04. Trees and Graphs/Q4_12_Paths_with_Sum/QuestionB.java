{"Id":"06f7bd30-c445-4a4a-ae8f-039b23b56392","Topic":"QuestionB.java","Question":"","Solution":"package Q4_12_Paths_with_Sum;\r\nimport java.util.HashMap;\r\n\r\nimport CtCILibrary.TreeNode;\r\n\r\npublic class QuestionB {\r\n\t\r\n\tpublic static int countPathsWithSum(TreeNode root, int targetSum) {\r\n\t\treturn countPathsWithSum(root, targetSum, 0, new HashMap<Integer, Integer>());\r\n\t}\r\n\t\r\n\tpublic static int countPathsWithSum(TreeNode node, int targetSum, int runningSum, HashMap<Integer, Integer> pathCount) {\r\n\t\tif (node == null) return 0; // Base case\r\n\t\t\r\n\t\trunningSum += node.data;\r\n\t\t\r\n\t\t/* Count paths with sum ending at the current node. */\r\n\t\tint sum = runningSum - targetSum;\r\n\t\tint totalPaths = pathCount.getOrDefault(sum, 0);\r\n\t\t\r\n\t\t/* If runningSum equals targetSum, then one additional path starts at root. Add in this path.*/\r\n\t\tif (runningSum == targetSum) {\r\n\t\t\ttotalPaths++;\r\n\t\t}\r\n\r\n\t\t/* Add runningSum to pathCounts. */\r\n\t\tincrementHashTable(pathCount, runningSum, 1);\r\n\t\t\r\n\t\t/* Count paths with sum on the left and right. */\r\n\t\ttotalPaths += countPathsWithSum(node.left, targetSum, runningSum, pathCount);\r\n\t\ttotalPaths += countPathsWithSum(node.right, targetSum, runningSum, pathCount);\r\n\t\t\r\n\t\tincrementHashTable(pathCount, runningSum, -1); // Remove runningSum\r\n\t\treturn totalPaths;\r\n\t}\r\n\t\r\n\tpublic static void incrementHashTable(HashMap<Integer, Integer> hashTable, int key, int delta) {\r\n\t\tint newCount = hashTable.getOrDefault(key, 0) + delta;\r\n\t\tif (newCount == 0) { // Remove when zero to reduce space usage\r\n\t\t\thashTable.remove(key);\r\n\t\t} else {\r\n\t\t\thashTable.put(key, newCount);\r\n\t\t}\r\n\t}\r\n\r\n\tpublic static void main(String [] args) {\r\n\t\t/*\r\n\t\tTreeNode root = new TreeNode(5);\r\n\t\troot.left = new TreeNode(3);\t\t\r\n\t\troot.right = new TreeNode(1);\r\n\t\troot.left.left = new TreeNode(-8);\r\n\t\troot.left.right = new TreeNode(8);\r\n\t\troot.right.left = new TreeNode(2);\r\n\t\troot.right.right = new TreeNode(6);\t\r\n\t\troot.right.left.left = new TreeNode(0);\t\r\n\t\tSystem.out.println(countPathsWithSum(root, 0));\r\n\t\t*/\r\n\t\t\r\n\t\t/*TreeNode root = new TreeNode(-7);\r\n\t\troot.left = new TreeNode(-7);\r\n\t\troot.left.right = new TreeNode(1);\r\n\t\troot.left.right.left = new TreeNode(2);\r\n\t\troot.right = new TreeNode(7);\r\n\t\troot.right.left = new TreeNode(3);\r\n\t\troot.right.right = new TreeNode(20);\r\n\t\troot.right.right.left = new TreeNode(0);\r\n\t\troot.right.right.left.left = new TreeNode(-3);\r\n\t\troot.right.right.left.left.right = new TreeNode(2);\r\n\t\troot.right.right.left.left.right.left = new TreeNode(1);\r\n\t\tSystem.out.println(countPathsWithSum(root, 0));*/\r\n\t\t\r\n\t\tTreeNode root = new TreeNode(0);\r\n\t\troot.left = new TreeNode(0);\r\n\t\troot.right = new TreeNode(0);\r\n\t\troot.right.left = new TreeNode(0);\r\n\t\troot.right.left.right = new TreeNode(0);\r\n\t\troot.right.right = new TreeNode(0);\r\n\t\tSystem.out.println(countPathsWithSum(root, 0));\r\n\t\tSystem.out.println(countPathsWithSum(root, 4));\r\n\t}\r\n}\r\n\r\n","Chapter":"Q4_12_Paths_with_Sum"}