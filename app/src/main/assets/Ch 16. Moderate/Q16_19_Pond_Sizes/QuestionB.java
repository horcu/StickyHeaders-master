{"Id":"cbe8e5eb-a836-4e15-aec7-791a2e5fcb3e","Topic":"QuestionB.java","Question":"","Solution":"package Q16_19_Pond_Sizes;\n\nimport java.util.ArrayList;\n\npublic class QuestionB {\n\t\n\tpublic static ArrayList<Integer> computePondSizes(int[][] land) {\n\t\tboolean[][] visited = new boolean[land.length][land[0].length];\n\t\tArrayList<Integer> pondSizes = new ArrayList<Integer>();\n\t\tfor (int r = 0; r < land.length; r++) {\n\t\t\tfor (int c = 0; c < land[r].length; c++) {\n\t\t\t\tint size = computeSize(land, visited, r, c);\n\t\t\t\tif (size > 0) {\n\t\t\t\t\tpondSizes.add(size);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn pondSizes;\n\t}\n\t\n\tpublic static int computeSize(int[][] land, boolean[][] visited, int row, int col) {\n\t\t/* If out of bounds or already visited. */\n\t\tif (row < 0 || col < 0 || row >= land.length || col >= land[row].length || visited[row][col] || land[row][col] != 0) {\n\t\t\treturn 0;\n\t\t}\n\t\tint size = 1;\n\t\tvisited[row][col] = true;\n\t\tfor (int dr = -1; dr <= 1; dr++) {\n\t\t\tfor (int dc = -1; dc <= 1; dc++) {\n\t\t\t\tsize += computeSize(land, visited, row + dr, col + dc);\n\t\t\t}\n\t\t}\n\t\treturn size;\n\t}\n\t\n\tpublic static void main(String[] args) {\t\n\t\tint[][] land = {{0, 2, 1, 0}, {0, 1, 0, 1}, {1, 1, 0, 1}, {0, 1, 0, 1}};\n\t\tArrayList<Integer> sizes = computePondSizes(land);\n\t\tfor (int sz : sizes) {\n\t\t\tSystem.out.println(sz);\n\t\t}\n\t}\n}\n","Chapter":"Q16_19_Pond_Sizes"}