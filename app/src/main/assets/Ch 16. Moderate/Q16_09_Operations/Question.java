{"Id":"8aba88b6-c3fe-4254-8465-6375c2a9f35a","Topic":"Question.java","Question":"","Solution":"package Q16_09_Operations;\r\n\r\nimport java.util.Random;\r\n\r\nimport CtCILibrary.AssortedMethods;\r\n\r\npublic class Question {\r\n\t/* Flip a positive sign to negative, or a negative sign to pos */\r\n\tpublic static int negate(int a) {\r\n\t\tint neg = 0;\r\n\t\tint newSign = a < 0 ? 1 : -1;\r\n\t\twhile (a != 0) {\r\n\t\t\tneg += newSign;\r\n\t\t\ta += newSign;\r\n\t\t}\r\n\t    return neg;\r\n\t}\r\n\t\r\n\t/* Flip a positive sign to negative, or a negative sign to pos */\r\n\tpublic static int negateOptimized(int a) {\r\n\t\tint neg = 0;\r\n\t\tint newSign = a < 0 ? 1 : -1;\r\n\t\tint delta = newSign;\r\n\t\twhile (a != 0) {\r\n\t\t\tboolean differentSigns = (a + delta > 0) != (a > 0);\r\n\t\t\tif (a + delta != 0 && differentSigns) { // If delta is too big, reset it.\r\n\t\t\t\tdelta = newSign;\r\n\t\t\t}\r\n\t\t\tneg += delta;\r\n\t\t\ta += delta;\r\n\t\t\tdelta += delta; // Double the delta\r\n\t\t}\r\n\t    return neg;\r\n\t}\t\r\n\r\n\t/* Subtract two numbers by negating b and adding them */\r\n\tpublic static int minus(int a, int b) {\r\n\t\treturn a + negate(b);\r\n\t}\r\n\r\n\t/* Return absolute value */\r\n\tpublic static int abs(int a) {\r\n\t\tif (a < 0) {\r\n\t\t\treturn negateOptimized(a);\r\n\t\t}\r\n\t\telse return a;\r\n\t}\r\n\r\n\t/* Multiply a by b by adding a to itself b times */\r\n\tpublic static int multiply(int a, int b) {\r\n\t\tif (a < b) {\r\n\t\t\treturn multiply(b, a); // algo is faster if b < a\r\n\t\t}\r\n\t\tint sum = 0;\r\n\t\tfor (int i = abs(b); i > 0; i = minus(i, 1)) {\r\n\t\t\tsum += a;\r\n\t\t}\r\n\t\tif (b < 0) {\r\n\t\t\tsum = negateOptimized(sum);\r\n\t\t}\r\n\t\treturn sum;\r\n\t}\r\n\r\n\t/* Divide a by b by literally counting how many times b can go into\r\n\t * a. That is, count how many times you can add b to itself until you reach a. */\r\n\tpublic static int divide(int a, int b) throws java.lang.ArithmeticException {\r\n\t\tif (b == 0) {\r\n\t\t\tthrow new java.lang.ArithmeticException(\"ERROR: Divide by zero.\");\r\n\t\t}\r\n\t\tint absa = abs(a);\r\n\t\tint absb = abs(b);\r\n\t\t\r\n\t\tint product = 0;\r\n\t\tint x = 0;\r\n\t\twhile (product + absb <= absa) { /* don't go past a */\r\n\t\t\tproduct += absb;\r\n\t\t\tx++;\r\n\t\t}\r\n\t\t\r\n\t\tif ((a < 0 && b < 0) || (a > 0 && b > 0)) {\r\n\t\t\treturn x;\r\n\t\t} else {\r\n\t\t\treturn negateOptimized(x);\r\n\t\t}\r\n\t}\r\n\t\r\n\tpublic static void main(String[] args) {\r\n\t\tint minRange = -100;\r\n\t\tint maxRange = 100;\r\n\t\tint cycles = 100;\r\n\t\t\r\n\t\tfor (int i = 0; i < cycles; i++) {\r\n\t\t\tint a = AssortedMethods.randomIntInRange(minRange, maxRange);\r\n\t\t\tint b = AssortedMethods.randomIntInRange(minRange, maxRange);\r\n\t\t\tint ans = minus(a, b);\r\n\t\t\tif (ans != a - b) {\r\n\t\t\t\tSystem.out.println(\"ERROR\");\r\n\t\t\t}\r\n\t\t\tSystem.out.println(a + \" - \" + b + \" = \" + ans);\r\n\t\t}\r\n\t\tfor (int i = 0; i < cycles; i++) {\r\n\t\t\tint a = AssortedMethods.randomIntInRange(minRange, maxRange);\r\n\t\t\tint b = AssortedMethods.randomIntInRange(minRange, maxRange);\r\n\t\t\tint ans = multiply(a, b);\r\n\t\t\tif (ans != a * b) {\r\n\t\t\t\tSystem.out.println(\"ERROR\");\r\n\t\t\t}\r\n\t\t\tSystem.out.println(a + \" * \" + b + \" = \" + ans);\r\n\t\t}\r\n\t\tfor (int i = 0; i < cycles; i++) {\r\n\t\t\tint a = AssortedMethods.randomIntInRange(minRange, maxRange);\r\n\t\t\tint b = AssortedMethods.randomIntInRange(minRange, maxRange);\r\n\t\t\tSystem.out.print(a + \" / \" + b + \" = \");\r\n\t\t\tint ans = divide(a, b);\r\n\t\t\tif (ans != a / b) {\r\n\t\t\t\tSystem.out.println(\"ERROR\");\r\n\t\t\t}\r\n\t\t\tSystem.out.println(ans);\r\n\t\t}\r\n\t}\r\n\r\n}\r\n","Chapter":"Q16_09_Operations"}