{"Id":"46b641b6-8d23-4f06-9add-6dea8657a782","Topic":"Cache.java","Question":"","Solution":"package Q16_25_LRU_Cache;\n\nimport java.util.HashMap;\n\npublic class Cache {\t\t\t\n\tprivate int maxCacheSize;\n\tprivate HashMap<Integer, LinkedListNode> map = new HashMap<Integer, LinkedListNode>();\n\tprivate LinkedListNode listHead = null;\n\tpublic LinkedListNode listTail = null;\n\t\n\t\n\tpublic Cache(int maxSize) {\n\t\tmaxCacheSize = maxSize;\n\t}\n\t\n\t/* Get value for key and mark as most recently used. */\n\tpublic String getValue(int key) {\n\t\tLinkedListNode item = map.get(key);\n\t\tif (item == null) {\n\t\t\treturn null;\n\t\t}\n\t\t\n\t\t/* Move to front of list to mark as most recently used. */\n\t\tif (item != listHead) { \n\t\t\tremoveFromLinkedList(item);\n\t\t\tinsertAtFrontOfLinkedList(item);\n\t\t}\n\t\treturn item.value;\n\t}\n\t\n\t/* Remove node from linked list. */\n\tprivate void removeFromLinkedList(LinkedListNode node) {\n\t\tif (node == null) {\n\t\t\treturn;\n\t\t}\n\t\tif (node.prev != null) {\n\t\t\tnode.prev.next = node.next;\n\t\t}\n\t\tif (node.next != null) {\n\t\t\tnode.next.prev = node.prev;\n\t\t}\n\t\tif (node == listTail) {\n\t\t\tlistTail = node.prev;\n\t\t}\n\t\tif (node == listHead) {\n\t\t\tlistHead = node.next;\n\t\t}\t\t\n\t}\n\t\n\t/* Insert node at front of linked list. */\n\tprivate void insertAtFrontOfLinkedList(LinkedListNode node) {\n\t\tif (listHead == null) {\n\t\t\tlistHead = node;\n\t\t\tlistTail = node;\n\t\t} else {\n\t\t\tlistHead.prev = node;\n\t\t\tnode.next = listHead;\n\t\t\tlistHead = node;\n\t\t}\n\t}\n\t\n\t/* Remove key, value pair from cache, deleting from hash table\n\t * and linked list. */\n\tpublic boolean removeKey(int key) {\n\t\tLinkedListNode node = map.get(key);\n\t\tremoveFromLinkedList(node);\n\t\tmap.remove(key);\n\t\treturn true;\n\t}\n\t\n\t/* Put key, value pair in cache. Removes old value for key if\n\t * necessary. Inserts pair into linked list and hash table.*/\n\tpublic void setKeyValue(int key, String value) {\n\t\t/* Remove if already there. */\n\t\tremoveKey(key); \n\t\t\n\t\t/* If full, remove least recently used item from cache. */\n\t\tif (map.size() >= maxCacheSize && listTail != null) {\n\t\t\tremoveKey(listTail.key);\n\t\t}\n\t\t\n\t\t/* Insert new node. */\n\t\tLinkedListNode node = new LinkedListNode(key, value);\n\t\tinsertAtFrontOfLinkedList(node);\n\t\tmap.put(key, node);\n\t}\n\t\n\tpublic String getCacheAsString() {\n\t\tif (listHead == null) return \"\";\n\t\treturn listHead.printForward();\n\t}\n\t\n\tprivate class LinkedListNode {\n\t\tprivate LinkedListNode next;\n\t\tprivate LinkedListNode prev;\n\t\tpublic int key;\n\t\tpublic String value;\n\t\tpublic LinkedListNode(int k, String v) {\n\t\t\tkey = k;\n\t\t\tvalue = v;\n\t\t}\n\t\t\n\t\tpublic String printForward() {\n\t\t\tString data = \"(\" + key + \",\" + value + \")\";\n\t\t\tif (next != null) {\n\t\t\t\treturn data + \"->\" + next.printForward();\n\t\t\t} else {\n\t\t\t\treturn data;\n\t\t\t}\n\t\t}\n\t}\t\n}\n","Chapter":"Q16_25_LRU_Cache"}