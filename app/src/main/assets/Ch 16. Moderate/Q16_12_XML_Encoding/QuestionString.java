{"Id":"6e757c60-cf13-4809-adc6-6e8482c1b5e9","Topic":"QuestionString.java","Question":"","Solution":"package Q16_12_XML_Encoding;\r\n\r\nimport java.io.ByteArrayOutputStream;\r\nimport java.io.IOException;\r\nimport java.util.ArrayList;\r\nimport java.util.HashMap;\r\nimport java.util.Map;\r\n\r\npublic class QuestionString {\r\n\tprivate Map<String, Byte> tagMap;\r\n\tprivate static final Byte[] END = { 0, 1 };\r\n\r\n\tprivate ArrayList<String> tokens;\r\n\tprivate int currentTokenIndex;\r\n\r\n\tpublic QuestionString(Map<String, Byte> tagMap) {this.tagMap = tagMap;}\r\n\r\n\tpublic byte[] encode(char[] input) throws IOException {\r\n\t\t// tokenize\r\n\t\ttokenize(input);\r\n\t\tcurrentTokenIndex = 0;\r\n\r\n\t\t// parse\r\n\t\tByteArrayOutputStream outputStream = new ByteArrayOutputStream();\r\n\t\tencodeTokens(outputStream);\r\n\t\treturn outputStream.toByteArray();\r\n\t}\r\n\r\n\tprivate void encodeTokens(ByteArrayOutputStream output) \r\n\t\tthrows IOException {\r\n\t\tnextToken(\"<\");\r\n\r\n\t\t// read tag name\r\n\t\tString tagName = nextToken();\r\n\t\toutput.write(getTagCode(tagName));\r\n\r\n\t\t// read attributes\r\n\t\twhile (!hasNextToken(\">\") && !hasNextTokens(\"/\", \">\")) {\r\n\t\t\t// read next attribute\r\n\t\t\tString key = nextToken();\r\n\t\t\tnextToken(\"=\");\r\n\t\t\tString value = nextToken();\r\n\r\n\t\t\toutput.write(getTagCode(key));\r\n\t\t\tfor (char c : value.toCharArray()) {\r\n\t\t\t\toutput.write(c);\r\n\t\t\t}\r\n\t\t\toutput.write(END[0]);\r\n\t\t\toutput.write(END[1]);\r\n\t\t}\r\n\r\n\t\t// end of attributes\r\n\t\toutput.write(END[0]);\r\n\t\toutput.write(END[1]);\r\n\r\n\t\t// finish this element\r\n\t\tif (hasNextTokens(\"/\", \">\")) {\r\n\t\t\tnextToken(\"/\");\r\n\t\t\tnextToken(\">\");\r\n\t\t} else {\r\n\t\t\tnextToken(\">\");\r\n\t\t\t// while not the end tag\r\n\t\t\twhile (!hasNextTokens(\"<\", \"/\")) {\r\n\t\t\t\t// encode child\r\n\t\t\t\tencodeTokens(output);\r\n\t\t\t}\r\n\t\t\t// ending tag\r\n\t\t\tnextToken(\"<\");\r\n\t\t\tnextToken(\"/\");\r\n\t\t\tnextToken(tagName);\r\n\t\t\tnextToken(\">\");\r\n\t\t}\r\n\r\n\t\toutput.write(END[0]);\r\n\t\toutput.write(END[1]);\r\n\t}\r\n\r\n\tprivate String nextToken() throws IOException {\r\n\t\tif (currentTokenIndex >= tokens.size()) {\r\n\t\t\tthrow new IOException(\"Unexpected end of input.\");\r\n\t\t}\r\n\r\n\t\tString token = tokens.get(currentTokenIndex);\r\n\t\tcurrentTokenIndex++;\r\n\t\treturn token;\r\n\t}\r\n\r\n\tprivate void nextToken(String expectedToken) throws IOException {\r\n\t\tif (currentTokenIndex >= tokens.size()) {\r\n\t\t\tthrow new IOException(\"Unexpected end of input.\");\r\n\t\t}\r\n\r\n\t\tString token = tokens.get(currentTokenIndex);\r\n\t\tif (token.equals(expectedToken)) {\r\n\t\t\tcurrentTokenIndex++;\r\n\t\t} else {\r\n\t\t\tthrow new IOException(\"Unexpected input. Expected '\"\r\n\t\t\t\t\t+ expectedToken + \"'; found '\" + token + \"'.\");\r\n\t\t}\r\n\t}\r\n\r\n\tprivate boolean hasNextToken(String expectedToken) {\r\n\t\tif (currentTokenIndex < tokens.size()) {\r\n\t\t\treturn tokens.get(currentTokenIndex).equals(expectedToken);\r\n\t\t} else {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t}\r\n\r\n\tprivate boolean hasNextTokens(String... expectedTokens) {\r\n\t\tif (currentTokenIndex + expectedTokens.length > \r\n\t\t\ttokens.size()) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\tfor (int i = 0; i < expectedTokens.length; i++) {\r\n\t\t\tif (!tokens.get(currentTokenIndex + i)\r\n\t\t\t\t\t.equals(expectedTokens[i])) return false;\r\n\t\t}\r\n\t\treturn true;\r\n\t}\r\n\r\n\tprivate void tokenize(char[] input) {\r\n\t\ttokens = new ArrayList<String>();\r\n\t\tint i = 0;\r\n\t\twhile (i < input.length) {\r\n\t\t\ti = setNextToken(input, i);\r\n\t\t}\r\n\t}\r\n\r\n\tprivate int setNextToken(char[] input, int inputIndex) {\r\n\t\tint i = inputIndex;\r\n\t\twhile (i < input.length && input[i] == ' ') i++;\r\n\t\tif (i == input.length) return i;\r\n\r\n\t\t// get 1 char token\r\n\t\tchar c = input[i];\r\n\t\tif (c == '<' || c == '>' || c == '=' || c == '/') {\r\n\t\t\ttokens.add(String.valueOf(c));\r\n\t\t\treturn i + 1;\r\n\t\t}\r\n\r\n\t\t// get multiple char token\r\n\t\tStringBuilder string = new StringBuilder();\r\n\t\tdo {\r\n\t\t\tstring.append(c);\r\n\t\t\ti++;\r\n\t\t\tc = input[i];\r\n\t\t\tif (c == '<' || c == '>' || c == '=' || \r\n\t\t\t\tc == '/' || c == ' ') {\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t} while (i < input.length);\r\n\t\ttokens.add(string.toString());\r\n\t\treturn i;\r\n\t}\r\n\r\n\tprivate byte getTagCode(String tag) throws IOException {\r\n\t\tByte tagCode = tagMap.get(tag);\r\n\t\tif (tagCode == null) {\r\n\t\t\tthrow new IOException(\"Unknown tag: \" + tag);\r\n\t\t}\r\n\t\treturn tagCode;\r\n\t}\r\n\r\n\tpublic static void main(String args[]) {\r\n\t\ttry {\r\n\t\t\tMap<String, Byte> tagMap = new HashMap<String, Byte>();\r\n\t\t\ttagMap.put(\"a\", (byte) 10);\r\n\t\t\ttagMap.put(\"root\", (byte) 11);\r\n\t\t\ttagMap.put(\"href\", (byte) 20);\r\n\t\t\ttagMap.put(\"target\", (byte) 21);\r\n\t\t\ttagMap.put(\"name\", (byte) 50);\r\n\t\t\ttagMap.put(\"id\", (byte) 51);\r\n\r\n\t\t\tQuestionString encoder = new QuestionString(tagMap);\r\n\t\t\tString input;\r\n\t\t\tbyte[] output;\r\n\r\n\t\t\tinput = \"<root></root>\";\r\n\t\t\toutput = encoder.encode(input.toCharArray());\r\n\t\t\tprint(output);\r\n\r\n\t\t\tinput = \"<root id=a />\";\r\n\t\t\toutput = encoder.encode(input.toCharArray());\r\n\t\t\tprint(output);\r\n\r\n\t\t\tinput = \"<root><a href=abc id=xyz></a><a></a></root>\";\r\n\t\t\toutput = encoder.encode(input.toCharArray());\r\n\t\t\tprint(output);\r\n\t\t} catch (Exception ex) {\r\n\t\t\tSystem.out.println(ex);\r\n\t\t}\r\n\t}\r\n\r\n\tpublic static void print(byte[] output) {\r\n\t\tfor (byte b : output) {\r\n\t\t\tSystem.out.print(b);\r\n\t\t\tSystem.out.print(\" \");\r\n\t\t}\r\n\t\tSystem.out.println();\r\n\t}\r\n}\r\n","Chapter":"Q16_12_XML_Encoding"}