{"Id":"9659d7bf-aa27-4b02-a74e-24e4e3677615","Topic":"Question.java","Question":"","Solution":"package Q16_03_Intersection;\r\n\r\npublic class Question {\r\n\tpublic static Point createPoint(int[] coordinates) {\r\n\t\treturn new Point(coordinates[0],  coordinates[1]);\r\n\t}\t\r\n\t\r\n\t/* Checks if middle is between start and end. */\r\n\tpublic static boolean isBetween(double start, double middle, double end) {\r\n\t\tif (start > end) {\r\n\t\t\treturn end <= middle && middle <= start;\r\n\t\t} else {\r\n\t\t\treturn start <= middle && middle <= end;\r\n\t\t}\r\n\t}\r\n\t\r\n\t/* Checks if middle is between start and end. */\r\n\tpublic static boolean isBetween(Point start, Point middle, Point end) {\r\n\t\treturn isBetween(start.x, middle.x, end.x) && isBetween(start.y, middle.y, end.y);\r\n\t}\r\n\t\r\n\tpublic static void swap(Point one, Point two) {\r\n\t\tdouble x = one.x;\r\n\t\tdouble y = one.y;\r\n\t\tone.setLocation(two.x, two.y);\r\n\t\ttwo.setLocation(x, y);\r\n\t}\r\n\t\r\n\tpublic static Point intersection(Point start1, Point end1, Point start2, Point end2) {\r\n\t\t/* Rearranging these so that, in order of x values: start is before end and point 1 is before point 2. \r\n\t\t * This will make some of the later logic simpler. */\r\n\t\tif (start1.x > end1.x) swap(start1, end1);\r\n\t\tif (start2.x > end2.x) swap(start2, end2);\r\n\t\tif (start1.x > start2.x) {\r\n\t\t\tswap(start1, start2);\r\n\t\t\tswap(end1, end2);\r\n\t\t}\r\n\t\t\r\n\t\t/* Compute lines (including slope and y-intercept). */\r\n\t\tLine line1 = new Line(start1, end1);\r\n\t\tLine line2 = new Line(start2, end2);\r\n\t\t\r\n\t\t/* If the lines are parallel, they intercept only if they have the same y intercept and start 2 is on line 1. */\r\n\t\tif (line1.slope == line2.slope) {\r\n\t\t\tif (line1.yintercept == line2.yintercept && isBetween(start1, start2, end1)) {\r\n\t\t\t\treturn start2;\r\n\t\t\t}\r\n\t\t\treturn null;\r\n\t\t}\r\n\t\t\r\n\t\t/* Get intersection coordinate. */\r\n\t\tdouble x =  (line2.yintercept - line1.yintercept) / (line1.slope - line2.slope);\r\n\t\tdouble y = x * line1.slope + line1.yintercept;\r\n\t\tPoint intersection = new Point(x, y);\r\n\t\t\r\n\t\t/* Check if within line segment range. */\r\n\t\tif (isBetween(start1, intersection, end1) && isBetween(start2, intersection, end2)) {\r\n\t\t\treturn intersection;\r\n\t\t}\r\n\t\treturn null;\r\n\t}\r\n\t\r\n\tpublic static void main(String[] args) {\r\n\t\tint[][] coordinates = {\r\n\t\t\t\t{8, 8}, {8, 16},\r\n\t\t\t\t{1, 1}, {1, 10}};\r\n\t\tPoint[] points = {createPoint(coordinates[0]), createPoint(coordinates[1]), createPoint(coordinates[2]), createPoint(coordinates[3])};\r\n\t\tPoint intersection = intersection(points[0], points[1], points[2], points[3]);\r\n\t\tif (intersection == null) {\r\n\t\t\tSystem.out.println(\"No intersection.\");\r\n\t\t} else {\r\n\t\t\tSystem.out.println(\"Intersection: \" + intersection.x + \", \" + intersection.y);\r\n\t\t}\r\n\t}\r\n\r\n}\r\n","Chapter":"Q16_03_Intersection"}