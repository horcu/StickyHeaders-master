{"Id":"e6a1c916-8762-4cc3-a484-ab652d61fd89","Topic":"QuestionB.java","Question":"","Solution":"package Q8_02_Robot_in_a_Grid;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.HashMap;\r\nimport java.util.HashSet;\r\n\r\nimport CtCILibrary.AssortedMethods;\r\n\r\npublic class QuestionB {\r\n\tpublic static ArrayList<Point> getPath(boolean[][] maze) {\r\n\t\tif (maze == null || maze.length == 0) return null;\r\n\t\tArrayList<Point> path = new ArrayList<Point>();\r\n\t\tHashSet<Point> failedPoints = new HashSet<Point>();\r\n\t\tif (getPath(maze, maze.length - 1, maze[0].length - 1, path, failedPoints)) {\r\n\t\t\treturn path;\r\n\t\t}\r\n\t\treturn null;\r\n\t}\r\n\t\r\n\tpublic static boolean getPath(boolean[][] maze, int row, int col, ArrayList<Point> path, HashSet<Point> failedPoints) {\r\n\t\t/* If out of bounds or not available, return.*/\r\n\t\tif (col < 0 || row < 0 || !maze[row][col]) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\t\r\n\t\tPoint p = new Point(row, col);\r\n\t\t\r\n\t\t/* If we've already visited this cell, return. */\r\n\t\tif (failedPoints.contains(p)) { \r\n\t\t\treturn false;\r\n\t\t}\t\r\n\t\t\r\n\t\tboolean isAtOrigin = (row == 0) && (col == 0);\r\n\t\t\r\n\t\t/* If there's a path from the start to my current location, add my location.*/\r\n\t\tif (isAtOrigin || getPath(maze, row, col - 1, path, failedPoints) || getPath(maze, row - 1, col, path, failedPoints)) {\r\n\t\t\tpath.add(p);\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\t\r\n\t\tfailedPoints.add(p); // Cache result\r\n\t\treturn false;\r\n\t}\r\n\t\r\n\tpublic static void main(String[] args) {\r\n\t\tint size = 20;\r\n\t\tboolean[][] maze = AssortedMethods.randomBooleanMatrix(size, size, 60);\r\n\t\t\r\n\t\tAssortedMethods.printMatrix(maze);\r\n\t\t\r\n\t\tArrayList<Point> path = getPath(maze);\r\n\t\tif (path != null) {\r\n\t\t\tSystem.out.println(path.toString());\r\n\t\t} else {\r\n\t\t\tSystem.out.println(\"No path found.\");\r\n\t\t}\r\n\t}\r\n\r\n}\r\n","Chapter":"Q8_02_Robot_in_a_Grid"}