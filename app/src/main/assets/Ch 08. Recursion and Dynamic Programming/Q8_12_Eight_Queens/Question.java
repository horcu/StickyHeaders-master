{"Id":"75b1d8ee-5ec1-4711-90b8-ce7ff2f84390","Topic":"Question.java","Question":"","Solution":"package Q8_12_Eight_Queens;\r\n\r\nimport java.util.ArrayList;\r\n\r\npublic class Question {\r\n\tpublic static int GRID_SIZE = 8;\r\n\t\r\n\t/* Check if (row1, column1) is a valid spot for a queen by checking if there\r\n\t * is a queen in the same column or diagonal. We don't need to check it for queens\r\n\t * in the same row because the calling placeQueen only attempts to place one queen at\r\n\t * a time. We know this row is empty. \r\n\t */\r\n\tpublic static boolean checkValid(Integer[] columns, int row1, int column1) {\r\n\t\tfor (int row2 = 0; row2 < row1; row2++) {\r\n\t\t\tint column2 = columns[row2];\r\n\t\t\t/* Check if (row2, column2) invalidates (row1, column1) as a queen spot. */\r\n\t\t\t\r\n\t\t\t/* Check if rows have a queen in the same column */\r\n\t\t\tif (column1 == column2) { \r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t/* Check diagonals: if the distance between the columns equals the distance\r\n\t\t\t * between the rows, then theyâ€™re in the same diagonal. */\r\n\t\t\tint columnDistance = Math.abs(column2 - column1); \r\n\t\t\tint rowDistance = row1 - row2; // row1 > row2, so no need to use absolute value\r\n\t\t    if (columnDistance == rowDistance) {\r\n\t\t    \treturn false;\r\n\t\t    }\r\n\t\t}\r\n\t\treturn true;\r\n\t}\r\n\t\r\n\tpublic static void placeQueens(int row, Integer[] columns, ArrayList<Integer[]> results) {\r\n\t\tif (row == GRID_SIZE) { // Found valid placement\r\n\t\t\tresults.add(columns.clone()); \r\n\t\t} else {\r\n\t\t\tfor (int col = 0; col < GRID_SIZE; col++) {\t\t\t\r\n\t\t\t\tif (checkValid(columns, row, col)) {\r\n\t\t\t\t\tcolumns[row] = col;\t// Place queen\r\n\t\t\t\t\tplaceQueens(row + 1, columns, results);\t\r\n\t\t\t\t}\t\t\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\tpublic static void clear(Integer[] columns) {\r\n\t\tfor (int i = 0; i < GRID_SIZE; i++) {\r\n\t\t\tcolumns[i] = -1;\r\n\t\t}\r\n\t}\r\n\t\r\n\tpublic static void printBoard(Integer[] columns) {\r\n        drawLine();\r\n        for(int i = 0; i < GRID_SIZE; i++){\r\n\t\t\tSystem.out.print(\"|\");\r\n\t\t\tfor (int j = 0; j < GRID_SIZE; j++){\r\n\t\t\t    if (columns[i] == j) {\r\n\t\t\t    \tSystem.out.print(\"Q|\");\r\n\t\t\t    } else {\r\n\t\t\t    \tSystem.out.print(\" |\");\r\n\t\t\t    }\r\n\t\t\t}\r\n            System.out.print(\"\\n\");\r\n            drawLine();\r\n\t\t}\r\n\t\tSystem.out.println(\"\");\r\n\t}\r\n\r\n    private static void drawLine() {\r\n        StringBuilder line = new StringBuilder();\r\n        for (int i=0;i<GRID_SIZE*2+1;i++)\r\n            line.append('-');\r\n        System.out.println(line.toString());\r\n    }\r\n\r\n\r\n\t\r\n\tpublic static void printBoards(ArrayList<Integer[]> boards) {\r\n\t\tfor (int i = 0; i < boards.size(); i++) {\r\n\t\t\tInteger[] board = boards.get(i);\r\n\t\t\tprintBoard(board);\r\n\t\t}\r\n\t}\r\n\t   \r\n\tpublic static void main(String[] args) {\r\n\t\tArrayList<Integer[]> results = new ArrayList<Integer[]>();\r\n\t\tInteger[] columns = new Integer[GRID_SIZE];\r\n\t\tclear(columns);\r\n\t\tplaceQueens(0, columns, results);\r\n\t\tprintBoards(results);\r\n\t\tSystem.out.println(results.size());\r\n\t}\r\n}\r\n","Chapter":"Q8_12_Eight_Queens"}