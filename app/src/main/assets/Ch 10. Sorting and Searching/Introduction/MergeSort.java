{"Id":"d31788f6-7da1-4348-86aa-6dd2dabe37a8","Topic":"MergeSort.java","Question":"","Solution":"package Introduction;\r\n\r\nimport CtCILibrary.AssortedMethods;\r\n\r\npublic class MergeSort {\t\r\n\tpublic static void mergesort(int[] array) {\r\n\t\tint[] helper = new int[array.length];\r\n\t\tmergesort(array, helper, 0, array.length - 1);\r\n\t}\r\n\r\n\tpublic static void mergesort(int[] array, int[] helper, int low, int high) {\r\n\t\tif (low < high) {\r\n\t\t\tint middle = (low + high) / 2;\r\n\t\t\tmergesort(array, helper, low, middle); // Sort left half\r\n\t\t\tmergesort(array, helper, middle+1, high); // Sort right half\r\n\t\t\tmerge(array, helper, low, middle, high); // Merge them\r\n\t\t}\r\n\t}\r\n\r\n\tpublic static void merge(int[] array, int[] helper, int low, int middle, int high) {\r\n\t\t/* Copy both halves into a helper array */\r\n\t\tfor (int i = low; i <= high; i++) {\r\n\t\t\thelper[i] = array[i];\r\n\t\t}\r\n\r\n\t\tint helperLeft = low;\r\n\t\tint helperRight = middle + 1;\r\n\t\tint current = low;\r\n\r\n\t\t/* Iterate through helper array. Compare the left and right\r\n\t\t * half, copying back the smaller element from the two halves\r\n\t\t * into the original array. */\r\n\t\twhile (helperLeft <= middle && helperRight <= high) {\r\n\t\t\tif (helper[helperLeft] <= helper[helperRight]) {\r\n\t\t\t\tarray[current] = helper[helperLeft];\r\n\t\t\t\thelperLeft++;\r\n\t\t\t} else { // If right element is smaller than left element\r\n\t\t\t\tarray[current] = helper[helperRight];\r\n\t\t\t\thelperRight++;\r\n\t\t\t}\r\n\t\t\tcurrent++;\r\n\t\t}\r\n\r\n\t\t/* Copy the rest of the left side of the array into the\r\n\t\t * target array */\r\n\t\tint remaining = middle - helperLeft;\r\n\t\tfor (int i = 0; i <= remaining; i++) {\r\n\t\t\tarray[current + i] = helper[helperLeft + i];\r\n\t\t}\r\n\t}\r\n\t\r\n\tpublic static void main(String[] args) {\r\n\t\tint size = 20;\r\n\t\tint[] array = AssortedMethods.randomArray(size, 0, size - 1);\r\n\t\tint[] validate = new int[size];\r\n\t\tAssortedMethods.printIntArray(array);\r\n\t\tfor (int i = 0; i < size; i++) {\r\n\t\t\tvalidate[array[i]]++;\r\n\t\t}\r\n\t\tmergesort(array);\r\n\t\tfor (int i = 0; i < size; i++) {\r\n\t\t\tvalidate[array[i]]--;\r\n\t\t}\t\t\r\n\t\tAssortedMethods.printIntArray(array);\r\n\t\tfor (int i = 0; i < size; i++) {\r\n\t\t\tif (validate[i] != 0 || (i < (size-1) && array[i] > array[i+1])) {\r\n\t\t\t\tSystem.out.println(\"ERROR\");\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n}\r\n","Chapter":"Introduction"}