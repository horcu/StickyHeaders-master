{"Id":"d1d120a7-411b-4043-a3b2-439e01e4f1a5","Topic":"QuestionB.java","Question":"","Solution":"package Q10_07_Missing_Int;\r\n\r\nimport java.io.*;\r\nimport java.util.*;\r\n\r\npublic class QuestionB {\r\n\r\n\tpublic static int findOpenNumber(String filename) throws FileNotFoundException {\r\n\t\tint rangeSize = (1 << 20); // 2^20 bits (2^17 bytes)\r\n\t\t\r\n\t\t/* Get count of number of values within each block. */\r\n\t\tint[] blocks = getCountPerBlock(filename, rangeSize);\r\n\t\t\r\n\t\t/* Find a block with a missing value. */\r\n\t\tint blockIndex = findBlockWithMissing(blocks, rangeSize);\r\n\t\tif (blockIndex < 0) return -1;\r\n\t\t\r\n\t\t/* Create bit vector for items within this range. */\r\n\t\tbyte[] bitVector = getBitVectorForRange(filename, blockIndex, rangeSize);\r\n\t\t\r\n\t\t/* Find a zero in the bit vector */\r\n\t\tint offset = findZero(bitVector);\r\n\t\tif (offset < 0) return -1;\r\n\t\t\r\n\t\t/* Compute missing value. */\r\n\t\treturn blockIndex * rangeSize + offset;\r\n\t}\r\n\t\r\n\t/* Get count of items within each range. */\r\n\tpublic static int[] getCountPerBlock(String filename, int rangeSize) throws FileNotFoundException {\r\n\t\tint arraySize = Integer.MAX_VALUE / rangeSize + 1;\r\n\t\tint[] blocks = new int[arraySize];\r\n\t\t\r\n\t\tScanner in = new Scanner (new FileReader(filename));\r\n\t\twhile (in.hasNextInt()) {\r\n\t\t    int value = in.nextInt();\r\n\t\t    blocks[value / rangeSize]++;\r\n\t\t}\r\n\t\tin.close();\r\n\t\treturn blocks;\r\n\t}\r\n\t\r\n\t/* Find a block whose count is low. */\r\n\tpublic static int findBlockWithMissing(int[] blocks, int rangeSize) {\r\n\t\tfor (int i = 0; i < blocks.length; i++) {\r\n\t\t\tif (blocks[i] < rangeSize){\r\n\t\t\t\treturn i;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn -1;\r\n\t}\r\n\t\r\n\t/* Create a bit vector for the values within a specific range. */\r\n\tpublic static byte[] getBitVectorForRange(String filename, int blockIndex, int rangeSize) throws FileNotFoundException {\r\n\t\tint startRange = blockIndex * rangeSize;\r\n\t\tint endRange = startRange + rangeSize;\r\n\t\tbyte[] bitVector = new byte[rangeSize/Byte.SIZE];\r\n\t\t\r\n\t\tScanner in = new Scanner(new FileReader(filename));\r\n\t\twhile (in.hasNextInt()) {\r\n\t\t\tint value = in.nextInt();\r\n\t\t\t/* If the number is inside the block that's missing \r\n\t\t\t * numbers, we record it */\r\n\t\t\tif (startRange <= value && value < endRange) {\r\n\t\t\t\tint offset = value - startRange;\r\n\t\t\t\tint mask = (1 << (offset % Byte.SIZE));\r\n\t\t\t\tbitVector[offset / Byte.SIZE] |= mask;\r\n\t\t\t}\r\n\t\t}\r\n\t\tin.close();\r\n\t\treturn bitVector;\r\n\t}\r\n\t\r\n\t/* Find bit index that is 0 within byte. */\r\n\tpublic static int findZero(byte b) {\r\n\t\tfor (int i = 0; i < Byte.SIZE; i++) {\r\n\t\t\tint mask = 1 << i;\r\n\t\t\tif ((b & mask) == 0) {\r\n\t\t\t\treturn i;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn -1;\r\n\t}\r\n\t\r\n\t/* Find a zero within the bit vector and return the index. */\r\n\tpublic static int findZero(byte[] bitVector) {\r\n\t\tfor (int i = 0; i < bitVector.length; i++) {\r\n\t\t\tif (bitVector[i] != ~0) { // If not all 1s\r\n\t\t\t\tint bitIndex = findZero(bitVector[i]);\r\n\t\t\t\treturn i * Byte.SIZE + bitIndex;\r\n\t\t\t}\r\n\t\t}\t\t\r\n\t\treturn -1;\r\n\t}\r\n\t\t\r\n\tpublic static void generateFile(String filename, int max, int missing) throws FileNotFoundException {\r\n\t\tPrintWriter writer = new PrintWriter(filename);\r\n\r\n\t\tfor (int i = 0; i < max && i >= 0; i++) {\r\n\t\t\tif (i != missing) {\r\n\t\t\t\twriter.println(i);\r\n\t\t\t}\r\n\t\t\tif (i % 10000 == 0) {\r\n\t\t\t\tSystem.out.println(\"Now at location: \" + i);\r\n\t\t\t}\r\n\t\t}\r\n\t\twriter.flush();\r\n\t\twriter.close();\t\t\r\n\t}\r\n\t\r\n\tpublic static void main(String[] args) throws FileNotFoundException {\r\n\t\tString filename = \"Ch 10. Scalability and Memory Limits/Q10_04_Missing_Int/input.txt\";\r\n\t\tint max = 10000000;\r\n\t\tint missing = 1234325;\r\n\t\tSystem.out.println(\"Generating file...\");\r\n\t\tgenerateFile(filename, max, missing);\r\n\t\tSystem.out.println(\"Generated file from 0 to \" + max + \" with \" + missing + \" missing.\");\r\n\t\tSystem.out.println(\"Searching for missing number...\");\r\n\t\tSystem.out.println(\"Missing value: \" + findOpenNumber(filename));\r\n\t}\r\n\r\n}\r\n","Chapter":"Q10_07_Missing_Int"}