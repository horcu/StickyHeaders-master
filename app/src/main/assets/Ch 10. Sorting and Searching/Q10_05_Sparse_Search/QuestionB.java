{"Id":"3c6f1b96-bd25-47e0-906a-ec5e0877332b","Topic":"QuestionB.java","Question":"","Solution":"package Q10_05_Sparse_Search;\r\n\r\npublic class QuestionB {\r\n\tpublic static int searchI(String[] strings, String str, int first, int last) {\r\n\t\twhile (first <= last) {\r\n\t\t\t/* Move mid to the middle */\r\n\t\t\tint mid = (last + first) / 2;\r\n\t\t\t\r\n\t\t\t/* If mid is empty, find closest non-empty string */\r\n\t\t\tif (strings[mid].isEmpty()) { \r\n\t\t\t\tint left = mid - 1;\r\n\t\t\t\tint right = mid + 1;\r\n\t\t\t\twhile (true) {\r\n\t\t\t\t\tif (left < first && right > last) {\r\n\t\t\t\t\t\treturn -1;\r\n\t\t\t\t\t} else if (right <= last && !strings[right].isEmpty()) {\r\n\t\t\t\t\t\tmid = right;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t} else if (left >= first && !strings[left].isEmpty()) {\r\n\t\t\t\t\t\tmid = left;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tright++;\r\n\t\t\t\t\tleft--;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tint res = strings[mid].compareTo(str);\r\n\t\t\tif (res == 0) { // Found it!\r\n\t\t\t\treturn mid;\r\n\t\t\t} else if (res < 0) { // Search right\r\n\t\t\t\tfirst = mid + 1;\r\n\t\t\t} else { // Search left\r\n\t\t\t\tlast = mid - 1;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn -1;\r\n\t}\t\r\n\t\r\n\tpublic static int searchR(String[] strings, String str, int first, int last) {\r\n\t\tif (first > last) {\r\n\t\t\treturn -1;\r\n\t\t}\r\n\t\t\r\n\t\t/* Move mid to the middle */\r\n\t\tint mid = (last + first) / 2;\r\n\t\t\r\n\t\t/* If mid is empty, find closest non-empty string. */\r\n\t\tif (strings[mid].isEmpty()) { \r\n\t\t\tint left = mid - 1;\r\n\t\t\tint right = mid + 1;\r\n\t\t\twhile (true) {\r\n\t\t\t\tif (left < first && right > last) {\r\n\t\t\t\t\treturn -1;\r\n\t\t\t\t} else if (right <= last && !strings[right].isEmpty()) {\r\n\t\t\t\t\tmid = right;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t} else if (left >= first && !strings[left].isEmpty()) {\r\n\t\t\t\t\tmid = left;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\tright++;\r\n\t\t\t\tleft--;\r\n\t\t\t}\r\n\t\t}\r\n\t\t\t\r\n\t\t/* Check for string, and recurse if necessary */\r\n\t\tif (str.equals(strings[mid])) { // Found it!\r\n\t\t\treturn mid;\r\n\t\t} else if (strings[mid].compareTo(str) < 0) { // Search right\r\n\t\t\treturn searchR(strings, str, mid + 1, last);\r\n\t\t} else { // Search left\r\n\t\t\treturn searchR(strings, str, first, mid - 1);\r\n\t\t}\r\n\t}\t\r\n\t\t\r\n\tpublic static int search(String[] strings, String str) {\r\n\t\tif (strings == null || str == null || str.isEmpty()) {\r\n\t\t\treturn -1;\r\n\t\t}\r\n\t\treturn searchR(strings, str, 0, strings.length - 1);\r\n\t}\r\n\t\r\n\tpublic static void main(String[] args) {\r\n        String[] stringList = {\"apple\", \"\", \"\", \"banana\", \"\", \"\", \"\", \"carrot\", \"duck\", \"\", \"\", \"eel\", \"\", \"flower\"};\r\n        System.out.println(search(stringList, \"ac\"));\r\n        \r\n\t\t//for (String s : stringList) {\r\n\t\t//\tString cloned = new String(s);\r\n        //\tSystem.out.println(\"<\" + cloned + \"> \" + \" appears at location \" + search(stringList, cloned));\r\n\t\t//}\r\n\t}\r\n}\r\n","Chapter":"Q10_05_Sparse_Search"}