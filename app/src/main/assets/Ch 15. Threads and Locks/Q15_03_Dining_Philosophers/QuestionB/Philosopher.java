{"Id":"6394b827-a147-4921-879f-84f6f30d4cfc","Topic":"Philosopher.java","Question":"","Solution":"package Q15_03_Dining_Philosophers.QuestionB;\r\n\r\nimport CtCILibrary.AssortedMethods;\r\n\r\npublic class Philosopher extends Thread {\r\n\tprivate final int maxPause = 100;\r\n\tprivate int bites = 10;\r\n\t\r\n\tprivate Chopstick lower;\r\n\tprivate Chopstick higher;\r\n\tprivate int index;\r\n\tpublic Philosopher(int i, Chopstick left, Chopstick right) {\r\n\t\tindex = i;\r\n\t\tif (left.getNumber() < right.getNumber()) {\r\n\t\t\tthis.lower = left;\r\n\t\t\tthis.higher = right;\r\n\t\t} else {\r\n\t\t\tthis.lower = right;\r\n\t\t\tthis.higher = left;\r\n\t\t}\r\n\t}\r\n\t\r\n\tpublic void eat() {\r\n\t\tSystem.out.println(\"Philosopher \" + index + \": start eating\");\r\n\t\tpickUp();\r\n\t\tchew();\r\n\t\tputDown();\r\n\t\tSystem.out.println(\"Philosopher \" + index + \": done eating\");\r\n\t}\r\n\t\r\n\tpublic void pickUp() {\r\n\t\tpause();\r\n\t\tlower.pickUp();\r\n\t\tpause();\r\n\t\thigher.pickUp();\r\n\t\tpause();\r\n\t}\r\n\t\r\n\tpublic void chew() {\r\n\t\tSystem.out.println(\"Philosopher \" + index + \": eating\");\r\n\t\tpause();\r\n\t}\r\n\t\r\n\tpublic void pause() {\r\n\t\ttry {\r\n\t\t\tint pause = AssortedMethods.randomIntInRange(0, maxPause);\r\n\t\t\tThread.sleep(pause);\r\n\t\t} catch (InterruptedException e) {\r\n\t\t\te.printStackTrace();\r\n\t\t}\r\n\t}\r\n\t\r\n\tpublic void putDown() {\r\n\t\thigher.putDown();\r\n\t\tlower.putDown();\r\n\t}\r\n\t\r\n\tpublic void run() {\r\n\t\tfor (int i = 0; i < bites; i++) {\r\n\t\t\teat();\r\n\t\t}\r\n\t}\r\n}\r\n","Chapter":"QuestionB"}