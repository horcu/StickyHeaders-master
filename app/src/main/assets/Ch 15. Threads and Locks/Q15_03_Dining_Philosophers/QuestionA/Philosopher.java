{"Id":"96c082e2-3080-46e3-95f6-d51daff3189f","Topic":"Philosopher.java","Question":"","Solution":"package Q15_03_Dining_Philosophers.QuestionA;\r\n\r\nimport CtCILibrary.AssortedMethods;\r\n\r\npublic class Philosopher extends Thread {\r\n\tprivate final int maxPause = 100;\r\n\tprivate int bites = 10;\r\n\t\r\n\tprivate Chopstick left;\r\n\tprivate Chopstick right;\r\n\tprivate int index;\r\n\tpublic Philosopher(int i, Chopstick left, Chopstick right) {\r\n\t\tindex = i;\r\n\t\tthis.left = left;\r\n\t\tthis.right = right;\r\n\t}\r\n\t\r\n\tpublic void eat() {\r\n\t\tSystem.out.println(\"Philosopher \" + index + \": start eating\");\r\n\t\tif (pickUp()) {\r\n\t\t\tchew();\r\n\t\t\tputDown();\r\n\t\t\tSystem.out.println(\"Philosopher \" + index + \": done eating\");\r\n\t\t} else {\r\n\t\t\tSystem.out.println(\"Philosopher \" + index + \": gave up on eating\");\r\n\t\t}\r\n\t}\r\n\t\r\n\tpublic boolean pickUp() {\r\n\t\tpause();\r\n\t\tif (!left.pickUp()) {\r\n\t\t\treturn false;\r\n\t\t} \r\n\t\tpause();\r\n\t\tif (!right.pickUp()) {\r\n\t\t\tleft.putDown();\r\n\t\t\treturn false;\r\n\t\t} \r\n\t\tpause();\r\n\t\treturn true;\r\n\t}\r\n\t\r\n\tpublic void chew() {\r\n\t\tSystem.out.println(\"Philosopher \" + index + \": eating\");\r\n\t\tpause();\r\n\t}\r\n\t\r\n\tpublic void pause() {\r\n\t\ttry {\r\n\t\t\tint pause = AssortedMethods.randomIntInRange(0, maxPause);\r\n\t\t\tThread.sleep(pause);\r\n\t\t} catch (InterruptedException e) {\r\n\t\t\te.printStackTrace();\r\n\t\t}\r\n\t}\r\n\t\r\n\tpublic void putDown() {\r\n\t\tright.putDown();\r\n\t\tleft.putDown();\r\n\t}\r\n\t\r\n\tpublic void run() {\r\n\t\tfor (int i = 0; i < bites; i++) {\r\n\t\t\teat();\r\n\t\t}\r\n\t}\r\n}\r\n","Chapter":"QuestionA"}