{"Id":"d1dfc812-1d2e-4615-a605-1618a937772b","Topic":"Board.java","Question":"","Solution":"package Q7_10_Minesweeper;\n\nimport java.util.LinkedList;\nimport java.util.Queue;\nimport java.util.Random;\n\nimport Q7_10_Minesweeper.Game.GameState;\n\npublic class Board {\n\tprivate int nRows;\n\tprivate int nColumns;\n\tprivate int nBombs = 0;\n\tprivate Cell[][] cells; \n\tprivate Cell[] bombs;\n\tprivate int numUnexposedRemaining;\n\t\n\t\n\tpublic Board(int r, int c, int b) {\n\t\tnRows = r;\n\t\tnColumns = c;\n\t\tnBombs = b;\n\t\t\n\t\tinitializeBoard();\n\t\tshuffleBoard();\n\t\tsetNumberedCells();\n\t\t\n\t\tnumUnexposedRemaining = nRows * nColumns - nBombs;\n\t}\n\t\n\tprivate void initializeBoard() {\n\t\tcells = new Cell[nRows][nColumns];\n\t\tbombs = new Cell[nBombs];\n\t\tfor (int r = 0; r < nRows; r++) {\n\t\t\tfor (int c = 0; c < nColumns; c++) {\n\t\t\t\tcells[r][c] = new Cell(r, c);\n\t\t\t}\n\t\t}\n\t\t\n\t\tfor (int i = 0; i < nBombs; i++) {\n\t\t\tint r = i / nColumns;\n\t\t\tint c = (i - r * nColumns) % nColumns;\n\t\t\tbombs[i] = cells[r][c];\n\t\t\tbombs[i].setBomb(true);\n\t\t}\n\t}\n\t\n\tprivate void shuffleBoard() {\n\t\tint nCells = nRows * nColumns;\n\t\tRandom random = new Random();\n\t\tfor (int index1 = 0; index1 < nCells; index1++) {\n\t\t\tint index2 = index1 + random.nextInt(nCells - index1);\n\t\t\tif (index1 != index2) {\n\t\t\t\t/* Get cell at index1. */\n\t\t\t\tint row1 = index1 / nColumns;\n\t\t\t\tint column1 = (index1 - row1 * nColumns) % nColumns;\n\t\t\t\tCell cell1 = cells[row1][column1];\n\t\t\t\t\n\t\t\t\t/* Get cell at index2. */\n\t\t\t\tint row2 = index2 / nColumns;\n\t\t\t\tint column2 = (index2 - row2 * nColumns) % nColumns;\n\t\t\t\tCell cell2 = cells[row2][column2];\n\t\t\t\t\n\t\t\t\t/* Swap. */\n\t\t\t\tcells[row1][column1] = cell2;\n\t\t\t\tcell2.setRowAndColumn(row1, column1);\n\t\t\t\tcells[row2][column2] = cell1;\n\t\t\t\tcell1.setRowAndColumn(row2, column2);\t\t\t\t\n\t\t\t}\n\t\t}\n\t}\n\t\n\tprivate boolean inBounds(int row, int column) {\n\t\treturn row >= 0 && row < nRows && column >= 0 && column < nColumns;\n\t}\n\t\n\t/* Set the cells around the bombs to the right number. Although \n\t * the bombs have been shuffled, the reference in the bombs array\n\t * is still to same object. */\n\tprivate void setNumberedCells() {\n\t\tint[][] deltas = { // Offsets of 8 surrounding cells\n\t\t\t\t{-1, -1}, {-1, 0}, {-1, 1},\n\t\t\t\t{ 0, -1},          { 0, 1},\n\t\t\t\t{ 1, -1}, { 1, 0}, { 1, 1}\n\t\t};\n\t\tfor (Cell bomb : bombs) {\n\t\t\tint row = bomb.getRow();\n\t\t\tint col = bomb.getColumn();\n\t\t\tfor (int[] delta : deltas) {\n\t\t\t\tint r = row + delta[0];\n\t\t\t\tint c = col + delta[1];\n\t\t\t\tif (inBounds(r, c)) {\n\t\t\t\t\tcells[r][c].incrementNumber();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\tpublic void printBoard(boolean showUnderside) {\n\t\tSystem.out.println();\n\t\tSystem.out.print(\"   \");\n\t\tfor (int i = 0; i < nColumns; i++) {\n\t\t\tSystem.out.print(i + \" \");\n\t\t}\n\t\tSystem.out.println();\n\t\tfor (int i = 0; i < nColumns; i++) {\n\t\t\tSystem.out.print(\"--\");\n\t\t}\t\t\n\t\tSystem.out.println();\n\t\tfor (int r = 0; r < nRows; r++) {\n\t\t\tSystem.out.print(r + \"| \");\n\t\t\tfor (int c = 0; c < nColumns; c++) {\n\t\t\t\tif (showUnderside) {\n\t\t\t\t\tSystem.out.print(cells[r][c].getUndersideState());\n\t\t\t\t} else {\n\t\t\t\t\tSystem.out.print(cells[r][c].getSurfaceState());\n\t\t\t\t}\n\t\t\t}\n\t\t\tSystem.out.println();\n\t\t}\n\t}\n\t\n\tprivate boolean flipCell(Cell cell) {\n\t\tif (!cell.isExposed() && !cell.isGuess()) {\n\t\t\tcell.flip();\n\t\t\tnumUnexposedRemaining--;\n\t\t\treturn true;\n\t\t} \n\t\treturn false;\n\t}\n\t\n\tpublic void expandBlank(Cell cell) {\n\t\tint[][] deltas = {\n\t\t\t\t{-1, -1}, {-1, 0}, {-1, 1},\n\t\t\t\t{ 0, -1},          { 0, 1},\n\t\t\t\t{ 1, -1}, { 1, 0}, { 1, 1}\n\t\t};\t\t\n\t\t\n\t\tQueue<Cell> toExplore = new LinkedList<Cell>();\n\t\ttoExplore.add(cell);\n\t\t\n\t\twhile (!toExplore.isEmpty()) {\n\t\t\tCell current = toExplore.remove();\n\t\t\t\n\t\t\tfor (int[] delta : deltas) {\n\t\t\t\tint r = current.getRow() + delta[0];\n\t\t\t\tint c = current.getColumn() + delta[1];\n\t\t\t\t\n\t\t\t\tif (inBounds(r, c)) {\n\t\t\t\t\tCell neighbor = cells[r][c];\n\t\t\t\t\tif (flipCell(neighbor) && neighbor.isBlank()) {\n\t\t\t\t\t\ttoExplore.add(neighbor);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\t\t\t\n\t\t}\n\t}\n\t\n\tpublic UserPlayResult playFlip(UserPlay play) {\n\t\tCell cell = getCellAtLocation(play);\n\t\tif (cell == null) {\n\t\t\treturn new UserPlayResult(false, GameState.RUNNING);\n\t\t}\n\t\t\n\t\tif (play.isGuess()) {\n\t\t\tboolean guessResult = cell.toggleGuess();\n\t\t\treturn new UserPlayResult(guessResult, GameState.RUNNING);\n\t\t}\n\t\t\n\t\tboolean result = flipCell(cell);\n\t\t\n\t\tif (cell.isBomb()) {\n\t\t\treturn new UserPlayResult(result, GameState.LOST);\n\t\t}\n\t\t\n\t\tif (cell.isBlank()) {\n\t\t\texpandBlank(cell);\n\t\t}\n\t\t\n\t\tif (numUnexposedRemaining == 0) {\n\t\t\treturn new UserPlayResult(result, GameState.WON);\n\t\t} \n\t\t\n\t\treturn new UserPlayResult(result, GameState.RUNNING);\n\t}\n\t\n\tpublic Cell getCellAtLocation(UserPlay play) {\n\t\tint row = play.getRow();\n\t\tint col = play.getColumn();\n\t\tif (!inBounds(row, col)) {\n\t\t\treturn null;\n\t\t}\n\t\treturn cells[row][col];\t\t\n\t}\n\t\n\tpublic int getNumRemaining() {\n\t\treturn numUnexposedRemaining;\n\t}\n}\n","Chapter":"Q7_10_Minesweeper"}