{"Id":"a10619dd-767c-44a5-a2cd-3e989265b45c","Topic":"ParkingSpot.java","Question":"","Solution":"package Q7_04_Parking_Lot;\r\n\r\npublic class ParkingSpot {\r\n\tprivate Vehicle vehicle;\r\n\tprivate VehicleSize spotSize;\r\n\tprivate int row;\r\n\tprivate int spotNumber;\r\n\tprivate Level level;\r\n\t\r\n\tpublic ParkingSpot(Level lvl, int r, int n, VehicleSize sz) {\r\n\t\tlevel = lvl;\r\n\t\trow = r;\r\n\t\tspotNumber = n;\r\n\t\tspotSize = sz;\r\n\t}\r\n\t\r\n\tpublic boolean isAvailable() {\r\n\t\treturn vehicle == null;\r\n\t}\r\n\t\r\n\t/* Checks if the spot is big enough for the vehicle (and is available). This compares\r\n\t * the SIZE only. It does not check if it has enough spots. */\r\n\tpublic boolean canFitVehicle(Vehicle vehicle) {\r\n\t\treturn isAvailable() && vehicle.canFitInSpot(this);\r\n\t}\r\n\t\r\n\t/* Park vehicle in this spot. */\r\n\tpublic boolean park(Vehicle v) {\r\n\t\tif (!canFitVehicle(v)) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tvehicle = v;\r\n\t\tvehicle.parkInSpot(this);\r\n\t\treturn true;\r\n\t}\r\n\t\r\n\tpublic int getRow() {\r\n\t\treturn row;\r\n\t}\r\n\t\r\n\tpublic int getSpotNumber() {\r\n\t\treturn spotNumber;\r\n\t}\r\n\t\r\n\tpublic VehicleSize getSize() {\r\n\t\treturn spotSize;\r\n\t}\r\n\t\r\n\t/* Remove vehicle from spot, and notify level that a new spot is available */\r\n\tpublic void removeVehicle() {\r\n\t\tlevel.spotFreed();\r\n\t\tvehicle = null;\r\n\t}\r\n\t\r\n\tpublic void print() {\r\n\t\tif (vehicle == null) {\r\n\t\t\tif (spotSize == VehicleSize.Compact) {\r\n\t\t\t\tSystem.out.print(\"c\");\r\n\t\t\t} else if (spotSize == VehicleSize.Large) {\r\n\t\t\t\tSystem.out.print(\"l\");\r\n\t\t\t} else if (spotSize == VehicleSize.Motorcycle) {\r\n\t\t\t\tSystem.out.print(\"m\");\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tvehicle.print();\r\n\t\t}\r\n\t}\r\n}\r\n","Chapter":"Q7_04_Parking_Lot"}