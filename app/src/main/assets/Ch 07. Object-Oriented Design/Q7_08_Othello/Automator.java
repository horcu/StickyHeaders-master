{"Id":"bee4a8c3-3fcc-49d7-beb9-014d064c9732","Topic":"Automator.java","Question":"","Solution":"package Q7_08_Othello;\r\n\r\nimport java.util.ArrayList;\r\n\r\nimport CtCILibrary.AssortedMethods;\r\n\r\n/* A helper class to automate this game. This is just used for testing purposes. */\r\npublic class Automator {\r\n\tprivate Player[] players;\r\n\tprivate Player lastPlayer = null;\r\n\tpublic ArrayList<Location> remainingMoves = new ArrayList<Location>();\r\n\tprivate static Automator instance;\r\n\t\r\n\tprivate Automator() {\r\n\t\tfor (int i = 0; i < 10; i++) {\r\n\t\t\tfor (int j = 0; j < 10; j++) {\r\n\t\t\t\tLocation loc = new Location(i, j);\r\n\t\t\t\tremainingMoves.add(loc);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\tpublic static Automator getInstance() {\r\n\t\tif (instance == null) {\r\n\t\t\tinstance = new Automator();\r\n\t\t}\r\n\t\treturn instance;\r\n\t}\r\n\t\r\n\tpublic void initialize(Player[] ps) {\r\n\t\tplayers = ps;\r\n\t\tlastPlayer = players[1];\r\n\t}\r\n\t\r\n\tpublic void shuffle() {\r\n\t\tfor (int i = 0; i < remainingMoves.size(); i++) {\r\n\t\t\tint t = AssortedMethods.randomIntInRange(i, remainingMoves.size() - 1);\r\n\t\t\tLocation other = remainingMoves.get(t);\r\n\t\t\tLocation current = remainingMoves.get(i);\r\n\t\t\tremainingMoves.set(t, current);\r\n\t\t\tremainingMoves.set(i, other);\r\n\t\t}\r\n\t}\r\n\t\r\n\tpublic void removeLocation(int r, int c) {\r\n\t\tfor (int i = 0; i < remainingMoves.size(); i++) {\r\n\t\t\tLocation loc = remainingMoves.get(i);\r\n\t\t\tif (loc.isSameAs(r, c)) {\r\n\t\t\t\tremainingMoves.remove(i);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\tpublic Location getLocation(int index) {\r\n\t\treturn remainingMoves.get(index);\r\n\t}\r\n\t\r\n\tpublic boolean playRandom() {\r\n\t\tBoard board = Game.getInstance().getBoard();\r\n\t\tshuffle();\r\n\t\tlastPlayer = lastPlayer == players[0] ? players[1] : players[0];\r\n\t\tString color = lastPlayer.getColor().toString();\r\n\t\tfor (int i = 0; i < remainingMoves.size(); i++) {\r\n\t\t\tLocation loc = remainingMoves.get(i);\r\n\t\t\tboolean success = lastPlayer.playPiece(loc.getRow(), loc.getColumn());\r\n\t\t\t\r\n\t\t\tif (success) {\r\n\t\t\t\tSystem.out.println(\"Success: \" + color + \" move at (\" + loc.getRow() + \", \" + loc.getColumn() + \")\");\r\n\t\t\t\tboard.printBoard();\r\n\t\t\t\tprintScores();\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t}\r\n\t\tSystem.out.println(\"Game over. No moves found for \" + color);\r\n\t\treturn false;\r\n\t}\t\r\n\t\r\n\tpublic boolean isOver() {\r\n\t\tif (players[0].getScore() == 0 || players[1].getScore() == 0) {\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\t\r\n\tpublic void printScores() {\r\n\t\tSystem.out.println(\"Score: \" + players[0].getColor().toString() + \": \" + players[0].getScore() + \", \" + players[1].getColor().toString() + \": \" + players[1].getScore());\r\n\t}\r\n}\r\n","Chapter":"Q7_08_Othello"}