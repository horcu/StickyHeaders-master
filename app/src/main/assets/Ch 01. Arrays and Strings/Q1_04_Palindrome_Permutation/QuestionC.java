{"Id":"2217b611-3307-4123-9d27-4e6c6bb04777","Topic":"QuestionC.java","Question":"","Solution":"package Q1_04_Palindrome_Permutation;\n\npublic class QuestionC {\n\t/* Toggle the ith bit in the integer. */\n\tpublic static int toggle(int bitVector, int index) {\n\t\tif (index < 0) return bitVector;\n\t\t\n\t\tint mask = 1 << index;\n\t\tif ((bitVector & mask) == 0) {\n\t\t\tbitVector |= mask;\n\t\t} else {\n\t\t\tbitVector &= ~mask;\n\t\t}\n\t\treturn bitVector;\n\t}\n\t\n\t/* Create bit vector for string. For each letter with value i,\n\t * toggle the ith bit. */\n\tpublic static int createBitVector(String phrase) {\n\t\tint bitVector = 0;\n\t\tfor (char c : phrase.toCharArray()) {\n\t\t\tint x = Common.getCharNumber(c);\n\t\t\tbitVector = toggle(bitVector, x);\n\t\t}\n\t\treturn bitVector;\n\t}\n\t\n\t/* Check that exactly one bit is set by subtracting one from the \n\t * integer and ANDing it with the original integer. */\n\tpublic static boolean checkExactlyOneBitSet(int bitVector) {\n\t\treturn (bitVector & (bitVector - 1)) == 0;\n\t}\n\t\n\tpublic static boolean isPermutationOfPalindrome(String phrase) {\n\t\tint bitVector = createBitVector(phrase);\n\t\treturn bitVector == 0 || checkExactlyOneBitSet(bitVector);\n\t}\n\t\n\tpublic static void main(String[] args) {\n\t\tString pali = \"Rats live on no evil star\";\n\t\tSystem.out.println(isPermutationOfPalindrome(pali));\n\t}\n\n}\n","Chapter":"Q1_04_Palindrome_Permutation"}