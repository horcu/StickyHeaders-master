{"Id":"20b40ead-3939-4d0e-87b5-c308fdb1d62b","Topic":"MyQueue.java","Question":"","Solution":"package Q3_04_Queue_via_Stacks;\r\n\r\nimport java.util.Stack;\r\n\r\npublic class MyQueue<T> {\r\n\tStack<T> stackNewest, stackOldest;\r\n\t\r\n\tpublic MyQueue() {\r\n\t\tstackNewest = new Stack<T>();\r\n\t\tstackOldest = new Stack<T>();\r\n\t}\r\n\t\r\n\tpublic int size() {\r\n\t\treturn stackNewest.size() + stackOldest.size();\r\n\t}\r\n\t\r\n\tpublic void add(T value) {\r\n\t\t// Push onto stack1\r\n\t\tstackNewest.push(value);\r\n\t}\r\n\t\r\n\t/* Move elements from stackNewest into stackOldest. This is usually done so that we can\r\n\t * do operations on stackOldest.\r\n\t */\r\n\tprivate void shiftStacks() {\r\n\t\tif (stackOldest.isEmpty()) { \r\n\t\t\twhile (!stackNewest.isEmpty()) {\r\n\t\t\t\tstackOldest.push(stackNewest.pop());\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\tpublic T peek() {\r\n\t\tshiftStacks();\r\n\t\treturn stackOldest.peek(); // retrieve the oldest item.\r\n\t}\r\n\t\r\n\tpublic T remove() {\r\n\t\tshiftStacks();\r\n\t\treturn stackOldest.pop(); // pop the oldest item.\r\n\t}\r\n}\r\n","Chapter":"Q3_04_Queue_via_Stacks"}