{"Id":"cc1fe3fb-f120-4339-9e07-a500a52d32a8","Topic":"FixedMultiStack.java","Question":"","Solution":"package Q3_01_Three_in_One;\r\n\r\nimport java.util.EmptyStackException;\r\n\r\nimport CtCILibrary.AssortedMethods;\r\n\r\npublic class FixedMultiStack {\r\n\tprivate int numberOfStacks = 3;\r\n\tprivate int stackCapacity;\r\n\tprivate int[] values;\r\n\tprivate int[] sizes;\r\n\t\r\n\tpublic FixedMultiStack(int stackSize) {\r\n\t\tstackCapacity = stackSize;\r\n\t\tvalues = new int[stackSize * numberOfStacks];\r\n\t\tsizes = new int[numberOfStacks];\r\n\t}\r\n\r\n\t/* Push value onto stack. */\r\n\tpublic void push(int stackNum, int value) throws FullStackException {\r\n\t\t/* Check that we have space for the next element */\r\n\t\tif (isFull(stackNum)) { \r\n\t\t\tthrow new FullStackException();\r\n\t\t}\r\n\t\t\r\n\t\t/* Increment stack pointer and then update top value. */\t\t\r\n\t\tsizes[stackNum]++;\r\n\t\tvalues[indexOfTop(stackNum)] = value;\t\r\n\t}\r\n\r\n\t/* Pop item from top stack. */\r\n\tpublic int pop(int stackNum) {\r\n\t\tif (isEmpty(stackNum)) {\r\n\t\t\tthrow new EmptyStackException();\r\n\t\t}\r\n\t\t\r\n\t\tint topIndex = indexOfTop(stackNum);\r\n\t\tint value = values[topIndex]; // Get top\r\n\t\tvalues[topIndex] = 0; // Clear \r\n\t\tsizes[stackNum]--; // Shrink\r\n\t\treturn value;\r\n\t}\r\n\r\n\t/* Return top element. */\r\n\tpublic int peek(int stackNum) {\r\n\t\tif (isEmpty(stackNum)) {\r\n\t\t\tthrow new EmptyStackException();\r\n\t\t}\t\t\r\n\t\treturn values[indexOfTop(stackNum)];\r\n\t}\r\n\r\n\t/* Return if stack is empty. */\r\n\tpublic boolean isEmpty(int stackNum) {\r\n\t\treturn sizes[stackNum] == 0;\r\n\t}\r\n\t\r\n\t/* Return if stack is full. */\r\n\tpublic boolean isFull(int stackNum) {\r\n\t\treturn sizes[stackNum] == stackCapacity;\r\n\t}\r\n\t\r\n\t/* Returns index of the top of the stack. */\r\n\tprivate int indexOfTop(int stackNum) {\r\n\t\tint offset = stackNum * stackCapacity;\r\n\t\tint size = sizes[stackNum];\r\n\t\treturn offset + size - 1;\r\n\t}\t\r\n\t\r\n\tpublic int[] getValues() {\r\n\t\treturn values;\r\n\t}\r\n\t\r\n\tpublic int[] getStackValues(int stackNum) {\r\n\t\tint[] items = new int[sizes[stackNum]];\r\n\t\tfor (int i = 0; i < items.length; i++) {\r\n\t\t\titems[i] = values[stackNum * stackCapacity + i];\r\n\t\t}\r\n\t\treturn items;\r\n\t}\r\n\t\r\n\tpublic String stackToString(int stackNum) {\r\n\t\tint[] items = getStackValues(stackNum);\r\n\t\treturn stackNum + \": \" + AssortedMethods.arrayToString(items);\r\n\t}\t\r\n}\r\n","Chapter":"Q3_01_Three_in_One"}